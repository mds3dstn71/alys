{"version":3,"sources":["app/constants.js","app/common/AppLogo/index.js","index.js","app/index.js","app/App.jsx","app/layout/Header/index.js","app/layout/Header/Header.jsx","app/common/AppLogo/AppLogo.jsx","app/assets/app.svg","app/assets/github.svg","app/common/LoadingOverlay/index.js","app/common/LoadingOverlay/LoadingOverlay.jsx","app/config/component-data.js","serviceWorker.js"],"names":["app","name","description","repoLink","_AppLogo","__webpack_require__","_react","_interopRequireDefault","_reactDom","_app","serviceWorker","_interopRequireWildcard","ReactDOM","render","default","createElement","document","getElementById","register","_App","getRoute","window","location","hash","substr","_useState2","useState","route","setRoute","useEffect","setRouteState","addEventListener","removeEventListener","appName","constants","component","componentData","filter","_ref","Wrapper","_Header","title","concat","Suspense","fallback","_LoadingOverlay","MainContent","Navigation","components","map","_ref2","active","ComponentView","LandingView","_styledComponents","_constants","_componentData","lazy","e","then","t","bind","styled","div","withConfig","displayName","componentId","Brand","as","href","Link","Spacer","external","GithubLogo","github","attrs","height","width","a","target","rel","logo","r","__webpack_exports__","d","ForwardRef","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_extends","Object","assign","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref3","transform","fill","stroke","SvgApp","svgRef","props","viewBox","preserveAspectRatio","ref","forwardRef","p","fillRule","clipRule","SvgGithub","Spinner","spin","keyframes","module","exports","type","required","defaultValue","value","computed","color","code","examples","dark","direction","src","alt","outlined","size","round","children","onChange","icon","text","onClick","disabled","basic","block","iconOnly","arrowSide","variant","timestamp","thick","locale","whole","htmlFor","detail","moreOptionsActions","label","avatar","add","percent","static","fullWidth","fontSize","ellipsis","gutterBottom","config","navigator","publicUrl","URL","process","origin","swUrl","isLocalhost","fetch","response","contentType","headers","get","status","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","Boolean","hostname","match","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error"],"mappings":"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","file":"static/js/main.6f34be67.chunk.js","sourcesContent":["export default {\n  app: {\n    name: 'Alys',\n    description: 'A tiny React component library',\n  },\n  repoLink: 'https://github.com/rmjordas/alys',\n};\n","export { default } from './AppLogo';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.register();\n","export { default } from './App';\n","import React, { Suspense, lazy, useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport constants from './constants';\nimport Header from './layout/Header';\nimport LoadingOverlay from './common/LoadingOverlay';\nimport componentData from './config/component-data';\n\nconst Navigation = lazy(() => import('./layout/Navigation'));\nconst LandingView = lazy(() => import('./views/LandingView'));\nconst ComponentView = lazy(() => import('./views/ComponentView'));\n\nconst Wrapper = styled.div`\n  height: 100vh;\n`;\n\nconst MainContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  height: calc(100% - 69px);\n`;\n\n/** Documentation application entry point */\nexport default function App() {\n  const getRoute = () => window.location.hash.substr(1);\n  const [route, setRoute] = useState(getRoute);\n\n  useEffect(() => {\n    const setRouteState = () => setRoute(getRoute);\n\n    window.addEventListener('hashchange', setRouteState);\n\n    return () => window.removeEventListener('hashchange', setRouteState);\n  }, []);\n\n  const appName = constants.app.name;\n  const component = route\n    ? componentData.filter(({ name }) => name === route)[0]\n    : componentData[0];\n\n  return (\n    <Wrapper>\n      <Header\n        title={route ? `${appName} / Components` : appName}\n        repoLink={constants.repoLink}\n      />\n\n      {route ? (\n        <Suspense fallback={<LoadingOverlay />}>\n          <MainContent>\n            <Navigation\n              components={componentData.map(({ name }) => name)}\n              active={route}\n            />\n\n            <ComponentView component={component} />\n          </MainContent>\n        </Suspense>\n      ) : (\n        <Suspense fallback={<LoadingOverlay />}>\n          <LandingView component={component.name} />\n        </Suspense>\n      )}\n    </Wrapper>\n  );\n}\n","export { default } from './Header';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport AppLogo from '../../common/AppLogo';\nimport { ReactComponent as github } from '../../assets/github.svg';\n\nconst GithubLogo = styled(github).attrs(() => ({\n  height: '20px',\n  width: '20px',\n}))`\n  margin: 0 0.5em;\n\n  && path {\n    fill: #fff;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0;\n  padding: 1em;\n  color: #fff;\n  background-color: #333;\n  border-bottom: 1px solid #d4dadf;\n  box-shadow: 0 1px 1px 0 rgba(116, 129, 141, 0.1);\n`;\n\nconst Brand = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  text-decoration: none;\n\n  &:visited {\n    color: #fff;\n  }\n`;\n\nconst Link = styled.a.attrs(\n  ({ external }) =>\n    external && {\n      target: '_blank',\n      rel: 'noopener noreferrer',\n    },\n)`\n  color: #fff;\n  font-size: 1.5em;\n  line-height: 1.5;\n  text-decoration: none;\n\n  &:visited {\n    color: #fff;\n  }\n`;\n\nconst Spacer = styled.div`\n  flex: 1;\n`;\n\n/** Header containing links to home page and the GitHub repository */\nexport default function Header({ title, repoLink }) {\n  return (\n    <Wrapper>\n      <Brand as=\"a\" href=\"#\">\n        <AppLogo />\n\n        <Link as=\"span\">{title}</Link>\n      </Brand>\n\n      <Spacer />\n\n      <Link href={repoLink} external>\n        <GithubLogo />\n      </Link>\n    </Wrapper>\n  );\n}\n\nHeader.propTypes = {\n  /** Text to be shown for the link to the homepage */\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nimport { ReactComponent as logo } from '../../assets/app.svg';\n\n/** Logo for documentation app */\nconst AppLogo = styled(logo).attrs(() => ({\n  height: '20px',\n  width: '20px',\n}))`\n  margin: 0 0.5em;\n`;\n\nexport default AppLogo;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"metadata\", null, \"\\nCreated by potrace 1.11, written by Peter Selinger 2001-2013\\n\");\n\nvar _ref3 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  transform: \"translate(0.000000,760.000000) scale(0.100000,-0.100000)\",\n  fill: \"#fff\",\n  stroke: \"none\"\n}, React.createElement(\"path\", {\n  d: \"M3785 7518 c-24 -82 -148 -458 -172 -523 -10 -27 -21 -51 -25 -53 -5 -2 -8 -11 -8 -21 0 -9 -7 -27 -16 -39 -8 -12 -13 -22 -11 -22 3 0 -17 -41 -44 -92 -27 -51 -49 -96 -49 -100 0 -4 -4 -8 -10 -8 -5 0 -10 -5 -10 -12 0 -9 -131 -213 -162 -253 -4 -5 -38 -48 -75 -95 -79 -100 -148 -181 -262 -309 -128 -144 -538 -559 -772 -783 -73 -69 -297 -281 -428 -404 -46 -44 -115 -109 -154 -146 -39 -38 -75 -68 -79 -68 -4 0 -8 -3 -8 -7 0 -5 -67 -76 -148 -158 -81 -83 -158 -166 -172 -185 -14 -19 -33 -42 -43 -53 -34 -35 -144 -212 -195 -312 -96 -192 -126 -266 -154 -380 -19 -79 -22 -118 -22 -315 0 -124 3 -250 7 -280 4 -30 9 -67 11 -82 3 -15 11 -56 20 -90 63 -252 183 -447 387 -631 90 -81 90 -81 129 -108 19 -13 42 -31 52 -40 10 -9 31 -22 46 -30 15 -8 29 -17 32 -20 21 -25 253 -114 326 -125 22 -3 50 -7 64 -10 123 -23 441 -22 580 1 451 77 806 318 1097 746 32 46 81 118 108 158 28 40 70 94 94 120 l44 46 12 -28 c13 -33 10 -157 -10 -362 -3 -22 -6 -60 -9 -85 -7 -81 -17 -155 -21 -170 -2 -8 -7 -35 -10 -60 -3 -25 -8 -52 -11 -61 -3 -10 -7 -30 -9 -45 -2 -16 -9 -49 -16 -74 -6 -25 -12 -52 -14 -60 -3 -13 -31 -118 -39 -145 -2 -5 -6 -17 -9 -25 -3 -8 -15 -44 -28 -80 -67 -200 -185 -415 -321 -587 -67 -86 -222 -243 -308 -313 -30 -25 -60 -49 -67 -55 -7 -5 -18 -15 -25 -20 -42 -34 -199 -131 -256 -158 -37 -18 -74 -37 -82 -42 -8 -6 -28 -15 -45 -21 -16 -6 -67 -25 -113 -42 -45 -18 -93 -34 -105 -37 -12 -3 -65 -17 -117 -31 -52 -14 -106 -28 -120 -30 -14 -3 -45 -10 -70 -15 -47 -11 -80 -17 -140 -24 -19 -2 -35 -4 -35 -5 0 -2 -35 -8 -85 -15 -231 -30 -315 -51 -344 -86 -13 -15 -22 -38 -21 -51 1 -13 3 -29 4 -35 0 -7 16 -19 35 -27 88 -37 335 -41 2441 -41 1722 0 2223 4 2315 20 14 2 41 6 61 9 52 8 65 14 77 40 21 47 3 100 -42 120 -41 19 -153 45 -256 60 -19 3 -46 8 -60 11 -14 3 -41 7 -60 10 -36 5 -121 18 -130 20 -3 1 -23 5 -45 9 -22 5 -65 14 -95 21 -30 8 -66 16 -80 18 -14 3 -80 23 -147 46 -453 152 -871 444 -1083 756 -19 28 -42 59 -52 70 -9 11 -18 25 -19 30 -1 6 -19 44 -39 87 -21 42 -40 84 -43 95 -3 10 -20 56 -37 103 -52 146 -122 410 -151 570 -35 204 -40 259 -46 540 l-5 235 21 -22 c12 -12 21 -26 21 -31 0 -4 8 -17 18 -28 24 -27 62 -82 62 -89 0 -3 5 -11 10 -18 6 -7 45 -62 88 -122 81 -116 82 -118 178 -229 203 -235 487 -447 699 -523 56 -20 80 -26 160 -39 133 -22 182 -25 355 -28 194 -3 321 11 415 46 73 26 239 108 243 120 2 4 9 8 16 8 23 0 212 146 287 222 124 124 187 208 256 338 42 80 95 215 87 223 -2 2 0 15 5 28 17 45 26 193 25 399 -1 187 -11 297 -39 425 -4 17 -8 35 -9 40 -1 6 -4 15 -7 20 -4 6 -9 22 -13 37 -3 15 -11 40 -18 55 -6 15 -12 30 -13 33 -11 36 -96 192 -140 256 -34 50 -128 179 -134 184 -4 3 -17 18 -29 34 -25 32 -103 123 -172 200 -163 180 -312 335 -800 826 -432 434 -607 615 -745 765 -49 54 -97 105 -105 114 -8 9 -53 61 -98 116 -46 55 -91 109 -101 120 -9 11 -32 43 -51 70 -19 28 -38 52 -41 55 -10 9 -86 125 -85 130 0 3 -14 26 -32 52 -45 66 -131 241 -187 383 -26 66 -51 129 -56 140 -4 11 -36 99 -70 195 -76 216 -70 200 -78 200 -4 0 -16 -28 -26 -62z\"\n}));\n\nvar SvgApp = function SvgApp(_ref) {\n  var svgRef = _ref.svgRef,\n      props = _objectWithoutProperties(_ref, [\"svgRef\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: \"20px\",\n    height: \"20px\",\n    viewBox: \"0 0 760.000000 760.000000\",\n    preserveAspectRatio: \"xMidYMid meet\",\n    ref: svgRef\n  }, props), _ref2, _ref3);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgApp, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/app.3fa9413b.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  clipRule: \"evenodd\",\n  d: \"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z\",\n  transform: \"scale(64)\",\n  fill: \"#1B1F23\"\n});\n\nvar SvgGithub = function SvgGithub(_ref) {\n  var svgRef = _ref.svgRef,\n      props = _objectWithoutProperties(_ref, [\"svgRef\"]);\n\n  return React.createElement(\"svg\", _extends({\n    width: 1024,\n    height: 1024,\n    viewBox: \"0 0 1024 1024\",\n    fill: \"none\",\n    ref: svgRef\n  }, props), _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgGithub, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/github.07883e93.svg\";\nexport { ForwardRef as ReactComponent };","export { default } from './LoadingOverlay';\n","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst spin = keyframes`\n  0% {transform: rotate(0deg)}\n  100% {transform: rotate(360deg)}\n`;\n\nconst Wrapper = styled.div`\n  background: rgba(255, 255, 255, 0.8);\n  height: 100%;\n  left: 0;\n  padding-top: 200px;\n  position: fixed;\n  text-align: center;\n  top: 0;\n  width: 100%;\n  z-index: 998;\n`;\n\nconst Spinner = styled.div`\n  animation: ${spin} 0.8s linear infinite;\n  border-radius: 50%;\n  border: 4px solid #eee;\n  border-top: 4px solid #555;\n  bottom: 0;\n  height: 4em;\n  left: 0;\n  margin: auto;\n  overflow: show;\n  position: fixed;\n  right: 0;\n  top: 0;\n  transition: all 0.3s linear;\n  width: 4em;\n  z-index: 999;\n`;\n\n/** Shows an page overlay that has a spinner in the middle */\nexport default function LoadingPage() {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  );\n}\n","module.exports = [{\"name\":\"ActiveIndicator\",\"description\":\"Provides a visual representation of the status or state of an interface item.\",\"props\":{\"active\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, indicator will be filled with the color of represented by\\nthe value of the `color` prop\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'error'\",\"computed\":false}]},\"required\":false,\"description\":\"Indicator fill color when value of `active` prop is `true`\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { colors } from '@/constants';\\n\\nconst Indicator = styled.div`\\n  min-height: 0.75em;\\n  max-height: 0.75em;\\n  min-width: 0.75em;\\n  max-width: 0.75em;\\n  border-radius: 50%;\\n  background-color: ${({ active, color }) =>\\n    active\\n      ? colors[color === 'default' ? 'primaryLight' : color]\\n      : colors.whiteBlue};\\n`;\\n\\n/**\\n * Provides a visual representation of the status or state of an interface item.\\n */\\nexport default function ActiveIndicator(props) {\\n  return <Indicator {...props} />;\\n}\\n\\nActiveIndicator.defaultProps = {\\n  active: false,\\n  color: 'default',\\n};\\n\\nActiveIndicator.propTypes = {\\n  /**\\n   * If set to `true`, indicator will be filled with the color of represented by\\n   * the value of the `color` prop\\n   */\\n  active: PropTypes.bool,\\n\\n  /** Indicator fill color when value of `active` prop is `true` */\\n  color: PropTypes.oneOf(['default', 'error']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default\",\"code\":\"import React from 'react';\\nimport ActiveIndicator from 'alys/ActiveIndicator';\\n\\n/** Default */\\nexport default function ExampleBasic() {\\n  return <ActiveIndicator />;\\n}\\n\"},{\"name\":\"ExampleBasicActive\",\"description\":\"Active\",\"code\":\"import React from 'react';\\nimport ActiveIndicator from 'alys/ActiveIndicator';\\n\\n/** Active */\\nexport default function ExampleBasicActive() {\\n  return <ActiveIndicator active />;\\n}\\n\"},{\"name\":\"ExampleBasicError\",\"description\":\"Error\",\"code\":\"import React from 'react';\\nimport ActiveIndicator from 'alys/ActiveIndicator';\\n\\n/** Error */\\nexport default function ExampleBasicActive() {\\n  return <ActiveIndicator active color=\\\"error\\\" />;\\n}\\n\"}]},{\"name\":\"AddMentorIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function AddMentorIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 23.7 23.5\\\" {...svgProps}>\\n      <g id=\\\"add-mentor-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M5.5,13.6v3l-5,2.3\\\" />\\n        <path {...commonProps} id=\\\"path-2\\\" data-name=\\\"path\\\" d=\\\"M13.4,17.5\\\" />\\n        <path {...commonProps} id=\\\"path-3\\\" data-name=\\\"path\\\" d=\\\"M13.1,17.4\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M11.3,13.6v3l1.8.8\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M10.2,14.1a5.2,5.2,0,0,0,3.5-4.9V4.6A4.055,4.055,0,0,0,9.6.5H7.3A4.055,4.055,0,0,0,3.2,4.6V9.2a5.2,5.2,0,0,0,3.5,4.9\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"5\\\"\\n          cy=\\\"5\\\"\\n          r=\\\"5\\\"\\n          transform=\\\"translate(13.2 13)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          y2=\\\"4\\\"\\n          transform=\\\"translate(18.2 16)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          x1=\\\"4\\\"\\n          transform=\\\"translate(16.2 18)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nAddMentorIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nAddMentorIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic add mentor icon\",\"code\":\"import React from 'react';\\nimport AddMentorIcon from 'alys/AddMentorIcon';\\n\\n/** Basic add mentor icon */\\nexport default function ExampleBasic() {\\n  return <AddMentorIcon />;\\n}\\n\"}]},{\"name\":\"AllIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { COLOR_PRIMARY, COLOR_PRIMARY_FILL } from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function AllIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: COLOR_PRIMARY_FILL,\\n    stroke: COLOR_PRIMARY,\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n    strokeWidth: '2px',\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 43.1 43\\\" {...svgProps}>\\n      <g id=\\\"all-icon\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M7.8,10H3.2A2.22,2.22,0,0,1,1,7.8V3.2A2.22,2.22,0,0,1,3.2,1H7.9A2.2,2.2,0,0,1,10,3.2V7.9A2.2,2.2,0,0,1,7.8,10Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M23.8,10H19.1A2.2,2.2,0,0,1,17,7.8V3.2A2.22,2.22,0,0,1,19.2,1h4.7A2.2,2.2,0,0,1,26,3.2V7.9A2.2,2.2,0,0,1,23.8,10Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M39.8,10H35.1A2.2,2.2,0,0,1,33,7.8V3.2A2.22,2.22,0,0,1,35.2,1h4.7A2.2,2.2,0,0,1,42,3.2V7.9A2.2,2.2,0,0,1,39.8,10Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M7.8,26H3.2A2.22,2.22,0,0,1,1,23.8V19.1A2.2,2.2,0,0,1,3.2,17H7.9A2.2,2.2,0,0,1,10,19.2v4.7A2.2,2.2,0,0,1,7.8,26Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M23.8,26H19.1A2.2,2.2,0,0,1,17,23.8V19.1a2.22,2.22,0,0,1,2.2-2.2h4.7a2.22,2.22,0,0,1,2.2,2.2v4.7A2.38,2.38,0,0,1,23.8,26Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-6\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M39.8,26H35.1A2.2,2.2,0,0,1,33,23.8V19.1a2.22,2.22,0,0,1,2.2-2.2h4.7a2.22,2.22,0,0,1,2.2,2.2v4.7A2.38,2.38,0,0,1,39.8,26Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-7\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M7.8,42H3.2A2.22,2.22,0,0,1,1,39.8V35.1A2.2,2.2,0,0,1,3.2,33H7.9A2.2,2.2,0,0,1,10,35.2v4.7A2.2,2.2,0,0,1,7.8,42Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-8\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M23.8,42H19.1A2.2,2.2,0,0,1,17,39.8V35.1a2.22,2.22,0,0,1,2.2-2.2h4.7a2.22,2.22,0,0,1,2.2,2.2v4.7A2.38,2.38,0,0,1,23.8,42Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-9\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M39.8,42H35.1A2.2,2.2,0,0,1,33,39.8V35.1a2.22,2.22,0,0,1,2.2-2.2h4.7a2.22,2.22,0,0,1,2.2,2.2v4.7A2.38,2.38,0,0,1,39.8,42Z\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nAllIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nAllIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default all icon\",\"code\":\"import React from 'react';\\nimport AllIcon from 'alys/AllIcon';\\n\\n/** Default all icon */\\nexport default function ExampleBasic() {\\n  return <AllIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"ArrowIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"direction\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'left'\",\"computed\":false},{\"value\":\"'right'\",\"computed\":false}]},\"required\":false,\"description\":\"Sets the direction\",\"defaultValue\":{\"value\":\"'left'\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { arrowIconOptions } from './arrowIconOptions';\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ArrowLeftIcon({ dark, direction, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n  const { viewBox, transform, d } = arrowIconOptions[direction];\\n\\n  return (\\n    <SvgIcon viewBox={viewBox} {...svgProps}>\\n      <g id=\\\"arrow-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <line {...commonProps} id=\\\"line\\\" x1=\\\"17\\\" transform={transform.line} />\\n        <path {...commonProps} id=\\\"path\\\" strokeLinejoin=\\\"round\\\" d={d} />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nArrowLeftIcon.defaultProps = {\\n  dark: false,\\n  direction: 'left',\\n};\\n\\nArrowLeftIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Sets the direction */\\n  direction: PropTypes.oneOf(['left', 'right']),\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleDefault\",\"description\":\"Default\",\"code\":\"import React from 'react';\\nimport ArrowIcon from 'alys/ArrowIcon';\\n\\n/** Default */\\nexport default function ExampleDefault() {\\n  return <ArrowIcon />;\\n}\\n\"},{\"name\":\"ExampleRight\",\"description\":\"Right\",\"code\":\"import React from 'react';\\nimport ArrowIcon from 'alys/ArrowIcon';\\n\\n/** Right */\\nexport default function ExampleRight() {\\n  return <ArrowIcon direction=\\\"right\\\" />;\\n}\\n\"}]},{\"name\":\"ArtIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_WHITE,\\n  COLOR_BLUE_GRAY,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ArtIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: COLOR_PRIMARY,\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 45.882 52.012\\\" {...svgProps}>\\n      <g id=\\\"art-icon\\\">\\n        <path\\n          id=\\\"path\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          d=\\\"M16.363,32.5h9.451L29.3,37.788H13.1Z\\\"\\n          transform=\\\"translate(1.515 3.943)\\\"\\n        />\\n        <rect\\n          {...commonProps}\\n          id=\\\"rectangle\\\"\\n          fill={COLOR_WHITE}\\n          strokeWidth=\\\"2px\\\"\\n          width=\\\"39.381\\\"\\n          height=\\\"27.004\\\"\\n          transform=\\\"translate(3.25 1)\\\"\\n        />\\n        <path\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          d=\\\"M21.063,26.7l4.388,6.526H16Z\\\"\\n          transform=\\\"translate(1.878 3.217)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeWidth=\\\"2px\\\"\\n          x2=\\\"43.882\\\"\\n          transform=\\\"translate(1 28.004)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          fill=\\\"none\\\"\\n          strokeWidth=\\\"2px\\\"\\n          data-name=\\\"line\\\"\\n          x1=\\\"15.19\\\"\\n          y2=\\\"21.941\\\"\\n          transform=\\\"translate(7.864 28.679)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-3\\\"\\n          fill=\\\"none\\\"\\n          strokeWidth=\\\"2px\\\"\\n          data-name=\\\"line\\\"\\n          x2=\\\"15.19\\\"\\n          y2=\\\"21.941\\\"\\n          transform=\\\"translate(22.716 28.679)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-4\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          x2=\\\"18.003\\\"\\n          transform=\\\"translate(13.94 42.069)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-5\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          x2=\\\"11.252\\\"\\n          transform=\\\"translate(17.315 36.443)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M3.3,17.1\\\"\\n          transform=\\\"translate(0.288 2.015)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M37.8,17\\\"\\n          transform=\\\"translate(4.606 2.003)\\\"\\n        />\\n        <path\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          d=\\\"M41.631,17.3V26.08H3.6V17.866l2.588-.338,3.6.563a18.4,18.4,0,0,1,25.879,0Z\\\"\\n          transform=\\\"translate(0.325 1.474)\\\"\\n        />\\n        <path\\n          id=\\\"path-6\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          d=\\\"M27.127,13.763a5.963,5.963,0,0,0-11.927,0h.9l4.276-.563,3.376.113Z\\\"\\n          transform=\\\"translate(1.777 0.851)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-7\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M9.1,18.091a18.4,18.4,0,0,1,25.879,0\\\"\\n          transform=\\\"translate(1.014 1.474)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-8\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M13.652,20.167A11.238,11.238,0,0,0,3.3,17.129\\\"\\n          transform=\\\"translate(0.288 1.987)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-9\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M38.889,17.017a11.155,11.155,0,0,0-9.789,3.15\\\"\\n          transform=\\\"translate(3.517 1.986)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-10\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M27.127,13.763a5.963,5.963,0,0,0-11.927,0\\\"\\n          transform=\\\"translate(1.777 0.851)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-11\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M41.631,16.8v8.776H3.6V17.363\\\"\\n          transform=\\\"translate(0.325 1.978)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nArtIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nArtIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default art icon\",\"code\":\"import React from 'react';\\nimport ArtIcon from 'alys/ArtIcon';\\n\\n/** Default art icon */\\nexport default function ExampleBasic() {\\n  return <ArtIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"AttachmentIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function AttachmentIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17.9 19.3\\\" {...svgProps}>\\n      <g id=\\\"attachment-icon\\\" transform=\\\"translate(0.05 -0.05)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M9.6,3.3,1.8,11.1a4.468,4.468,0,0,0,0,6.4h0a4.468,4.468,0,0,0,6.4,0L16,9.7\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M7.5,15.3l8.8-8.8a3.383,3.383,0,0,0,0-4.9h0a3.383,3.383,0,0,0-4.9,0L3.2,9.7\\\"\\n        />\\n        <path {...commonProps} id=\\\"path-3\\\" data-name=\\\"path\\\" d=\\\"M2.9,15\\\" />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x1=\\\"7.1\\\"\\n          y2=\\\"7.1\\\"\\n          transform=\\\"translate(3.9 4.7)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M3.9,11.8a2.416,2.416,0,0,0,0,3.5,2.5,2.5,0,0,0,3.5,0\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nAttachmentIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nAttachmentIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic attachment icon\",\"code\":\"import React from 'react';\\nimport AttachmentIcon from 'alys/AttachmentIcon';\\n\\n/** Basic attachment icon */\\nexport default function ExampleBasic() {\\n  return <AttachmentIcon />;\\n}\\n\"}]},{\"name\":\"Avatar\",\"description\":\"Image avatars.\",\"props\":{\"src\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Path to the image file\"},\"alt\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Alternate text for the image\",\"defaultValue\":{\"value\":\"''\",\"computed\":false}},\"outlined\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Show or hide image outline\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"size\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'smaller'\",\"computed\":false},{\"value\":\"'small'\",\"computed\":false},{\"value\":\"'default'\",\"computed\":false}]},\"required\":false,\"description\":\"Pre-set avatar size\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}},\"round\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set `true`, image shape will be clipped to a circle\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled, { ThemeProvider } from 'styled-components';\\n\\nimport {\\n  COLOR_GRAY_BLUE,\\n  COLOR_WHITE,\\n  COLOR_WHITE_BLUE,\\n  avatarSizes,\\n} from '@/constants';\\nimport MentorIcon from '@/MentorIcon';\\n\\n/** Returns the size of the avatar */\\nexport function getSize({ theme: { size } }) {\\n  return size;\\n}\\n\\n/** Calculates size of the avatar with an outline */\\nexport function calcSize(percent) {\\n  return ({ theme: { size } }) => size + size * percent;\\n}\\n\\nconst Wrapper = styled.div`\\n  background-color: ${COLOR_WHITE};\\n  width: ${calcSize(0.2)}em;\\n  height: ${calcSize(0.2)}em;\\n  border-radius: ${({ theme: { size } }) => size * 0.1}em;\\n`;\\n\\nconst Img = styled.img`\\n  height: ${getSize}em;\\n  width: ${getSize}em;\\n  border-radius: ${({ theme: { size, round } }) =>\\n    round ? '50%' : `${size * 0.1}em`};\\n  margin: ${({ theme: { size, outlined, round } }) =>\\n    outlined && !round ? size * 0.1 : 0}em;\\n`;\\n\\nconst DefaultWrapper = styled(Wrapper)`\\n  background-color: ${COLOR_WHITE_BLUE};\\n`;\\n\\nconst StyledMentorIcon = styled(MentorIcon)`\\n  position: relative;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n\\n  && path {\\n    stroke: ${COLOR_GRAY_BLUE};\\n  }\\n`;\\n\\n/** Image avatars. */\\nexport default function Avatar({ src, alt, outlined, size, round }) {\\n  const theme = {\\n    size: avatarSizes[size],\\n    outlined,\\n    round,\\n  };\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      {src ? (\\n        outlined && !round ? (\\n          <Wrapper>\\n            <Img src={src} alt={alt} />\\n          </Wrapper>\\n        ) : (\\n          <Img src={src} alt={alt} />\\n        )\\n      ) : (\\n        <DefaultWrapper>\\n          <StyledMentorIcon />\\n        </DefaultWrapper>\\n      )}\\n    </ThemeProvider>\\n  );\\n}\\n\\nAvatar.defaultProps = {\\n  alt: '',\\n  outlined: false,\\n  size: 'default',\\n  round: false,\\n};\\n\\nAvatar.propTypes = {\\n  /** Path to the image file */\\n  src: PropTypes.string,\\n\\n  /** Alternate text for the image */\\n  alt: PropTypes.string,\\n\\n  /** Show or hide image outline */\\n  outlined: PropTypes.bool,\\n\\n  /** Pre-set avatar size */\\n  size: PropTypes.oneOf(['smaller', 'small', 'default']),\\n\\n  /** If set `true`, image shape will be clipped to a circle */\\n  round: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleDefaultSmaller\",\"description\":\"Smaller size avatar with default image\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\n/** Smaller size avatar with default image */\\nexport default function ExampleDefaultSmaller() {\\n  return <Avatar size=\\\"smaller\\\" />;\\n}\\n\"},{\"name\":\"ExampleNormal\",\"description\":\"Normal size avatar\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../app/assets/alys.jpg';\\n\\n/** Normal size avatar */\\nexport default function ExampleNormal() {\\n  return <Avatar src={img} />;\\n}\\n\"},{\"name\":\"ExampleOutlined\",\"description\":\"Small size with outline\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../app/assets/alys.jpg';\\n\\n/** Small size with outline */\\nexport default function ExampleOutlined() {\\n  return <Avatar src={img} size=\\\"small\\\" outlined />;\\n}\\n\"},{\"name\":\"ExampleSmallRound\",\"description\":\"Small and rounded avatar\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../app/assets/alys.jpg';\\n\\n/** Small and rounded avatar */\\nexport default function ExampleSmallRound() {\\n  return <Avatar src={img} size=\\\"small\\\" round />;\\n}\\n\"},{\"name\":\"ExampleSmallSize\",\"description\":\"Small avatar\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../app/assets/alys.jpg';\\n\\n/** Small avatar */\\nexport default function ExampleSmallSize() {\\n  return <Avatar src={img} size=\\\"small\\\" />;\\n}\\n\"},{\"name\":\"ExampleSmaller\",\"description\":\"Smaller size avatar\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../app/assets/alys.jpg';\\n\\n/** Smaller size avatar */\\nexport default function ExampleSmaller() {\\n  return <Avatar src={img} size=\\\"smaller\\\" />;\\n}\\n\"}]},{\"name\":\"BottomBar\",\"description\":\"Provides a list of action items that a user can click to navigate to another\\npart of the app or to do a task on the current page.\",\"props\":{\"children\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"List of <BottomBarAction /> items\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"The <BottomBarAction /> children use this value to determine if it is\\nselected.\"},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Callback when `value` changes. Must have two params for the `event` object\\nand the `value`\"}},\"code\":\"import React, { Children, isValidElement, cloneElement } from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { COLOR_WHITE } from '@/constants';\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  justify-content: space-around;\\n  align-items: center;\\n  width: 100%;\\n  overflow-x: auto;\\n  max-height: 5.3125em;\\n  background: ${COLOR_WHITE};\\n\\n  @media (min-width: 34em) {\\n    justify-content: center;\\n  }\\n`;\\n\\n/**\\n * Provides a list of action items that a user can click to navigate to another\\n * part of the app or to do a task on the current page.\\n */\\nexport default function BottomBar({ children: childrenProp, value, onChange }) {\\n  const children = Children.map(childrenProp, (child, i) => {\\n    if (!isValidElement(child)) {\\n      return null;\\n    }\\n\\n    const childValue = child.props.value === undefined ? i : child.props.value;\\n\\n    return cloneElement(child, {\\n      selected: childValue === value,\\n      value: childValue,\\n      onChange,\\n    });\\n  });\\n\\n  return <Wrapper>{children}</Wrapper>;\\n}\\n\\nBottomBar.propTypes = {\\n  /** List of <BottomBarAction /> items */\\n  children: PropTypes.node.isRequired,\\n\\n  /**\\n   * The <BottomBarAction /> children use this value to determine if it is\\n   * selected.\\n   */\\n  value: PropTypes.any,\\n\\n  /**\\n   * Callback when `value` changes. Must have two params for the `event` object\\n   * and the `value`\\n   */\\n  onChange: PropTypes.func,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic bottom bar\",\"code\":\"import React, { Fragment, useState } from 'react';\\nimport BottomBar from 'alys/BottomBar';\\nimport BottomBarAction from 'alys/BottomBarAction';\\nimport HomeIcon from 'alys/HomeIcon';\\nimport MentorIcon from 'alys/MentorIcon';\\nimport CommentIcon from 'alys/CommentIcon';\\nimport SettingsIcon from 'alys/SettingsIcon';\\n\\n/** Basic bottom bar */\\nexport default function ExampleBasic() {\\n  const [value, setValue] = useState('Mentor');\\n\\n  const handleOnChange = (_event, v) => setValue(v);\\n\\n  return (\\n    <Fragment>\\n      <p>\\n        Selected: <strong>{value}</strong>\\n      </p>\\n\\n      <BottomBar value={value} onChange={handleOnChange}>\\n        <BottomBarAction value=\\\"Home\\\" icon={<HomeIcon />} />\\n        <BottomBarAction value=\\\"Mentor\\\" icon={<MentorIcon />} />\\n        <BottomBarAction value=\\\"Comment\\\" icon={<CommentIcon />} />\\n        <BottomBarAction value=\\\"Settings\\\" icon={<SettingsIcon />} />\\n      </BottomBar>\\n    </Fragment>\\n  );\\n}\\n\"}]},{\"name\":\"BottomBarAction\",\"description\":\"An action item inside <BottomBar />\",\"props\":{\"value\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Value to be passed to a `BottomBar` parent's `onChange` prop\"},\"icon\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"Icon to display\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport {\\n  COLOR_GRAY_BLUE,\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_LIGHT,\\n} from '@/constants';\\n\\nconst Action = styled.div`\\n  padding: 0.875em 0.875em;\\n  cursor: pointer;\\n  color: ${COLOR_GRAY_BLUE};\\n\\n  svg {\\n    width: 1.15em;\\n    transition: color 0.2s ease-in-out;\\n    color: ${({ selected }) => (selected ? COLOR_PRIMARY : 'inherit')};\\n  }\\n\\n  &:hover svg {\\n    color: ${COLOR_PRIMARY_LIGHT};\\n  }\\n\\n  @media (min-width: 34em) {\\n    padding: 1.3125em 3em;\\n\\n    svg {\\n      width: initial;\\n    }\\n  }\\n\\n  @media (min-width: 60em) {\\n    padding: 1.75em 3.5em;\\n  }\\n`;\\n\\n/** An action item inside <BottomBar /> */\\nexport default function BottomBarAction({ icon, selected, value, onChange }) {\\n  const handleOnClick = (event) => {\\n    if (onChange) {\\n      onChange(event, value);\\n    }\\n  };\\n\\n  return (\\n    <Action selected={selected} onClick={handleOnClick}>\\n      {icon}\\n    </Action>\\n  );\\n}\\n\\nBottomBarAction.propTypes = {\\n  /** Value to be passed to a `BottomBar` parent's `onChange` prop */\\n  value: PropTypes.string,\\n\\n  /** Icon to display */\\n  icon: PropTypes.node.isRequired,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default bottom bar action\",\"code\":\"import React from 'react';\\nimport BottomBarAction from 'alys/BottomBarAction';\\nimport MentorIcon from 'alys/MentorIcon';\\n\\n/** Default bottom bar action */\\nexport default function ExampleBasic() {\\n  return <BottomBarAction value=\\\"Mentor\\\" icon={<MentorIcon />} />;\\n}\\n\"}]},{\"name\":\"BusinessIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_BLUE_GRAY,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function BusinessIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: COLOR_PRIMARY,\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 48.366 47.814\\\" {...svgProps}>\\n      <g id=\\\"business-icon\\\">\\n        <path\\n          id=\\\"path\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          d=\\\"M39.6,22.138V5.6A4.551,4.551,0,0,0,35,1H5.6A4.551,4.551,0,0,0,1,5.6V35a4.551,4.551,0,0,0,4.6,4.6H21.678l-2.941-8.363,2.941-7.628,5.79-4.228H33.9l5.7,2.757\\\"\\n        />\\n        <path\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_PRIMARY}\\n          d=\\\"M30.9,22.251l3.309-.551,3.217.46V35.945l-6.433-.092Z\\\"\\n          transform=\\\"translate(-2.421 -1.676)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M21.176,36.638H19.338A1.843,1.843,0,0,1,17.5,34.8V17.338A1.843,1.843,0,0,1,19.338,15.5h3.676a1.843,1.843,0,0,1,1.838,1.838V24.69\\\"\\n          transform=\\\"translate(-1.336 -1.174)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M22,36.947h.919a1.843,1.843,0,0,0,1.838-1.838V25\\\"\\n          transform=\\\"translate(-1.7 -1.943)\\\"\\n        />\\n        <path\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_PRIMARY}\\n          d=\\\"M20.743,36.866H24.6V24l-2.481,2.665-1.47,3.217L20.1,34.569Z\\\"\\n          transform=\\\"translate(-1.547 -1.862)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-6\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M11.106,37.366H7.246A1.745,1.745,0,0,1,5.5,35.62V26.246A1.745,1.745,0,0,1,7.246,24.5h3.768a1.745,1.745,0,0,1,1.746,1.746v9.282A1.7,1.7,0,0,1,11.106,37.366Z\\\"\\n          transform=\\\"translate(-0.364 -1.903)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-7\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M37.433,22V34.866A1.843,1.843,0,0,1,35.6,36.7H32.838A1.843,1.843,0,0,1,31,34.866V22\\\"\\n          transform=\\\"translate(-2.429 -1.7)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-8\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M30.5,20.2V7.338A1.843,1.843,0,0,1,32.338,5.5h3.676a1.843,1.843,0,0,1,1.838,1.838V19.285\\\"\\n          transform=\\\"translate(-2.389 -0.364)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M44.534,34.6A9.845,9.845,0,0,1,34.7,44.434\\\"\\n          transform=\\\"translate(-2.729 -2.721)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          cx=\\\"12.407\\\"\\n          cy=\\\"12.407\\\"\\n          r=\\\"12.407\\\"\\n          transform=\\\"translate(19.381 19.381)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          x2=\\\"5.514\\\"\\n          y2=\\\"5.514\\\"\\n          transform=\\\"translate(41.437 40.886)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"2.757\\\"\\n          transform=\\\"translate(7.433 24.435)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-3\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"2.757\\\"\\n          transform=\\\"translate(18.462 16.164)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-4\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"2.757\\\"\\n          transform=\\\"translate(30.409 6.974)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-9\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M21.678,39.6H5.6A4.551,4.551,0,0,1,1,35V5.6A4.551,4.551,0,0,1,5.6,1H35a4.551,4.551,0,0,1,4.6,4.6V22.138\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nBusinessIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nBusinessIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default business icon\",\"code\":\"import React from 'react';\\nimport BusinessIcon from 'alys/BusinessIcon';\\n\\n/** Default business icon */\\nexport default function ExampleBasic() {\\n  return <BusinessIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"Button\",\"description\":\"Button signals to the user that an action can be performed by clicking or\\ntaping this element.\",\"props\":{\"text\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Text to display on the button\"},\"onClick\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Handler to call when button is clicked\"},\"disabled\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, the button cannot be interacted with\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"basic\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Button width is determined by the content. If set to `true`, the value of\\n`icon` will be ignored.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"block\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, the button's width will span it's container's width\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'secondary'\",\"computed\":false}]},\"required\":false,\"description\":\"Button color preset\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'link'\",\"computed\":false}]},\"required\":false,\"description\":\"Button type\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}},\"icon\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"The icon to be displayed before the button text\",\"defaultValue\":{\"value\":\"null\",\"computed\":false}},\"iconOnly\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"A button that contains only an icon. If this is set to `true` the value of\\n`text` is ignored.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled, { css } from 'styled-components';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_WHITE,\\n  COLOR_GRAY_BLUE,\\n  GRADIENT_PRIMARY,\\n  TYPE_FONT_SIZE_HEADING_6,\\n} from '@/constants';\\nimport { styleLengths } from '@utils/string-utils';\\n\\nconst disabledStyles = css`\\n  background-color: ${COLOR_GRAY_BLUE};\\n\\n  && {\\n    cursor: default;\\n  }\\n`;\\n\\n/**\\n * Returns `null` if an icon node is not provided. Otherwise, it returns a\\n * styled <Icon /> component.\\n */\\nfunction buttonIcon({ icon, type = 'default', iconOnly = false }) {\\n  if (!icon) {\\n    return null;\\n  }\\n\\n  const Icon = styled(icon).attrs(() => ({\\n    dark: type !== 'link',\\n  }))`\\n    margin-right: ${iconOnly ? 0 : '1.125em'};\\n    vertical-align: middle;\\n\\n    && svg {\\n      font-size: 1.125em;\\n    }\\n  `;\\n\\n  return <Icon />;\\n}\\n\\n/** Linear gradient value builder for the `background` property. */\\nfunction linearGradient(colors) {\\n  return `linear-gradient(to right, ${colors})`;\\n}\\n\\nconst BasicButton = styled.div.attrs(({ text }) => ({\\n  children: text,\\n  role: 'button',\\n}))`\\n  border: 0;\\n  outline: none;\\n  user-select: none;\\n  display: inline-block;\\n  text-align: center;\\n  vertical-align: middle;\\n  background: ${({ type }) =>\\n    type === 'link' ? 'transparent' : COLOR_PRIMARY};\\n  color: ${({ type }) => (type === 'link' ? COLOR_PRIMARY : COLOR_WHITE)};\\n  text-transform: uppercase;\\n  border-radius: 0.375em;\\n  padding: 1em;\\n  font-size: ${styleLengths(TYPE_FONT_SIZE_HEADING_6)};\\n  font-weight: 500;\\n  overflow: hidden;\\n  position: relative;\\n\\n  &:hover {\\n    cursor: pointer;\\n  }\\n\\n  ${({ disabled }) => disabled && disabledStyles}\\n`;\\n\\nconst IconOnlyButton = styled(BasicButton).attrs(({ icon }) => ({\\n  children: buttonIcon({ icon, iconOnly: true }),\\n}))`\\n  border-radius: 50%;\\n`;\\n\\nconst WideButton = styled(BasicButton)`\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  justify-content: center;\\n  background: ${({ type, disabled }) => {\\n    if (disabled) {\\n      return type === 'link' ? 'transparent' : COLOR_GRAY_BLUE;\\n    }\\n\\n    return type === 'link' ? 'transparent' : linearGradient(GRADIENT_PRIMARY);\\n  }};\\n  color: ${({ type, disabled, theme: { darkMode } }) => {\\n    if (type === 'link') {\\n      if (disabled) {\\n        return 'inherit';\\n      }\\n\\n      return darkMode ? 'inherit' : COLOR_PRIMARY;\\n    }\\n\\n    return COLOR_WHITE;\\n  }};\\n  border-radius: ${({ block }) => (block ? 0 : '0.375em')};\\n  min-height: 4em;\\n  margin: ${({ block }) => (block ? 0 : '1.25em 1.875em')};\\n`;\\n\\n/**\\n * Button signals to the user that an action can be performed by clicking or\\n * taping this element.\\n */\\nexport default function Button({\\n  basic,\\n  text,\\n  block,\\n  type,\\n  icon,\\n  iconOnly,\\n  ...props\\n}) {\\n  if (props.disabled) {\\n    props.onClick = undefined;\\n  }\\n\\n  if (iconOnly) {\\n    return <IconOnlyButton icon={icon} {...props} />;\\n  }\\n\\n  if (basic) {\\n    return <BasicButton text={text} type={type} {...props} />;\\n  }\\n\\n  return (\\n    <WideButton block={block} type={type} {...props}>\\n      {buttonIcon({ icon, type })} {text}\\n    </WideButton>\\n  );\\n}\\n\\nButton.defaultProps = {\\n  basic: false,\\n  block: false,\\n  color: 'default',\\n  icon: null,\\n  iconOnly: false,\\n  type: 'default',\\n  disabled: false,\\n};\\n\\nButton.propTypes = {\\n  /** Text to display on the button */\\n  text: PropTypes.string,\\n\\n  /** Handler to call when button is clicked */\\n  onClick: PropTypes.func,\\n\\n  /** If set to `true`, the button cannot be interacted with */\\n  disabled: PropTypes.bool,\\n\\n  /**\\n   * Button width is determined by the content. If set to `true`, the value of\\n   * `icon` will be ignored.\\n   */\\n  basic: PropTypes.bool,\\n\\n  /** If set to `true`, the button's width will span it's container's width */\\n  block: PropTypes.bool,\\n\\n  /** Button color preset */\\n  color: PropTypes.oneOf(['default', 'secondary']),\\n\\n  /** Button type */\\n  type: PropTypes.oneOf(['default', 'link']),\\n\\n  /** The icon to be displayed before the button text */\\n  icon: PropTypes.func,\\n\\n  /**\\n   * A button that contains only an icon. If this is set to `true` the value of\\n   * `text` is ignored.\\n   */\\n  iconOnly: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\n\\n/** Basic button */\\nexport default function ExampleBasic() {\\n  return <Button basic text=\\\"Example basic\\\" />;\\n}\\n\"},{\"name\":\"ExampleBlock\",\"description\":\"Block button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\n\\n/** Block button */\\nexport default function ExampleBlock() {\\n  return <Button block text=\\\"Example block\\\" />;\\n}\\n\"},{\"name\":\"ExampleBlockIcon\",\"description\":\"Block with icon button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\nimport RegisterIcon from 'alys/RegisterIcon';\\n\\n/** Block with icon button */\\nexport default function ExampleBlockIcon() {\\n  return <Button block icon={RegisterIcon} text=\\\"Example block with Icon\\\" />;\\n}\\n\"},{\"name\":\"ExampleDefault\",\"description\":\"Default button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\n\\n/** Default button */\\nexport default function ExampleDefault() {\\n  return <Button text=\\\"Example default\\\" />;\\n}\\n\"},{\"name\":\"ExampleDefaultIcon\",\"description\":\"Default button with icon\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\nimport MentorIcon from 'alys/MentorIcon';\\n\\n/** Default button with icon */\\nexport default function ExampleDefaultIcon() {\\n  return <Button text=\\\"Example default with icon\\\" icon={MentorIcon} />;\\n}\\n\"},{\"name\":\"ExampleIconOnly\",\"description\":\"Icon only button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\nimport ArrowIcon from 'alys/ArrowIcon';\\n\\n/** Icon only button */\\nexport default function ExampleIconOnly() {\\n  return <Button iconOnly icon={ArrowIcon} />;\\n}\\n\"},{\"name\":\"ExamplePlayground\",\"description\":\"Button playgound\",\"code\":\"import React, { Fragment, useState } from 'react';\\nimport Button from 'alys/Button';\\nimport ArrowIcon from 'alys/ArrowIcon';\\n\\nimport ToggleButton from '../../app/common/ToggleButton';\\n\\n/** Button playgound */\\nexport default function ExamplePlayground() {\\n  const [isDisabled, setIsDisabled] = useState(false);\\n  const [count, setCount] = useState(0);\\n\\n  const updateCount = () => setCount((prevCount) => prevCount + 1);\\n  const toggleButtonDisabledState = () =>\\n    setIsDisabled((prevDisabled) => !prevDisabled);\\n\\n  const common = {\\n    disabled: isDisabled,\\n    onClick: updateCount,\\n  };\\n\\n  return (\\n    <Fragment>\\n      <ToggleButton\\n        on={isDisabled}\\n        onClick={toggleButtonDisabledState}\\n        onText=\\\"enable\\\"\\n        offText=\\\"disable\\\"\\n      />\\n\\n      <p>\\n        Count: <strong>{count}</strong>\\n      </p>\\n\\n      <div style={{ textAlign: 'center' }}>\\n        <Button\\n          basic\\n          text=\\\"basic\\\"\\n          {...common}\\n          style={{ marginBottom: '1em' }}\\n        />\\n\\n        <Button block text=\\\"block\\\" {...common} />\\n\\n        <Button text=\\\"default\\\" {...common} />\\n\\n        <Button iconOnly icon={ArrowIcon} {...common} />\\n\\n        <Button type=\\\"link\\\" text=\\\"Link\\\" {...common} />\\n      </div>\\n    </Fragment>\\n  );\\n}\\n\"},{\"name\":\"ExampleTextOnly\",\"description\":\"Text-only type button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\n\\n/** Text-only type button */\\nexport default function ExampleTextOnly() {\\n  return <Button type=\\\"link\\\" text=\\\"Example text only\\\" />;\\n}\\n\"},{\"name\":\"ExampleTextOnlyIcon\",\"description\":\"Text-only type button with icon\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\nimport RegisterIcon from 'alys/RegisterIcon';\\n\\n/** Text-only type button with icon */\\nexport default function ExampleTextOnlyIcon() {\\n  return (\\n    <Button\\n      type=\\\"link\\\"\\n      text=\\\"Example text only with icon\\\"\\n      icon={RegisterIcon}\\n    />\\n  );\\n}\\n\"}]},{\"name\":\"CalendarIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { COLOR_WHITE, colors } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CalendarIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17 19\\\" {...svgProps}>\\n      <path\\n        {...commonProps}\\n        id=\\\"path\\\"\\n        d=\\\"M15.5,18.5H1.5a.945.945,0,0,1-1-1V3.5a.945.945,0,0,1,1-1h14a.945.945,0,0,1,1,1v14A.945.945,0,0,1,15.5,18.5Z\\\"\\n      />\\n      <line {...commonProps} id=\\\"line\\\" y2=\\\"4\\\" transform=\\\"translate(3.5 0.5)\\\" />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-2\\\"\\n        data-name=\\\"line\\\"\\n        y2=\\\"4\\\"\\n        transform=\\\"translate(13.5 0.5)\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-3\\\"\\n        data-name=\\\"line\\\"\\n        x2=\\\"16\\\"\\n        transform=\\\"translate(0.5 14.5)\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nCalendarIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCalendarIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic calendar icon\",\"code\":\"import React from 'react';\\nimport CalendarIcon from 'alys/CalendarIcon';\\n\\n/** Basic calendar icon */\\nexport default function ExampleBasic() {\\n  return <CalendarIcon />;\\n}\\n\"}]},{\"name\":\"CameraFlipIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CameraFlipIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20.752 16.104\\\" {...svgProps}>\\n      <g id=\\\"camera-flip-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M18.974,2.824H15.14l-.465-1.51A1.116,1.116,0,0,0,13.629.5H7.123a1.116,1.116,0,0,0-1.046.813L5.5,2.824H1.778A1.289,1.289,0,0,0,.5,4.1V14.326A1.289,1.289,0,0,0,1.778,15.6h17.2a1.289,1.289,0,0,0,1.278-1.278V4.1A1.289,1.289,0,0,0,18.974,2.824Z\\\"\\n          transform=\\\"translate(0 0)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M14.464,7.3l-1.743,3.021L9.7,8.694\\\"\\n          transform=\\\"translate(1.489 1.101)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M5.1,9.667A4.041,4.041,0,0,1,9.167,5.6a3.944,3.944,0,0,1,3.95,4.067\\\"\\n          transform=\\\"translate(0.745 0.826)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nCameraFlipIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCameraFlipIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic camera flip icon\",\"code\":\"import React from 'react';\\nimport CameraFlipIcon from 'alys/CameraFlipIcon';\\n\\n/** Basic camera flip icon */\\nexport default function ExampleBasic() {\\n  return <CameraFlipIcon />;\\n}\\n\"}]},{\"name\":\"CameraIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CameraIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 18 14\\\" {...svgProps}>\\n      <circle\\n        {...commonProps}\\n        id=\\\"ellipse\\\"\\n        cx=\\\"3.5\\\"\\n        cy=\\\"3.5\\\"\\n        r=\\\"3.5\\\"\\n        transform=\\\"translate(5.5 4.5)\\\"\\n      />\\n      <circle\\n        {...commonProps}\\n        id=\\\"ellipse-2\\\"\\n        data-name=\\\"ellipse\\\"\\n        cx=\\\"0.5\\\"\\n        cy=\\\"0.5\\\"\\n        r=\\\"0.5\\\"\\n        transform=\\\"translate(14.5 4.5)\\\"\\n      />\\n      <path\\n        {...commonProps}\\n        id=\\\"path\\\"\\n        d=\\\"M16.4,2.5H13.1l-.4-1.3a.961.961,0,0,0-.9-.7H6.2a.961.961,0,0,0-.9.7L4.8,2.5H1.6A1.11,1.11,0,0,0,.5,3.6v8.8a1.11,1.11,0,0,0,1.1,1.1H16.4a1.11,1.11,0,0,0,1.1-1.1V3.6A1.11,1.11,0,0,0,16.4,2.5Z\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nCameraIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCameraIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic camera icon\",\"code\":\"import React from 'react';\\nimport CameraIcon from 'alys/CameraIcon';\\n\\n/** Basic camera icon */\\nexport default function ExampleBasic() {\\n  return <CameraIcon />;\\n}\\n\"}]},{\"name\":\"CardIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CardIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 14\\\" {...svgProps}>\\n      <g id=\\\"card-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M17.5,13.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h16a.945.945,0,0,1,1,1v11A.945.945,0,0,1,17.5,13.5Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          strokeWidth=\\\"3px\\\"\\n          x2=\\\"18\\\"\\n          transform=\\\"translate(1 5.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"4\\\"\\n          transform=\\\"translate(3.5 10.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nCardIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCardIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic card icon\",\"code\":\"import React from 'react';\\nimport CardIcon from 'alys/CardIcon';\\n\\n/** Basic card icon */\\nexport default function ExampleBasic() {\\n  return <CardIcon />;\\n}\\n\"}]},{\"name\":\"ChatBubble\",\"description\":\"Wraps a message text in a chat bubble with an indication as to which side it\\nwas sent\",\"props\":{\"children\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Message to display inside the chat bubble\"},\"arrowSide\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'left'\",\"computed\":false},{\"value\":\"'right'\",\"computed\":false}]},\"required\":false,\"description\":\"Side to display the chat bubbble arrow\",\"defaultValue\":{\"value\":\"'right'\",\"computed\":false}},\"variant\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'secondary'\",\"computed\":false}]},\"required\":false,\"description\":\"Main appearance of chat bubble\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}},\"timestamp\":{\"type\":{\"name\":\"instanceOf\",\"value\":\"Date\"},\"required\":false,\"description\":\"Time information for a message\"}},\"code\":\"import React, { Fragment } from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled, { css } from 'styled-components';\\n\\nimport Timestamp from '@/Timestamp';\\n\\nimport {\\n  COLOR_DARK,\\n  COLOR_WHITE,\\n  COLOR_WHITE_BLUE,\\n  COLOR_GRAY_BLUE,\\n  TYPE_FONT_SIZE_PARAGRAPH,\\n  TYPE_FONT_SIZE_HEADING_6,\\n} from '@/constants';\\nimport { styleLengths } from '@utils/string-utils';\\n\\nconst Wrapper = styled.div`\\n  ${({ variant }) => {\\n    switch (variant) {\\n      case 'secondary':\\n        return css`\\n          background: ${COLOR_WHITE_BLUE};\\n          color: ${COLOR_DARK};\\n        `;\\n      case 'default':\\n      default:\\n        return css`\\n          background: linear-gradient(to top right, #5574f7, #60c3ff);\\n          color: ${COLOR_WHITE};\\n        `;\\n    }\\n  }};\\n  border-radius: 0.375em;\\n  padding: 1em;\\n  position: relative;\\n\\n  ::after {\\n    content: '';\\n    height: 0;\\n    border-top: 0.421875rem solid transparent;\\n    border-bottom: 0.421875rem solid transparent;\\n    ${({ arrowSide, variant }) => {\\n      switch (arrowSide) {\\n        case 'left':\\n          return css`\\n            border-right: 0.43rem solid\\n              ${variant === 'secondary' ? COLOR_WHITE_BLUE : '#5a99fb'};\\n            left: -0.43rem;\\n          `;\\n        case 'right':\\n        default:\\n          return css`\\n            border-left: 0.43rem solid\\n              ${variant === 'secondary' ? COLOR_WHITE_BLUE : '#60c3ff'};\\n            right: -0.43rem;\\n          `;\\n      }\\n    }}\\n    position: absolute;\\n    top: 0.83125rem;\\n    width: 0;\\n  }\\n`;\\n\\nconst Message = styled.p`\\n  font-size: ${styleLengths(TYPE_FONT_SIZE_PARAGRAPH)};\\n  font-weight: 400;\\n  line-height: 1.5;\\n  margin: 0;\\n`;\\n\\nconst MessageTimestamp = styled.div`\\n  color: ${COLOR_GRAY_BLUE};\\n  font-size: ${styleLengths(TYPE_FONT_SIZE_HEADING_6)};\\n  font-weight: 400;\\n  padding: 0.1875em;\\n  text-align: right;\\n`;\\n\\n/**\\n * Wraps a message text in a chat bubble with an indication as to which side it\\n * was sent\\n */\\nexport default function ChatBubble({ children, timestamp, ...wrapperProps }) {\\n  return (\\n    <Fragment>\\n      <Wrapper {...wrapperProps}>\\n        <Message>{children}</Message>\\n      </Wrapper>\\n\\n      {timestamp && (\\n        <MessageTimestamp title={timestamp.toString()}>\\n          <Timestamp value={timestamp} />\\n        </MessageTimestamp>\\n      )}\\n    </Fragment>\\n  );\\n}\\n\\nChatBubble.defaultProps = {\\n  arrowSide: 'right',\\n  variant: 'default',\\n};\\n\\nChatBubble.propTypes = {\\n  /** Message to display inside the chat bubble */\\n  children: PropTypes.string.isRequired,\\n\\n  /** Side to display the chat bubbble arrow */\\n  arrowSide: PropTypes.oneOf(['left', 'right']),\\n\\n  /** Main appearance of chat bubble */\\n  variant: PropTypes.oneOf(['default', 'secondary']),\\n\\n  /** Time information for a message */\\n  timestamp: PropTypes.instanceOf(Date),\\n};\\n\",\"examples\":[{\"name\":\"ExampleDefault\",\"description\":\"Default chat bubble\",\"code\":\"import React from 'react';\\nimport ChatBubble from 'alys/ChatBubble';\\n\\n/** Default chat bubble */\\nexport default function ExampleDefault() {\\n  return (\\n    <ChatBubble>\\n      Thanks will do! Photoshop looks awesome and can’t wait to give it a go.\\n    </ChatBubble>\\n  );\\n}\\n\"},{\"name\":\"ExampleSecondary\",\"description\":\"Secondary chat bubble\",\"code\":\"import React from 'react';\\nimport ChatBubble from 'alys/ChatBubble';\\n\\n/** Secondary chat bubble */\\nexport default function ExampleSecondary() {\\n  return (\\n    <ChatBubble arrowSide=\\\"left\\\" variant=\\\"secondary\\\">\\n      Hey Aaron, thanks for the call yesterday. So pleased that you found the\\n      topics we covered useful, and looking forward to seeing what you create.\\n      Definitely check out Photoshop too, some great tools for editing photos.\\n    </ChatBubble>\\n  );\\n}\\n\"},{\"name\":\"ExampleTimestamp\",\"description\":\"Default chat bubble with timestamp\",\"code\":\"import React from 'react';\\nimport ChatBubble from 'alys/ChatBubble';\\n\\n/** Default chat bubble with timestamp */\\nexport default function ExampleTimestamp() {\\n  return (\\n    <ChatBubble timestamp={new Date()}>\\n      Great catching up today Aaron. I’ve got our next mentoring session\\n      schedule for next Tuesday 6th November if this still works for you? How do\\n      you feel about tackling some more advanced photography techniques?\\n    </ChatBubble>\\n  );\\n}\\n\"}]},{\"name\":\"ChevronIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"direction\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'up'\",\"computed\":false},{\"value\":\"'down'\",\"computed\":false},{\"value\":\"'left'\",\"computed\":false},{\"value\":\"'right'\",\"computed\":false}]},\"required\":false,\"description\":\"Sets the direction\",\"defaultValue\":{\"value\":\"'up'\",\"computed\":false}},\"thick\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon thicker\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { chevronIconOptions } from './chevronIconOptions';\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ChevronIcon({\\n  dark,\\n  direction,\\n  thick,\\n  color,\\n  ...svgProps\\n}) {\\n  const { viewBox, transform, d } = chevronIconOptions[direction];\\n\\n  return (\\n    <SvgIcon viewBox={viewBox} {...svgProps}>\\n      <g id=\\\"chevron-icon\\\" transform={transform.group}>\\n        <path\\n          id=\\\"chevron-icon-2\\\"\\n          d={d}\\n          transform={transform.path}\\n          fill=\\\"none\\\"\\n          stroke={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeMiterlimit={10}\\n          strokeWidth={thick ? 2 : undefined}\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nChevronIcon.defaultProps = {\\n  dark: false,\\n  direction: 'up',\\n  thick: false,\\n};\\n\\nChevronIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Sets the direction */\\n  direction: PropTypes.oneOf(['up', 'down', 'left', 'right']),\\n\\n  /** Set to `true` to make icon thicker */\\n  thick: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleDefault\",\"description\":\"Default\",\"code\":\"import React from 'react';\\nimport ChevronIcon from 'alys/ChevronIcon';\\n\\n/** Default */\\nexport default function ExampleDefault() {\\n  return <ChevronIcon />;\\n}\\n\"},{\"name\":\"ExampleDown\",\"description\":\"Down\",\"code\":\"import React from 'react';\\nimport ChevronIcon from 'alys/ChevronIcon';\\n\\n/** Down */\\nexport default function ExampleDown() {\\n  return <ChevronIcon direction=\\\"down\\\" />;\\n}\\n\"},{\"name\":\"ExampleLeft\",\"description\":\"Left\",\"code\":\"import React from 'react';\\nimport ChevronIcon from 'alys/ChevronIcon';\\n\\n/** Left */\\nexport default function ExampleRight() {\\n  return <ChevronIcon direction=\\\"left\\\" />;\\n}\\n\"},{\"name\":\"ExampleRight\",\"description\":\"Right\",\"code\":\"import React from 'react';\\nimport ChevronIcon from 'alys/ChevronIcon';\\n\\n/** Right */\\nexport default function ExampleRight() {\\n  return <ChevronIcon direction=\\\"right\\\" />;\\n}\\n\"},{\"name\":\"ExampleThick\",\"description\":\"Thick\",\"code\":\"import React from 'react';\\nimport ChevronIcon from 'alys/ChevronIcon';\\n\\n/** Thick */\\nexport default function ExampleRightThick() {\\n  return <ChevronIcon thick />;\\n}\\n\"}]},{\"name\":\"ClockIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ClockIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20 20\\\" {...svgProps}>\\n      <g id=\\\"clock-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"9.5\\\"\\n          cy=\\\"9.5\\\"\\n          r=\\\"9.5\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          y2=\\\"8\\\"\\n          transform=\\\"translate(9.5 3.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          x1=\\\"5\\\"\\n          transform=\\\"translate(9.5 11.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nClockIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nClockIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic clock icon\",\"code\":\"import React from 'react';\\nimport ClockIcon from 'alys/ClockIcon';\\n\\n/** Basic clock icon */\\nexport default function ExampleBasic() {\\n  return <ClockIcon />;\\n}\\n\"}]},{\"name\":\"CloseIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CloseIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17.414 17.414\\\" {...svgProps}>\\n      <g id=\\\"close-icon\\\" transform=\\\"translate(0.207 0.207)\\\">\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x1=\\\"16\\\"\\n          y1=\\\"16\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          y1=\\\"16\\\"\\n          x2=\\\"16\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nCloseIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCloseIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic close icon\",\"code\":\"import React from 'react';\\nimport CloseIcon from 'alys/CloseIcon';\\n\\n/** Basic close icon */\\nexport default function ExampleBasic() {\\n  return <CloseIcon />;\\n}\\n\"}]},{\"name\":\"CommentIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CommentIcon({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21.4 18.3\\\" {...svgProps}>\\n      <g id=\\\"comment-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          id=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          stroke={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeMiterlimit={10}\\n          d=\\\"M10.7.5C5.1.5.5,4.3.5,9a7.82,7.82,0,0,0,2.6,5.7l-.8,3.1,4-1.1a12.307,12.307,0,0,0,4.4.8c5.6,0,10.2-3.8,10.2-8.5S16.4.5,10.7.5Z\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nCommentIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCommentIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic comment icon\",\"code\":\"import React from 'react';\\nimport CommentIcon from 'alys/CommentIcon';\\n\\n/** Basic comment icon */\\nexport default function ExampleBasic() {\\n  return <CommentIcon />;\\n}\\n\"}]},{\"name\":\"ComputerIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ComputerIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 22.917 19\\\" {...svgProps}>\\n      <g id=\\\"computer-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M21.6,14.5H1.4a.9.9,0,0,1-.9-.9V1.4A.9.9,0,0,1,1.4.5H21.5a.9.9,0,0,1,.9.9V13.5A.805.805,0,0,1,21.6,14.5Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x2=\\\"3\\\"\\n          strokeLinecap=\\\"round\\\"\\n          transform=\\\"translate(10 16.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"7\\\"\\n          transform=\\\"translate(8 18.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nComputerIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nComputerIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic computer icon\",\"code\":\"import React from 'react';\\nimport ComputerIcon from 'alys/ComputerIcon';\\n\\n/** Basic computer icon */\\nexport default function ExampleBasic() {\\n  return <ComputerIcon />;\\n}\\n\"}]},{\"name\":\"ConfirmIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ConfirmIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21 21\\\" {...svgProps}>\\n      <g id=\\\"confirm-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M5.6,10.9,8.7,14l7.2-7.1\\\" />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"10\\\"\\n          cy=\\\"10\\\"\\n          r=\\\"10\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nConfirmIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nConfirmIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic confirm icon\",\"code\":\"import React from 'react';\\nimport ConfirmIcon from 'alys/ConfirmIcon';\\n\\n/** Basic confirm icon */\\nexport default function ExampleBasic() {\\n  return <ConfirmIcon />;\\n}\\n\"}]},{\"name\":\"Currency\",\"description\":\"Produces the currency format of a value\",\"props\":{\"value\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"The amount to be formatted\"},\"code\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Currency code. List of valid currency codes:\\nhttps://www.currency-iso.org/en/home/tables/table-a1.html\",\"defaultValue\":{\"value\":\"'USD'\",\"computed\":false}},\"locale\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Language tag. More info: https://tools.ietf.org/html/rfc5646\",\"defaultValue\":{\"value\":\"'en-US'\",\"computed\":false}},\"whole\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, the value will only be rounded-off whole value\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React, { Fragment } from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Produces the currency format of a value */\\nexport default function Currency({ value, locale, code, whole }) {\\n  const fmt = new Intl.NumberFormat(locale, {\\n    style: 'currency',\\n    currency: code,\\n    currencyDisplay: 'symbol',\\n    minimumFractionDigits: whole ? 0 : undefined,\\n    maximumFractionDigits: whole ? 0 : undefined,\\n  });\\n\\n  return <Fragment>{fmt.format(value)}</Fragment>;\\n}\\n\\nCurrency.defaultProps = {\\n  code: 'USD',\\n  locale: 'en-US',\\n  whole: false,\\n};\\n\\nCurrency.propTypes = {\\n  /** The amount to be formatted */\\n  value: PropTypes.number.isRequired,\\n\\n  /**\\n   * Currency code. List of valid currency codes:\\n   * https://www.currency-iso.org/en/home/tables/table-a1.html\\n   */\\n  code: PropTypes.string,\\n\\n  /** Language tag. More info: https://tools.ietf.org/html/rfc5646 */\\n  locale: PropTypes.string,\\n\\n  /** If set to `true`, the value will only be rounded-off whole value */\\n  whole: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBhd\",\"description\":\"Bahraini Dinar\",\"code\":\"import React from 'react';\\nimport Currency from 'alys/Currency';\\n\\n/** Bahraini Dinar */\\nexport default function ExampleBhd() {\\n  return <Currency value={3.5} locale=\\\"ar-bh\\\" code=\\\"BHD\\\" />;\\n}\\n\"},{\"name\":\"ExampleRub\",\"description\":\"Russian ruble\",\"code\":\"import React from 'react';\\nimport Currency from 'alys/Currency';\\n\\n/** Russian ruble */\\nexport default function ExampleUsdRub() {\\n  return <Currency value={3.5} locale=\\\"ru\\\" code=\\\"RUB\\\" />;\\n}\\n\"},{\"name\":\"ExampleUsd\",\"description\":\"US Dollar\",\"code\":\"import React from 'react';\\nimport Currency from 'alys/Currency';\\n\\n/** US Dollar */\\nexport default function ExampleUsd() {\\n  return <Currency value={3.5} />;\\n}\\n\"},{\"name\":\"ExampleUsdWhole\",\"description\":\"US Dollar but whole value only\",\"code\":\"import React from 'react';\\nimport Currency from 'alys/Currency';\\n\\n/** US Dollar but whole value only */\\nexport default function ExampleUsdWhole() {\\n  return <Currency value={3.5} whole />;\\n}\\n\"}]},{\"name\":\"DesignIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_BLUE_GRAY,\\n  COLOR_WHITE,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function DesignIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: COLOR_PRIMARY,\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 54 41.5\\\" {...svgProps}>\\n      <g id=\\\"design-icon\\\">\\n        <rect\\n          id=\\\"rectangle\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          width=\\\"52\\\"\\n          height=\\\"17\\\"\\n          transform=\\\"translate(1 1)\\\"\\n        />\\n        <path\\n          id=\\\"path\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          d=\\\"M31,22H23a2.006,2.006,0,0,0-2,2v9H33V24A2.006,2.006,0,0,0,31,22Z\\\"\\n        />\\n        <path\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          d=\\\"M17,22H9a2.006,2.006,0,0,0-2,2v9H19V24A2.006,2.006,0,0,0,17,22Z\\\"\\n        />\\n        <path\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          d=\\\"M45,22H37a2.006,2.006,0,0,0-2,2v9H47V24A2.006,2.006,0,0,0,45,22Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M51,34H3a2.006,2.006,0,0,1-2-2V3A2.006,2.006,0,0,1,3,1H51a2.006,2.006,0,0,1,2,2V32A2.006,2.006,0,0,1,51,34Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeWidth=\\\"2px\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"21\\\"\\n          transform=\\\"translate(17 12)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"18\\\"\\n          transform=\\\"translate(18.5 14.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          cx=\\\"1.5\\\"\\n          cy=\\\"1.5\\\"\\n          r=\\\"1.5\\\"\\n          transform=\\\"translate(25.5 5.5)\\\"\\n        />\\n        <path\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          d=\\\"M31,41H23a2.006,2.006,0,0,1-2-2V22a2.006,2.006,0,0,1,2-2h8a2.006,2.006,0,0,1,2,2V39A2.006,2.006,0,0,1,31,41Z\\\"\\n        />\\n        <rect\\n          id=\\\"rectangle-2\\\"\\n          data-name=\\\"rectangle\\\"\\n          fill={COLOR_WHITE}\\n          width=\\\"12\\\"\\n          height=\\\"4.6\\\"\\n          transform=\\\"translate(21 36.4)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-6\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M31,41H23a2.006,2.006,0,0,1-2-2V22a2.006,2.006,0,0,1,2-2h8a2.006,2.006,0,0,1,2,2V39A2.006,2.006,0,0,1,31,41Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-7\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M26.6,21h2a.55.55,0,0,0,.5-.3l.5-.7H24.5l.5.7a.55.55,0,0,0,.5.3Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-3\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeWidth=\\\"2px\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"6\\\"\\n          transform=\\\"translate(24 31)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-4\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"3\\\"\\n          transform=\\\"translate(25.5 33.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          cx=\\\"1.5\\\"\\n          cy=\\\"1.5\\\"\\n          r=\\\"1.5\\\"\\n          transform=\\\"translate(25.5 24.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-5\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeWidth=\\\"2px\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x1=\\\"2.2\\\"\\n          y2=\\\"2.2\\\"\\n          transform=\\\"translate(6.9 34.4)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-6\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeWidth=\\\"2px\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"2.2\\\"\\n          y2=\\\"2.2\\\"\\n          transform=\\\"translate(44.9 34.4)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nDesignIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nDesignIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default design icon\",\"code\":\"import React from 'react';\\nimport DesignIcon from 'alys/DesignIcon';\\n\\n/** Default design icon */\\nexport default function ExampleBasic() {\\n  return <DesignIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"DevelopmentIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_BLUE_GRAY,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function DevelopmentIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 50.877 38\\\" {...svgProps}>\\n      <g id=\\\"development-icon\\\" transform=\\\"translate(0.018)\\\">\\n        <rect\\n          id=\\\"rectangle\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          width=\\\"21\\\"\\n          height=\\\"25\\\"\\n          transform=\\\"translate(25.1 1)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          stroke={COLOR_PRIMARY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M32.2,10.9l-2.8,2.8,2.8,2.9\\\"\\n        />\\n        <path\\n          id=\\\"path-2\\\"\\n          {...commonProps}\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          stroke={COLOR_PRIMARY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M38.1,16.6l2.8-2.9-2.8-2.8\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          stroke={COLOR_PRIMARY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          x1=\\\"1.9\\\"\\n          y2=\\\"7.2\\\"\\n          transform=\\\"translate(34.2 10.1)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          stroke={COLOR_PRIMARY}\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M46.2,26H4.2V2.9A1.967,1.967,0,0,1,6.1,1H44.3a1.9,1.9,0,0,1,1.9,1.9Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          stroke={COLOR_PRIMARY}\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M46.3,26H4.5L1.1,34.5A1.854,1.854,0,0,0,2.8,37H48a1.814,1.814,0,0,0,1.7-2.5Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          stroke={COLOR_PRIMARY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M30,33.5H20.9a.846.846,0,0,1-.8-1l.7-2.4a.871.871,0,0,1,.8-.6h7.6a.76.76,0,0,1,.8.6l.7,2.4A.739.739,0,0,1,30,33.5Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"15\\\"\\n          transform=\\\"translate(7.7 4.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-3\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"12\\\"\\n          transform=\\\"translate(7.7 6.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-4\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"9\\\"\\n          transform=\\\"translate(7.7 8.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-5\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"13\\\"\\n          transform=\\\"translate(7.7 10.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-6\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"12\\\"\\n          transform=\\\"translate(7.7 12.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-7\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"15\\\"\\n          transform=\\\"translate(7.7 14.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-8\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"9\\\"\\n          transform=\\\"translate(7.7 16.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-9\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"13\\\"\\n          transform=\\\"translate(7.7 18.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-10\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"12\\\"\\n          transform=\\\"translate(7.7 20.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-11\\\"\\n          data-name=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          stroke={COLOR_BLUE_GRAY}\\n          x2=\\\"15\\\"\\n          transform=\\\"translate(7.7 22.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nDevelopmentIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nDevelopmentIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default development icon\",\"code\":\"import React from 'react';\\nimport DevelopmentIcon from 'alys/DevelopmentIcon';\\n\\n/** Default development icon */\\nexport default function ExampleBasic() {\\n  return <DevelopmentIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"EmailIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function EmailIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20 15\\\" {...svgProps}>\\n      <g id=\\\"email-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M18.5,14.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h17a.945.945,0,0,1,1,1v12A.945.945,0,0,1,18.5,14.5Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M.7,1.8,9.4,7.9a1.36,1.36,0,0,0,1.5,0l8.3-6.1\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nEmailIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nEmailIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic email icon\",\"code\":\"import React from 'react';\\nimport EmailIcon from 'alys/EmailIcon';\\n\\n/** Basic email icon */\\nexport default function ExampleBasic() {\\n  return <EmailIcon />;\\n}\\n\"}]},{\"name\":\"EnlargeIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function MentorIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 18 18\\\" {...svgProps}>\\n      <path\\n        {...commonProps}\\n        id=\\\"path\\\"\\n        d=\\\"M16.5,17.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h15a.945.945,0,0,1,1,1v15A.945.945,0,0,1,16.5,17.5Z\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line\\\"\\n        y1=\\\"3.7\\\"\\n        x2=\\\"3.7\\\"\\n        transform=\\\"translate(10.5 3.9)\\\"\\n      />\\n      <path {...commonProps} id=\\\"path-2\\\" data-name=\\\"path\\\" d=\\\"M11.5,3.5h3v3\\\" />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-2\\\"\\n        data-name=\\\"line\\\"\\n        x1=\\\"3.7\\\"\\n        y2=\\\"3.8\\\"\\n        transform=\\\"translate(3.8 10.6)\\\"\\n      />\\n      <path {...commonProps} id=\\\"path-3\\\" data-name=\\\"path\\\" d=\\\"M6.5,14.5h-3v-3\\\" />\\n    </SvgIcon>\\n  );\\n}\\n\\nMentorIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nMentorIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic enlarge icon\",\"code\":\"import React from 'react';\\nimport EnlargeIcon from 'alys/EnlargeIcon';\\n\\n/** Basic enlarge icon */\\nexport default function ExampleBasic() {\\n  return <EnlargeIcon />;\\n}\\n\"}]},{\"name\":\"FiltersIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function FiltersIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17.175 18\\\" {...svgProps}>\\n      <g id=\\\"filters-icon\\\" transform=\\\"translate(-30 -58)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M-2,0H8.148\\\"\\n          transform=\\\"translate(32 60)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M0,0H4.026\\\"\\n          transform=\\\"translate(43.148 60)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M0,0H7.026\\\"\\n          transform=\\\"translate(40.148 67)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M-2,0H5.026\\\"\\n          transform=\\\"translate(32.148 67)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M-2,0H2\\\"\\n          transform=\\\"translate(32.148 74)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-6\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M0,0H10.026\\\"\\n          transform=\\\"translate(37.148 74)\\\"\\n        />\\n        <g {...commonProps} id=\\\"ellipse\\\" transform=\\\"translate(39.648 58)\\\">\\n          <circle stroke=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"1.5\\\" />\\n        </g>\\n        <g\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          transform=\\\"translate(36.648 65)\\\"\\n        >\\n          <circle stroke=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"1.5\\\" />\\n        </g>\\n        <g\\n          {...commonProps}\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          transform=\\\"translate(33.648 72)\\\"\\n        >\\n          <circle stroke=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"1.5\\\" />\\n        </g>\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nFiltersIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nFiltersIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic filters icon\",\"code\":\"import React from 'react';\\nimport FiltersIcon from 'alys/FiltersIcon';\\n\\n/** Basic filters icon */\\nexport default function ExampleBasic() {\\n  return <FiltersIcon />;\\n}\\n\"}]},{\"name\":\"HappyFaceIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_BLUE_GRAY,\\n  COLOR_WHITE,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function HappyFaceIcon({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 116.8 116.8\\\" {...svgProps}>\\n      <circle\\n        id=\\\"Ellipse_448\\\"\\n        data-name=\\\"Ellipse 448\\\"\\n        fill={COLOR_PRIMARY_FILL}\\n        cx=\\\"58.4\\\"\\n        cy=\\\"58.4\\\"\\n        r=\\\"58.4\\\"\\n        transform=\\\"translate(0 0)\\\"\\n      />\\n      <g id=\\\"Group_1501\\\" data-name=\\\"Group 1501\\\">\\n        <path\\n          id=\\\"Path_1229\\\"\\n          data-name=\\\"Path 1229\\\"\\n          fill={COLOR_PRIMARY}\\n          d=\\\"M45.5,85.7A30.91,30.91,0,0,0,52,88.2a23.774,23.774,0,0,0,12.6-.1A36.7,36.7,0,0,0,71,85.6h.1a1.528,1.528,0,0,1,2.1.7,1.7,1.7,0,0,1,0,1.4A15.337,15.337,0,0,1,67,93.6a18.66,18.66,0,0,1-17.2,0,15.337,15.337,0,0,1-6.2-5.9,1.489,1.489,0,0,1,.6-2,1.467,1.467,0,0,1,1.3,0Z\\\"\\n        />\\n      </g>\\n      <circle\\n        id=\\\"Ellipse_449\\\"\\n        data-name=\\\"Ellipse 449\\\"\\n        fill={COLOR_PRIMARY}\\n        cx=\\\"14\\\"\\n        cy=\\\"14\\\"\\n        r=\\\"14\\\"\\n        transform=\\\"translate(14.3 44.1)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_450\\\"\\n        data-name=\\\"Ellipse 450\\\"\\n        fill={COLOR_BLUE_GRAY}\\n        opacity={0.2}\\n        cx=\\\"9.7\\\"\\n        cy=\\\"9.7\\\"\\n        r=\\\"9.7\\\"\\n        transform=\\\"translate(20.3 46.4)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_451\\\"\\n        data-name=\\\"Ellipse 451\\\"\\n        fill={COLOR_WHITE}\\n        opacity={0.9}\\n        cx=\\\"3.4\\\"\\n        cy=\\\"3.4\\\"\\n        r=\\\"3.4\\\"\\n        transform=\\\"translate(29.9 49.7)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_452\\\"\\n        data-name=\\\"Ellipse 452\\\"\\n        fill={COLOR_PRIMARY}\\n        cx=\\\"14\\\"\\n        cy=\\\"14\\\"\\n        r=\\\"14\\\"\\n        transform=\\\"translate(74.6 44.1)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_453\\\"\\n        data-name=\\\"Ellipse 453\\\"\\n        fill={COLOR_BLUE_GRAY}\\n        opacity={0.2}\\n        cx=\\\"9.7\\\"\\n        cy=\\\"9.7\\\"\\n        r=\\\"9.7\\\"\\n        transform=\\\"translate(80.5 46.4)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_454\\\"\\n        data-name=\\\"Ellipse 454\\\"\\n        fill={COLOR_WHITE}\\n        opacity={0.9}\\n        cx=\\\"3.4\\\"\\n        cy=\\\"3.4\\\"\\n        r=\\\"3.4\\\"\\n        transform=\\\"translate(90.2 49.7)\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nHappyFaceIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nHappyFaceIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic happy face icon\",\"code\":\"import React from 'react';\\nimport HappyFaceIcon from 'alys/HappyFaceIcon';\\n\\n/** Basic happy face icon */\\nexport default function ExampleBasic() {\\n  return <HappyFaceIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"HappyIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function HappyIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20 20\\\" {...svgProps}>\\n      <g id=\\\"happy-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          fill=\\\"none\\\"\\n          cx=\\\"9.5\\\"\\n          cy=\\\"9.5\\\"\\n          r=\\\"9.5\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(6.5 6.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(12.5 6.5)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M6.3,13.5a4.507,4.507,0,0,0,3.7,2,4.373,4.373,0,0,0,3.7-2\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nHappyIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nHappyIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic happy icon\",\"code\":\"import React from 'react';\\nimport HappyIcon from 'alys/HappyIcon';\\n\\n/** Basic happy icon */\\nexport default function ExampleBasic() {\\n  return <HappyIcon />;\\n}\\n\"}]},{\"name\":\"HomeIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function HomeIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20.4 19.6\\\" {...svgProps}>\\n      <g id=\\\"home-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M17.5,8.1h2.4L10.2.5.5,8.1h2\\\" />\\n        <path {...commonProps} id=\\\"path-2\\\" data-name=\\\"path\\\" d=\\\"M17.5,7.1\\\" />\\n        <path {...commonProps} id=\\\"path-3\\\" data-name=\\\"path\\\" d=\\\"M2.5,8.1\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M2.5,8.1v11h6v-6h3v6h6V8.1\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nHomeIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nHomeIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic home icon\",\"code\":\"import React from 'react';\\nimport HomeIcon from 'alys/HomeIcon';\\n\\n/** Basic home icon */\\nexport default function ExampleBasic() {\\n  return <HomeIcon />;\\n}\\n\"}]},{\"name\":\"Label\",\"description\":\"Caption for an interface item.\",\"props\":{\"text\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Text to display\"},\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Element ID the label is associated with\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { TYPE_FONT_SIZE_HEADING_6 } from '@/constants';\\n\\nconst StyledLabel = styled.label`\\n  font-weight: 500;\\n  text-transform: uppercase;\\n  font-size: ${TYPE_FONT_SIZE_HEADING_6};\\n`;\\n\\n/** Caption for an interface item. */\\nexport default function Label({ text, ...props }) {\\n  return <StyledLabel {...props}>{text}</StyledLabel>;\\n}\\n\\nLabel.propTypes = {\\n  /** Text to display */\\n  text: PropTypes.string.isRequired,\\n\\n  /** Element ID the label is associated with */\\n  htmlFor: PropTypes.string.isRequired,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default label\",\"code\":\"import React from 'react';\\nimport Label from 'alys/Label';\\n\\n/** Default label */\\nexport default function ExampleBasic() {\\n  return <Label text=\\\"Example Basic\\\" htmlFor=\\\"\\\" />;\\n}\\n\"}]},{\"name\":\"LaptopIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function LaptopIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 23.217 18\\\" {...svgProps}>\\n      <g id=\\\"laptop-icon\\\" transform=\\\"translate(-0.041 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M21.1,12.5H2.1V1.4A.9.9,0,0,1,3,.5H20.2a.9.9,0,0,1,.9.9Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M21.1,12.5H2.1L.6,16.3a.881.881,0,0,0,.8,1.2H21.9a.881.881,0,0,0,.8-1.2Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"3\\\"\\n          transform=\\\"translate(10.1 15.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nLaptopIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nLaptopIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic laptop icon\",\"code\":\"import React from 'react';\\nimport LaptopIcon from 'alys/LaptopIcon';\\n\\n/** Basic laptop icon */\\nexport default function ExampleBasic() {\\n  return <LaptopIcon />;\\n}\\n\"}]},{\"name\":\"LikeIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function LikeIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21.552 18.875\\\" {...svgProps}>\\n      <g id=\\\"like-icon\\\" transform=\\\"translate(0.022 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M10.8,18.3h0C25.5,11.4,20,3.1,20,3.1A5.381,5.381,0,0,0,15.4.5a5.553,5.553,0,0,0-4.7,2.6A5.255,5.255,0,0,0,6.1.5,5.172,5.172,0,0,0,1.5,3.1S-4,11.4,10.8,18.3C10.7,18.4,10.8,18.4,10.8,18.3Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M15.4,2.6a3.159,3.159,0,0,1,3.2,3.2\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nLikeIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nLikeIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic like icon\",\"code\":\"import React from 'react';\\nimport LikeIcon from 'alys/LikeIcon';\\n\\n/** Basic like icon */\\nexport default function ExampleBasic() {\\n  return <LikeIcon />;\\n}\\n\"}]},{\"name\":\"List\",\"description\":\"Container for a set of list sub-items\",\"props\":{\"children\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"A set of List sub-item components\"},\"component\":{\"type\":{\"name\":\"union\",\"value\":[{\"name\":\"string\"},{\"name\":\"func\"},{\"name\":\"node\"}]},\"required\":false,\"description\":\"Component to use as a wrapper\",\"defaultValue\":{\"value\":\"'ul'\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nconst Ul = styled.ul`\\n  padding: 0;\\n  margin: 0;\\n`;\\n\\n/** Container for a set of list sub-items */\\nexport default function List({ component, children, ...props }) {\\n  let Component = component;\\n\\n  if (component === 'ul') {\\n    Component = Ul;\\n  }\\n\\n  return <Component {...props}>{children}</Component>;\\n}\\n\\nList.defaultProps = {\\n  component: 'ul',\\n};\\n\\nList.propTypes = {\\n  /** A set of List sub-item components */\\n  children: PropTypes.node.isRequired,\\n\\n  /** Component to use as a wrapper */\\n  component: PropTypes.oneOfType([\\n    PropTypes.string,\\n    PropTypes.func,\\n    PropTypes.node,\\n  ]),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"A list of basic <ListItem /> items\",\"code\":\"import React from 'react';\\nimport List from 'alys/List';\\nimport ListItem from 'alys/ListItem';\\n\\n/** A list of basic <ListItem /> items */\\nexport default function ExampleBasic() {\\n  return (\\n    <List>\\n      <ListItem>\\n        You will learn how to develop your career and make money as a\\n        professional photographer.\\n      </ListItem>\\n      <ListItem>\\n        You will learn how to take awesome photos that impress your family,\\n        friends and colleagues.\\n      </ListItem>\\n      <ListItem>\\n        You will learn how to compose images by following the essential rules of\\n        photography.\\n      </ListItem>\\n    </List>\\n  );\\n}\\n\"}]},{\"name\":\"ListItem\",\"description\":\"A sub-item of <List />\",\"props\":{\"children\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"Contents of the list item\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { COLOR_PRIMARY } from '@/constants';\\nimport Typography from '@/Typography';\\n\\nconst Disc = styled.div`\\n  min-width: 6px;\\n  max-width: 6px;\\n  height: 6px;\\n  background-color: ${COLOR_PRIMARY};\\n  border-radius: 50%;\\n  margin-right: 1.1875em;\\n`;\\n\\nconst Li = styled.li`\\n  display: flex;\\n  flex-direction: row;\\n  list-style: none;\\n  padding: 0 0 1.25em;\\n\\n  &:last-child {\\n    padding: 0;\\n  }\\n`;\\n\\n/** A sub-item of <List /> */\\nexport default function ListItem({ children, ...props }) {\\n  return (\\n    <Li {...props}>\\n      <Disc />\\n      <Typography variant=\\\"p\\\">{children}</Typography>\\n    </Li>\\n  );\\n}\\n\\nListItem.propTypes = {\\n  /** Contents of the list item */\\n  children: PropTypes.node.isRequired,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic list item\",\"code\":\"import React from 'react';\\nimport ListItem from 'alys/ListItem';\\n\\n/** Basic list item */\\nexport default function BasicExample() {\\n  return (\\n    <ListItem>\\n      You will learn how to develop your career and make money as a professional\\n      photographer.\\n    </ListItem>\\n  );\\n}\\n\"}]},{\"name\":\"ListItemPerson\",\"description\":\"Displays an overview for a person\",\"props\":{\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"The name to display\"},\"detail\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"A detail about this item\"},\"moreOptionsActions\":{\"type\":{\"name\":\"arrayOf\",\"value\":{\"name\":\"shape\",\"value\":{\"icon\":{\"name\":\"node\",\"required\":true},\"label\":{\"name\":\"string\",\"required\":true},\"onClick\":{\"name\":\"func\",\"required\":true},\"color\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'primary'\",\"computed\":false}],\"required\":false}}}},\"required\":true,\"description\":\"If empty, this will hide the more options button. Otherwise, it will\\nrender a button that when clicked will reveal a list of actions.\"},\"active\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Sets the status of the person item\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"avatar\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Image to display before the name and details\"},\"onClick\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Action to perform when item is clicked\"}},\"code\":\"import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { COLOR_WHITE, COLOR_DARK } from '@/constants';\\nimport ActiveIndicator from '@/ActiveIndicator';\\nimport Avatar from '@/Avatar';\\nimport Typepography from '@/Typography';\\nimport ListItemMoreOptions from '@common/ListItemMoreOptions';\\n\\nconst Wrapper = styled.div`\\n  background-color: ${COLOR_WHITE};\\n  color: ${COLOR_DARK};\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-around;\\n  align-items: center;\\n  min-height: 6.28125em;\\n  width: 100%;\\n  padding: 0.9375em;\\n\\n  @media (min-width: 34em) {\\n    padding: 0 1.875em;\\n  }\\n`;\\n\\n// @TODO+ListItemPerson: Fix items being pushed and responsiveness\\nconst Text = styled.div`\\n  display: flex;\\n  flex: 0.86;\\n  flex-shrink: 1;\\n  flex-direction: column;\\n`;\\n\\nconst PrimaryText = styled.p`\\n  font-weight: 500;\\n  margin: 0 0 0.5em 0;\\n`;\\n\\n/** Displays an overview for a person */\\nexport default function ListItemPerson({\\n  active,\\n  avatar,\\n  name,\\n  detail,\\n  onClick,\\n  moreOptionsActions,\\n}) {\\n  const [isMoreOptionsOpen, setIsMoreOptionsOpen] = useState(false);\\n\\n  const handleMoreOptionsOnClick = () =>\\n    setIsMoreOptionsOpen(!isMoreOptionsOpen);\\n\\n  return (\\n    <Wrapper onClick={onClick}>\\n      <ActiveIndicator active={active} style={{ flexShrink: 0 }} />\\n      <Avatar size=\\\"smaller\\\" src={avatar} style={{ flexShrink: 0 }} />\\n      <Text>\\n        <PrimaryText>{name}</PrimaryText>\\n        <Typepography>{detail}</Typepography>\\n      </Text>\\n      <ListItemMoreOptions\\n        actions={moreOptionsActions}\\n        isOpen={isMoreOptionsOpen}\\n        onClick={handleMoreOptionsOnClick}\\n      />\\n    </Wrapper>\\n  );\\n}\\n\\nListItemPerson.defaultProps = {\\n  active: false,\\n};\\n\\nListItemPerson.propTypes = {\\n  /** The name to display */\\n  name: PropTypes.string.isRequired,\\n\\n  /** A detail about this item */\\n  detail: PropTypes.string.isRequired,\\n\\n  /**\\n   * If empty, this will hide the more options button. Otherwise, it will\\n   * render a button that when clicked will reveal a list of actions.\\n   */\\n  moreOptionsActions: PropTypes.arrayOf(\\n    PropTypes.shape({\\n      icon: PropTypes.node.isRequired,\\n      label: PropTypes.string.isRequired,\\n      onClick: PropTypes.func.isRequired,\\n      color: PropTypes.oneOf(['default', 'primary']),\\n    }),\\n  ).isRequired,\\n\\n  /** Sets the status of the person item */\\n  active: PropTypes.bool,\\n\\n  /** Image to display before the name and details */\\n  avatar: PropTypes.string,\\n\\n  /** Action to perform when item is clicked */\\n  onClick: PropTypes.func,\\n};\\n\",\"examples\":[{\"name\":\"ExampleActions\",\"description\":\"Actions provided to person list item\",\"code\":\"import React from 'react';\\nimport ListItemPerson from 'alys/ListItemPerson';\\nimport CommentIcon from 'alys/CommentIcon';\\nimport CalendarIcon from 'alys/CalendarIcon';\\n\\nconst moreOptionsActions = [\\n  {\\n    icon: <CommentIcon />,\\n    label: 'Message',\\n    onClick() {\\n      console.log('Message action clicked');\\n    },\\n  },\\n  {\\n    icon: <CalendarIcon />,\\n    label: 'Schedule',\\n    onClick() {\\n      console.log('Schedule action clicked');\\n    },\\n    color: 'primary',\\n  },\\n];\\n\\n/** Actions provided to person list item */\\nexport default function ExampleActions() {\\n  return (\\n    <ListItemPerson\\n      name=\\\"Bryce Compton\\\"\\n      detail=\\\"Cowboy\\\"\\n      moreOptionsActions={moreOptionsActions}\\n    />\\n  );\\n}\\n\"},{\"name\":\"ExampleBasic\",\"description\":\"Basic person list item\",\"code\":\"import React from 'react';\\nimport ListItemPerson from 'alys/ListItemPerson';\\n\\nimport alys from '../../app/assets/alys.jpg';\\n\\n/** Basic person list item */\\nexport default function ExampleBasic() {\\n  return (\\n    <ListItemPerson\\n      active\\n      name=\\\"Alys Zhu\\\"\\n      detail=\\\"Astronomer\\\"\\n      avatar={alys}\\n      moreOptionsActions={[]}\\n    />\\n  );\\n}\\n\"}]},{\"name\":\"LiveIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function LiveIcon({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21 21\\\" {...svgProps}>\\n      <g id=\\\"live-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          id=\\\"ellipse\\\"\\n          fill=\\\"none\\\"\\n          stroke={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeMiterlimit={10}\\n          cx=\\\"10\\\"\\n          cy=\\\"10\\\"\\n          r=\\\"10\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <circle\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"4.5\\\"\\n          cy=\\\"4.5\\\"\\n          r=\\\"4.5\\\"\\n          transform=\\\"translate(6 6)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nLiveIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nLiveIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic live icon\",\"code\":\"import React from 'react';\\nimport LiveIcon from 'alys/LiveIcon';\\n\\n/** Basic live icon */\\nexport default function ExampleBasic() {\\n  return <LiveIcon />;\\n}\\n\"}]},{\"name\":\"LocationIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function LocationIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17.015 20.071\\\" {...svgProps}>\\n      <g id=\\\"location-icon\\\" transform=\\\"translate(0.015 -0.029)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M13.8,14.5,9.2,19.3a.965.965,0,0,1-1.4,0L3.1,14.4l-.8-.9A7.78,7.78,0,0,1,.6,7.3,8,8,0,0,1,16.5,8.5a7.907,7.907,0,0,1-2.1,5.4Z\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"3\\\"\\n          cy=\\\"3\\\"\\n          r=\\\"3\\\"\\n          transform=\\\"translate(5.5 5.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nLocationIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nLocationIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic location icon\",\"code\":\"import React from 'react';\\nimport LocationIcon from 'alys/LocationIcon';\\n\\n/** Basic location icon */\\nexport default function ExampleBasic() {\\n  return <LocationIcon />;\\n}\\n\"}]},{\"name\":\"MarketingIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_BLUE_GRAY,\\n  COLOR_WHITE,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function MarketingIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 51.2 51\\\" {...svgProps}>\\n      <g id=\\\"marketing-icon\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          stroke={COLOR_PRIMARY}\\n          strokeWidth=\\\"2px\\\"\\n          cx=\\\"22\\\"\\n          cy=\\\"22\\\"\\n          r=\\\"22\\\"\\n          transform=\\\"translate(1 6)\\\"\\n        />\\n        <circle\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={COLOR_WHITE}\\n          cx=\\\"14.5\\\"\\n          cy=\\\"14.5\\\"\\n          r=\\\"14.5\\\"\\n          transform=\\\"translate(8.5 13.5)\\\"\\n        />\\n        <circle\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          cx=\\\"14.5\\\"\\n          cy=\\\"14.5\\\"\\n          r=\\\"14.5\\\"\\n          transform=\\\"translate(8.5 13.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-4\\\"\\n          data-name=\\\"ellipse\\\"\\n          stroke={COLOR_PRIMARY}\\n          fill=\\\"none\\\"\\n          cx=\\\"14.5\\\"\\n          cy=\\\"14.5\\\"\\n          r=\\\"14.5\\\"\\n          transform=\\\"translate(8.5 13.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-5\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={COLOR_WHITE}\\n          stroke={COLOR_PRIMARY}\\n          strokeWidth=\\\"2px\\\"\\n          cx=\\\"7\\\"\\n          cy=\\\"7\\\"\\n          r=\\\"7\\\"\\n          transform=\\\"translate(16 21)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          fill=\\\"none\\\"\\n          stroke={COLOR_WHITE}\\n          strokeWidth=\\\"3px\\\"\\n          x1=\\\"19.8\\\"\\n          y2=\\\"19.8\\\"\\n          transform=\\\"translate(22.9 8.8)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          stroke={COLOR_PRIMARY}\\n          fill=\\\"none\\\"\\n          d=\\\"M46.7,8.8l-4.2.1V4.5\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          stroke={COLOR_PRIMARY}\\n          fill=\\\"none\\\"\\n          d=\\\"M48.7,6.6l-4.2.1V2.5\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          stroke={COLOR_PRIMARY}\\n          fill=\\\"none\\\"\\n          d=\\\"M50.7,4.5l-4.2.1V.5\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          stroke={COLOR_PRIMARY}\\n          fill=\\\"none\\\"\\n          d=\\\"M22.9,28.6\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          stroke={COLOR_PRIMARY}\\n          fill=\\\"none\\\"\\n          x1=\\\"19.8\\\"\\n          y2=\\\"19.8\\\"\\n          transform=\\\"translate(22.9 8.8)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nMarketingIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nMarketingIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default marketing icon\",\"code\":\"import React from 'react';\\nimport MarketingIcon from 'alys/MarketingIcon';\\n\\n/** Default marketing icon */\\nexport default function ExampleBasic() {\\n  return <MarketingIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"MentorIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function MentorIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21.7 19.4\\\" {...svgProps}>\\n      <g id=\\\"mentor-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M10.3,13.6v3l-5,2.3\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M16.1,13.6v3l5.1,2.3\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M15,14.1a5.2,5.2,0,0,0,3.5-4.9V4.6A4.055,4.055,0,0,0,14.4.5H12.2A4.14,4.14,0,0,0,8,4.6V9.2a5.2,5.2,0,0,0,3.5,4.9\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M4.6,11.3v2.4L.5,15.6\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M6.9.5H6.1A3.372,3.372,0,0,0,2.7,3.9V7.6a4.249,4.249,0,0,0,2.8,4\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nMentorIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nMentorIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic mentor icon\",\"code\":\"import React from 'react';\\nimport MentorIcon from 'alys/MentorIcon';\\n\\n/** Basic mentor icon */\\nexport default function ExampleBasic() {\\n  return <MentorIcon />;\\n}\\n\"}]},{\"name\":\"MicrophoneIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function MicrophoneIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 11.8 19.9\\\" {...svgProps}>\\n      <g id=\\\"microphone-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M5.9,13.3h0A3.543,3.543,0,0,1,2.4,9.8V4A3.543,3.543,0,0,1,5.9.5h0A3.543,3.543,0,0,1,9.4,4V9.8A3.418,3.418,0,0,1,5.9,13.3Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M.5,7.8v2a5.378,5.378,0,0,0,5.4,5.4h0a5.378,5.378,0,0,0,5.4-5.4v-2\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          y2=\\\"4\\\"\\n          transform=\\\"translate(5.9 15.4)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          x1=\\\"6\\\"\\n          transform=\\\"translate(2.9 19.4)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nMicrophoneIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nMicrophoneIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic microphone icon\",\"code\":\"import React from 'react';\\nimport MicrophoneIcon from 'alys/MicrophoneIcon';\\n\\n/** Basic microphone icon */\\nexport default function ExampleBasic() {\\n  return <MicrophoneIcon />;\\n}\\n\"}]},{\"name\":\"MusicIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_BLUE_GRAY,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function MusicIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: COLOR_PRIMARY,\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 43 47.8\\\" {...svgProps}>\\n      <path\\n        {...commonProps}\\n        id=\\\"path\\\"\\n        fill={COLOR_PRIMARY_FILL}\\n        strokeLinejoin=\\\"round\\\"\\n        d=\\\"M42.5,11.5l-29,6.6V13.5l29-6.6Z\\\"\\n      />\\n      <circle\\n        {...commonProps}\\n        id=\\\"ellipse\\\"\\n        fill={COLOR_BLUE_GRAY}\\n        strokeWidth=\\\"2px\\\"\\n        strokeLinejoin=\\\"round\\\"\\n        cx=\\\"6\\\"\\n        cy=\\\"6\\\"\\n        r=\\\"6\\\"\\n        transform=\\\"translate(1 34.8)\\\"\\n      />\\n      <path\\n        {...commonProps}\\n        id=\\\"path-2\\\"\\n        data-name=\\\"path\\\"\\n        fill=\\\"none\\\"\\n        strokeLinejoin=\\\"round\\\"\\n        strokeWidth=\\\"2px\\\"\\n        d=\\\"M13,40.8V7.6L42,1V34.8\\\"\\n      />\\n      <path\\n        {...commonProps}\\n        id=\\\"path-3\\\"\\n        data-name=\\\"path\\\"\\n        fill={COLOR_BLUE_GRAY}\\n        strokeWidth=\\\"2px\\\"\\n        strokeLinejoin=\\\"round\\\"\\n        d=\\\"M42,8.1,13,14.7V7.8L42,1.2Z\\\"\\n      />\\n      <path\\n        {...commonProps}\\n        id=\\\"path-4\\\"\\n        data-name=\\\"path\\\"\\n        fill=\\\"none\\\"\\n        d=\\\"M6.7,37.7a3.116,3.116,0,0,1,3.1,3.1\\\"\\n      />\\n      <circle\\n        {...commonProps}\\n        id=\\\"ellipse-2\\\"\\n        data-name=\\\"ellipse\\\"\\n        fill={COLOR_BLUE_GRAY}\\n        strokeWidth=\\\"2px\\\"\\n        strokeLinejoin=\\\"round\\\"\\n        cx=\\\"6\\\"\\n        cy=\\\"6\\\"\\n        r=\\\"6\\\"\\n        transform=\\\"translate(30 28.8)\\\"\\n      />\\n      <path\\n        {...commonProps}\\n        id=\\\"path-5\\\"\\n        data-name=\\\"path\\\"\\n        fill=\\\"none\\\"\\n        d=\\\"M35.7,31.7a3.116,3.116,0,0,1,3.1,3.1\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nMusicIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nMusicIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default music icon\",\"code\":\"import React from 'react';\\nimport MusicIcon from 'alys/MusicIcon';\\n\\n/** Default music icon */\\nexport default function ExampleBasic() {\\n  return <MusicIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"NewIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function NewIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 19\\\" {...svgProps}>\\n      <g id=\\\"new-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x1=\\\"18\\\"\\n          transform=\\\"translate(0.5 9.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          y1=\\\"18\\\"\\n          transform=\\\"translate(9.5 0.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nNewIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nNewIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic new icon\",\"code\":\"import React from 'react';\\nimport NewIcon from 'alys/NewIcon';\\n\\n/** Basic new icon */\\nexport default function ExampleBasic() {\\n  return <NewIcon />;\\n}\\n\"}]},{\"name\":\"OptionsIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function OptionsIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n  };\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 5\\\" {...svgProps}>\\n      <g id=\\\"options-icon\\\" transform=\\\"translate(-326 -201)\\\">\\n        <g {...commonProps} id=\\\"ellipse\\\" transform=\\\"translate(326 201)\\\">\\n          <circle stroke=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2.5\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2\\\" />\\n        </g>\\n        <g\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          transform=\\\"translate(333 201)\\\"\\n        >\\n          <circle stroke=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2.5\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2\\\" />\\n        </g>\\n        <g\\n          {...commonProps}\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          transform=\\\"translate(340 201)\\\"\\n        >\\n          <circle stroke=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2.5\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2\\\" />\\n        </g>\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nOptionsIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nOptionsIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic options icon\",\"code\":\"import React from 'react';\\nimport OptionsIcon from 'alys/OptionsIcon';\\n\\n/** Basic options icon */\\nexport default function ExampleBasic() {\\n  return <OptionsIcon />;\\n}\\n\"}]},{\"name\":\"PasswordIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PasswordIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17 19.988\\\" {...svgProps}>\\n      <g id=\\\"password-icon\\\" transform=\\\"translate(0 -0.011)\\\">\\n        <path\\n          {...commonProps}\\n          strokeLinecap=\\\"round\\\"\\n          id=\\\"path\\\"\\n          d=\\\"M15.5,19.5H1.5a.945.945,0,0,1-1-1V7.5a.945.945,0,0,1,1-1h14a.945.945,0,0,1,1,1v11A.945.945,0,0,1,15.5,19.5Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M4.5,7V4.7A4.179,4.179,0,0,1,7.7.6a3.957,3.957,0,0,1,4.8,3.9V7\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M10.2,11.9a1.685,1.685,0,0,0-1.7-1.7,1.628,1.628,0,0,0-1.7,1.7,1.709,1.709,0,0,0,.7,1.3v1.6a.945.945,0,0,0,1,1,.945.945,0,0,0,1-1V13.2A1.709,1.709,0,0,0,10.2,11.9Z\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPasswordIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPasswordIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic password icon\",\"code\":\"import React from 'react';\\nimport PasswordIcon from 'alys/PasswordIcon';\\n\\n/** Basic password icon */\\nexport default function ExampleBasic() {\\n  return <PasswordIcon />;\\n}\\n\"}]},{\"name\":\"PencilIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PencilIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19.25 19.306\\\" {...svgProps}>\\n      <g id=\\\"pencil-icon\\\" transform=\\\"translate(0 0.105)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M4.3,17.7l-3.8,1,1-3.9L15.8.6a.483.483,0,0,1,.7,0l2.1,2.1a.483.483,0,0,1,0,.7Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x2=\\\"2.8\\\"\\n          y2=\\\"2.8\\\"\\n          transform=\\\"translate(14.7 1.7)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPencilIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPencilIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic pencil icon\",\"code\":\"import React from 'react';\\nimport PencilIcon from 'alys/PencilIcon';\\n\\n/** Basic pencil icon */\\nexport default function ExampleBasic() {\\n  return <PencilIcon />;\\n}\\n\"}]},{\"name\":\"PhoneIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PhoneIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 13 22\\\" {...svgProps}>\\n      <g id=\\\"phone-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M11.5,21.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h10a.945.945,0,0,1,1,1v19A.945.945,0,0,1,11.5,21.5Z\\\"\\n        />\\n        <line {...commonProps} id=\\\"line\\\" x2=\\\"12\\\" transform=\\\"translate(1 4.5)\\\" />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"2\\\"\\n          transform=\\\"translate(5.5 2.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(6 18.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPhoneIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPhoneIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic phone icon\",\"code\":\"import React from 'react';\\nimport PhoneIcon from 'alys/PhoneIcon';\\n\\n/** Basic phone icon */\\nexport default function ExampleBasic() {\\n  return <PhoneIcon />;\\n}\\n\"}]},{\"name\":\"PhoneXIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PhoneXIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 13 22\\\" {...svgProps}>\\n      <g id=\\\"phone-x-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M6.5,1.5H8a.908.908,0,0,0,.7-.3L9.4.5H3.6l.7.7a.908.908,0,0,0,.7.3Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M11.5,21.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h10a.945.945,0,0,1,1,1v19A.945.945,0,0,1,11.5,21.5Z\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPhoneXIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPhoneXIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic phone X icon\",\"code\":\"import React from 'react';\\nimport PhoneXIcon from 'alys/PhoneXIcon';\\n\\n/** Basic phone X icon */\\nexport default function ExampleBasic() {\\n  return <PhoneXIcon />;\\n}\\n\"}]},{\"name\":\"PhotographyIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_BLUE_GRAY,\\n  COLOR_WHITE,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PhotographyIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: COLOR_PRIMARY,\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 47.347 35.839\\\" {...svgProps}>\\n      <path\\n        id=\\\"path\\\"\\n        fill={COLOR_BLUE_GRAY}\\n        d=\\\"M40.543,5.834H33.775l-.967-3A2.787,2.787,0,0,0,30.2,1H17.146a2.58,2.58,0,0,0-2.514,1.837l-1.064,3H3.8A2.806,2.806,0,0,0,1,8.638v23.3a2.828,2.828,0,0,0,2.8,2.9H43.54a2.806,2.806,0,0,0,2.8-2.8v-20.3A5.839,5.839,0,0,0,40.543,5.834Z\\\"\\n      />\\n      <circle\\n        {...commonProps}\\n        id=\\\"ellipse\\\"\\n        fill={COLOR_PRIMARY_FILL}\\n        strokeLinejoin=\\\"round\\\"\\n        cx=\\\"10.635\\\"\\n        cy=\\\"10.635\\\"\\n        r=\\\"10.635\\\"\\n        transform=\\\"translate(13.085 8.251)\\\"\\n      />\\n      <path\\n        id=\\\"path-2\\\"\\n        data-name=\\\"path\\\"\\n        fill={COLOR_PRIMARY_FILL}\\n        d=\\\"M13.085,6l-11.7.387L1,9.867l11.505-.58Z\\\"\\n        transform=\\\"translate(0 -0.166)\\\"\\n      />\\n      <circle\\n        {...commonProps}\\n        id=\\\"ellipse-2\\\"\\n        data-name=\\\"ellipse\\\"\\n        fill={COLOR_WHITE}\\n        strokeLinejoin=\\\"round\\\"\\n        strokeWidth=\\\"2px\\\"\\n        cx=\\\"8.218\\\"\\n        cy=\\\"8.218\\\"\\n        r=\\\"8.218\\\"\\n        transform=\\\"translate(15.502 10.668)\\\"\\n      />\\n      <circle\\n        {...commonProps}\\n        id=\\\"ellipse-3\\\"\\n        data-name=\\\"ellipse\\\"\\n        fill={COLOR_PRIMARY_FILL}\\n        strokeLinejoin=\\\"round\\\"\\n        cx=\\\"1.45\\\"\\n        cy=\\\"1.45\\\"\\n        r=\\\"1.45\\\"\\n        transform=\\\"translate(38.223 11.152)\\\"\\n      />\\n      <path\\n        {...commonProps}\\n        id=\\\"path-3\\\"\\n        data-name=\\\"path\\\"\\n        fill=\\\"none\\\"\\n        strokeLinejoin=\\\"round\\\"\\n        strokeWidth=\\\"2px\\\"\\n        d=\\\"M13.569,6l-.387,1.257A3.511,3.511,0,0,1,9.8,9.867H1\\\"\\n        transform=\\\"translate(0 -0.166)\\\"\\n      />\\n      <path\\n        {...commonProps}\\n        id=\\\"path-4\\\"\\n        data-name=\\\"path\\\"\\n        fill=\\\"none\\\"\\n        d=\\\"M24.9,13.9a5.405,5.405,0,0,1,5.414,5.414\\\"\\n        transform=\\\"translate(-0.793 -0.428)\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line\\\"\\n        fill=\\\"none\\\"\\n        strokeLinejoin=\\\"round\\\"\\n        x2=\\\"44.958\\\"\\n        transform=\\\"translate(1.483 32.422)\\\"\\n      />\\n      <rect\\n        id=\\\"rectangle\\\"\\n        fill={COLOR_PRIMARY_FILL}\\n        width=\\\"43.701\\\"\\n        height=\\\"2.417\\\"\\n        transform=\\\"translate(1.967 32.422)\\\"\\n      />\\n      <path\\n        {...commonProps}\\n        id=\\\"path-5\\\"\\n        data-name=\\\"path\\\"\\n        fill=\\\"none\\\"\\n        strokeLinejoin=\\\"round\\\"\\n        strokeWidth=\\\"2px\\\"\\n        d=\\\"M40.543,5.834H33.775l-.967-3A2.787,2.787,0,0,0,30.2,1H17.146a2.58,2.58,0,0,0-2.514,1.837l-1.064,3H3.8A2.806,2.806,0,0,0,1,8.638v23.3a2.828,2.828,0,0,0,2.8,2.9H43.54a2.806,2.806,0,0,0,2.8-2.8v-20.3A5.839,5.839,0,0,0,40.543,5.834Z\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nPhotographyIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPhotographyIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default photography icon\",\"code\":\"import React from 'react';\\nimport PhotographyIcon from 'alys/PhotographyIcon';\\n\\n/** Default photography icon */\\nexport default function ExampleBasic() {\\n  return <PhotographyIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"Pill\",\"description\":\"Text inside a small container\",\"props\":{\"text\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Text to display\"},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'secondary'\",\"computed\":false}]},\"required\":false,\"description\":\"Background color of text wrapper\",\"defaultValue\":{\"value\":\"'primary'\",\"computed\":false}},\"add\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, a `NewIcon` will be shown and `text` is ignored\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { TYPE_FONT_SIZE_HEADING_6, COLOR_WHITE, colors } from '@/constants';\\nimport NewIcon from '@/NewIcon';\\n\\nconst Wrapper = styled.div`\\n  display: inline-block;\\n  font-size: ${TYPE_FONT_SIZE_HEADING_6}px;\\n  font-weight: 500;\\n  padding: ${({ add }) => (add ? '0.5em' : '0.5em 0.75em')};\\n  border-radius: 0.375em;\\n  background-color: ${({ color }) => colors[color]};\\n  color: ${COLOR_WHITE};\\n  text-transform: uppercase;\\n`;\\n\\nconst AddIcon = styled(NewIcon).attrs(() => ({\\n  fontSize: `${TYPE_FONT_SIZE_HEADING_6}px`,\\n}))`\\n  display: block;\\n\\n  && line {\\n    stroke: ${COLOR_WHITE};\\n  }\\n`;\\n\\n/** Text inside a small container */\\nexport default function Pill({ text, color, add }) {\\n  return (\\n    <Wrapper color={color} add={add}>\\n      {add ? <AddIcon /> : text}\\n    </Wrapper>\\n  );\\n}\\n\\nPill.defaultProps = {\\n  color: 'primary',\\n  add: false,\\n};\\n\\nPill.propTypes = {\\n  /** Text to display */\\n  text: PropTypes.string,\\n\\n  /** Background color of text wrapper */\\n  color: PropTypes.oneOf(['primary', 'secondary']),\\n\\n  /** If set to `true`, a `NewIcon` will be shown and `text` is ignored */\\n  add: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleAdd\",\"description\":\"Add pill\",\"code\":\"import React from 'react';\\nimport Pill from 'alys/Pill';\\n\\n/** Add pill */\\nexport default function ExampleAdd() {\\n  return <Pill add />;\\n}\\n\"},{\"name\":\"ExampleAddSecondary\",\"description\":\"Secondary add pill\",\"code\":\"import React from 'react';\\nimport Pill from 'alys/Pill';\\n\\n/** Secondary add pill */\\nexport default function ExampleAdd() {\\n  return <Pill add color=\\\"secondary\\\" />;\\n}\\n\"},{\"name\":\"ExampleBasic\",\"description\":\"Basic pill\",\"code\":\"import React from 'react';\\nimport Pill from 'alys/Pill';\\n\\n/** Basic pill */\\nexport default function ExampleBasic() {\\n  return <Pill text=\\\"basic\\\" />;\\n}\\n\"},{\"name\":\"ExampleSecondary\",\"description\":\"Secondary pill\",\"code\":\"import React from 'react';\\nimport Pill from 'alys/Pill';\\n\\n/** Secondary pill */\\nexport default function ExampleSecondary() {\\n  return <Pill text=\\\"Secondary\\\" color=\\\"secondary\\\" />;\\n}\\n\"}]},{\"name\":\"PlayIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PreviewIcon({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20 22.498\\\" {...svgProps}>\\n      <path\\n        id=\\\"video-icon\\\"\\n        fill=\\\"none\\\"\\n        stroke={iconDark(\\n          dark,\\n          COLOR_WHITE,\\n          color ? colors[color] : 'currentColor',\\n        )}\\n        strokeLinecap=\\\"round\\\"\\n        strokeMiterlimit={10}\\n        d=\\\"M18.938,10.245,2.149.652a1.1,1.1,0,0,0-1.649.9V20.888a1.051,1.051,0,0,0,1.649.9l16.789-9.594A1.124,1.124,0,0,0,18.938,10.245Z\\\"\\n        transform=\\\"translate(0 0.02)\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nPreviewIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPreviewIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic play icon\",\"code\":\"import React from 'react';\\nimport PlayIcon from 'alys/PlayIcon';\\n\\n/** Basic play icon */\\nexport default function ExampleBasic() {\\n  return <PlayIcon />;\\n}\\n\"}]},{\"name\":\"PreviewIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PreviewIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 19\\\" {...svgProps}>\\n      <g id=\\\"preview-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M.5,4.5v-3a.945.945,0,0,1,1-1h3\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M14.5.5h3a.945.945,0,0,1,1,1v3\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M18.5,14.5v3a.945.945,0,0,1-1,1h-3\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M4.5,18.5h-3a.945.945,0,0,1-1-1v-3\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x2=\\\"6\\\"\\n          transform=\\\"translate(6.5 9.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          y2=\\\"6\\\"\\n          transform=\\\"translate(9.5 6.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPreviewIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPreviewIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic preview icon\",\"code\":\"import React from 'react';\\nimport PreviewIcon from 'alys/PreviewIcon';\\n\\n/** Basic preview icon */\\nexport default function ExampleBasic() {\\n  return <PreviewIcon />;\\n}\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"A custom progress bar.\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { getWidthAsPercentOfTotalWidth } from '@utils/percent-utils';\\nimport { styleLengths } from '@utils/string-utils';\\n\\nconst ProgressBarWrapper = styled.div`\\n  border: solid 1px lightgray;\\n  width: ${({ width }) => styleLengths(width)};\\n`;\\n\\nconst ProgressBarValue = styled.div`\\n  width: ${({ percent, width }) =>\\n    styleLengths(getWidthAsPercentOfTotalWidth(percent, width))};\\n  height: ${({ height }) => styleLengths(height)};\\n  background-color: ${({ percent }) => {\\n    if (percent === 100) return 'green';\\n\\n    return percent > 50 ? 'lightgreen' : 'red';\\n  }};\\n`;\\n\\n/** A custom progress bar. */\\nexport default function ProgressBar({ width, height, percent }) {\\n  return (\\n    <ProgressBarWrapper width={width}>\\n      <ProgressBarValue width={width} height={height} percent={percent} />\\n    </ProgressBarWrapper>\\n  );\\n}\\n\\nProgressBar.defaultProps = {\\n  height: 5,\\n};\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number,\\n};\\n\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'alys/ProgressBar';\\n\\n/** 100% progress */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} />;\\n}\\n\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'alys/ProgressBar';\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />;\\n}\\n\"},{\"name\":\"Example20pxHeight\",\"description\":\"20px height and 100% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'alys/ProgressBar';\\n\\n/** 20px height and 100% progress */\\nexport default function Example20pxHeight() {\\n  return <ProgressBar percent={100} width={150} height={20} />;\\n}\\n\"},{\"name\":\"Example70Percent\",\"description\":\"70% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'alys/ProgressBar';\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />;\\n}\\n\"}]},{\"name\":\"Rating\",\"description\":\"Show a rating from 0 to 5\",\"props\":{\"value\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"0\",\"computed\":false},{\"value\":\"1\",\"computed\":false},{\"value\":\"2\",\"computed\":false},{\"value\":\"3\",\"computed\":false},{\"value\":\"4\",\"computed\":false},{\"value\":\"5\",\"computed\":false}]},\"required\":true,\"description\":\"Amount of filled stars\"},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Callback when rating value changes. Must have two params for the `event`\\nobject and the `value`\"},\"static\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true` the <Rating /> component value cannot be changed\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'secondary'\",\"computed\":false}]},\"required\":false,\"description\":\"Fill color of <StarIcon /> items\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}}},\"code\":\"import React, { useState } from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport StarIcon from '@common/StarIcon';\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  max-width: 5em;\\n`;\\n\\nconst ClickBox = styled.div`\\n  width: 100%;\\n  cursor: ${(props) => (props.static ? 'default' : 'pointer')};\\n`;\\n\\n/** Show a rating from 0 to 5 */\\nexport default function Rating({\\n  value: initialValue,\\n  static: staticValue,\\n  color,\\n  onChange,\\n}) {\\n  const [value, setValue] = useState(initialValue);\\n  const [tempValue, setTempValue] = useState(NaN);\\n\\n  const maxValue = 5;\\n\\n  const onStarClick = (v) => (event) => {\\n    if (staticValue) {\\n      return;\\n    }\\n\\n    if (onChange) {\\n      onChange(event, v);\\n    }\\n\\n    setTempValue(v);\\n    setValue(v);\\n  };\\n\\n  const onStarMouseOver = (v) => () => {\\n    if (staticValue) {\\n      return;\\n    }\\n\\n    setTempValue(value);\\n    setValue(v);\\n  };\\n\\n  const onStarMouseOut = () => {\\n    if (staticValue) {\\n      return;\\n    }\\n\\n    setTempValue(NaN);\\n    setValue(tempValue);\\n  };\\n\\n  return (\\n    <Wrapper>\\n      {Array.from({ length: maxValue + 1 }).map((_, i) =>\\n        i !== 0 ? (\\n          <ClickBox\\n            key={`ratingstar${i}`}\\n            static={staticValue}\\n            onClick={onStarClick(i)}\\n            onMouseOver={onStarMouseOver(i)}\\n            onMouseOut={onStarMouseOut}\\n          >\\n            <StarIcon fontSize=\\\"0.77875em\\\" filled={i <= value} color={color} />\\n          </ClickBox>\\n        ) : null,\\n      )}\\n    </Wrapper>\\n  );\\n}\\n\\nRating.defaultProps = {\\n  static: false,\\n  color: 'default',\\n};\\n\\nRating.propTypes = {\\n  /** Amount of filled stars */\\n  value: PropTypes.oneOf([0, 1, 2, 3, 4, 5]).isRequired,\\n\\n  /**\\n   * Callback when rating value changes. Must have two params for the `event`\\n   * object and the `value`\\n   */\\n  onChange: PropTypes.func,\\n\\n  /** If set to `true` the <Rating /> component value cannot be changed */\\n  static: PropTypes.bool,\\n\\n  /** Fill color of <StarIcon /> items */\\n  color: PropTypes.oneOf(['default', 'secondary']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic rating with intial value of 3\",\"code\":\"import React, { Fragment, useState } from 'react';\\nimport Rating from 'alys/Rating';\\n\\n/** Basic rating with intial value of 3 */\\nexport default function ExampleBasic() {\\n  const [value, setValue] = useState(3);\\n\\n  const handleOnChange = (_event, v) => setValue(v);\\n\\n  return (\\n    <Fragment>\\n      <p>\\n        Rating value: <strong>{value}</strong>\\n      </p>\\n\\n      <Rating value={value} onChange={handleOnChange} />\\n    </Fragment>\\n  );\\n}\\n\"},{\"name\":\"ExampleSecondary\",\"description\":\"Rating with secondary color and intial value of 3\",\"code\":\"import React, { Fragment, useState } from 'react';\\nimport Rating from 'alys/Rating';\\n\\n/** Rating with secondary color and intial value of 3 */\\nexport default function ExampleSecondary() {\\n  const [value, setValue] = useState(3);\\n\\n  const handleOnChange = (_event, v) => setValue(v);\\n\\n  return (\\n    <Fragment>\\n      <p>\\n        Rating value: <strong>{value}</strong>\\n      </p>\\n\\n      <Rating value={value} onChange={handleOnChange} color=\\\"secondary\\\" />\\n    </Fragment>\\n  );\\n}\\n\"},{\"name\":\"ExampleStatic\",\"description\":\"Static rating with value of 3\",\"code\":\"import React from 'react';\\nimport Rating from 'alys/Rating';\\n\\n/** Static rating with value of 3 */\\nexport default function ExampleStatic() {\\n  return <Rating value={3} static />;\\n}\\n\"}]},{\"name\":\"RegisterIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function RegisterIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19.25 19.306\\\" {...svgProps}>\\n      <g id=\\\"register-icon\\\" transform=\\\"translate(0 0.105)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M4.3,17.7l-3.8,1,1-3.9L15.8.6a.483.483,0,0,1,.7,0l2.1,2.1a.483.483,0,0,1,0,.7Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x2=\\\"2.8\\\"\\n          y2=\\\"2.8\\\"\\n          transform=\\\"translate(14.7 1.7)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M1.8,9.4V1.9H9.3\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M16.8,10.4v7.5H9.3\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nRegisterIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nRegisterIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic register icon\",\"code\":\"import React from 'react';\\nimport RegisterIcon from 'alys/RegisterIcon';\\n\\n/** Basic register icon */\\nexport default function ExampleBasic() {\\n  return <RegisterIcon />;\\n}\\n\"}]},{\"name\":\"RemoveMentorIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function RemoveMentorIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 23.7 23.5\\\" {...svgProps}>\\n      <g id=\\\"remove-mentor-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path id=\\\"path\\\" {...commonProps} d=\\\"M5.5,13.6v3l-5,2.3\\\" />\\n        <path id=\\\"path-2\\\" data-name=\\\"path\\\" {...commonProps} d=\\\"M13.4,17.5\\\" />\\n        <path id=\\\"path-3\\\" data-name=\\\"path\\\" {...commonProps} d=\\\"M13.1,17.4\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M11.3,13.6v3l1.8.8\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M10.2,14.1a5.2,5.2,0,0,0,3.5-4.9V4.6A4.055,4.055,0,0,0,9.6.5H7.3A4.055,4.055,0,0,0,3.2,4.6V9.2a5.2,5.2,0,0,0,3.5,4.9\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"5\\\"\\n          cy=\\\"5\\\"\\n          r=\\\"5\\\"\\n          transform=\\\"translate(13.2 13)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x1=\\\"3.4\\\"\\n          y2=\\\"3.4\\\"\\n          transform=\\\"translate(16.5 16.3)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          x1=\\\"3.4\\\"\\n          y1=\\\"3.4\\\"\\n          transform=\\\"translate(16.5 16.3)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nRemoveMentorIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nRemoveMentorIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic remove mentor icon\",\"code\":\"import React from 'react';\\nimport RemoveMentorIcon from 'alys/RemoveMentorIcon';\\n\\n/** Basic remove mentor icon */\\nexport default function ExampleBasic() {\\n  return <RemoveMentorIcon />;\\n}\\n\"}]},{\"name\":\"SadFaceIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_BLUE_GRAY,\\n  COLOR_WHITE,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function SadFaceIcon({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 116.8 116.8\\\" {...svgProps}>\\n      <circle\\n        id=\\\"Ellipse_455\\\"\\n        data-name=\\\"Ellipse 455\\\"\\n        fill={COLOR_PRIMARY_FILL}\\n        cx=\\\"58.4\\\"\\n        cy=\\\"58.4\\\"\\n        r=\\\"58.4\\\"\\n        transform=\\\"translate(0 0)\\\"\\n      />\\n      <g id=\\\"Group_1503-2\\\" data-name=\\\"Group 1503\\\">\\n        <path\\n          id=\\\"Path_1230\\\"\\n          data-name=\\\"Path 1230\\\"\\n          fill={COLOR_PRIMARY}\\n          d=\\\"M71.2,91.4a30.911,30.911,0,0,0-6.5-2.5,23.774,23.774,0,0,0-12.6.1,36.7,36.7,0,0,0-6.4,2.5h-.1a1.528,1.528,0,0,1-2.1-.7,1.7,1.7,0,0,1,0-1.4,15.337,15.337,0,0,1,6.2-5.9,18.66,18.66,0,0,1,17.2,0,15.337,15.337,0,0,1,6.2,5.9,1.489,1.489,0,0,1-.6,2,1.051,1.051,0,0,1-1.3,0Z\\\"\\n        />\\n      </g>\\n      <circle\\n        id=\\\"Ellipse_456\\\"\\n        data-name=\\\"Ellipse 456\\\"\\n        fill={COLOR_PRIMARY}\\n        cx=\\\"14\\\"\\n        cy=\\\"14\\\"\\n        r=\\\"14\\\"\\n        transform=\\\"translate(14.4 47.1)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_457\\\"\\n        data-name=\\\"Ellipse 457\\\"\\n        fill={COLOR_BLUE_GRAY}\\n        opacity={0.2}\\n        cx=\\\"9.7\\\"\\n        cy=\\\"9.7\\\"\\n        r=\\\"9.7\\\"\\n        transform=\\\"translate(18.5 53.5)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_458\\\"\\n        data-name=\\\"Ellipse 458\\\"\\n        fill={COLOR_WHITE}\\n        opacity={0.9}\\n        cx=\\\"3.4\\\"\\n        cy=\\\"3.4\\\"\\n        r=\\\"3.4\\\"\\n        transform=\\\"translate(24.8 64.4)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_459\\\"\\n        data-name=\\\"Ellipse 459\\\"\\n        fill={COLOR_PRIMARY}\\n        cx=\\\"14\\\"\\n        cy=\\\"14\\\"\\n        r=\\\"14\\\"\\n        transform=\\\"translate(74.6 47.1)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_460\\\"\\n        data-name=\\\"Ellipse 460\\\"\\n        fill={COLOR_BLUE_GRAY}\\n        opacity={0.2}\\n        cx=\\\"9.7\\\"\\n        cy=\\\"9.7\\\"\\n        r=\\\"9.7\\\"\\n        transform=\\\"translate(78.8 53.5)\\\"\\n      />\\n      <circle\\n        id=\\\"Ellipse_461\\\"\\n        data-name=\\\"Ellipse 461\\\"\\n        fill={COLOR_WHITE}\\n        opacity={0.9}\\n        cx=\\\"3.4\\\"\\n        cy=\\\"3.4\\\"\\n        r=\\\"3.4\\\"\\n        transform=\\\"translate(85.1 64.4)\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nSadFaceIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nSadFaceIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic sad face icon\",\"code\":\"import React from 'react';\\nimport SadFaceIcon from 'alys/SadFaceIcon';\\n\\n/** Basic sad face icon */\\nexport default function ExampleBasic() {\\n  return <SadFaceIcon fontSize={52} />;\\n}\\n\"}]},{\"name\":\"SadIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function SadIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20 20\\\" {...svgProps}>\\n      <g id=\\\"sad-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          fill=\\\"none\\\"\\n          cx=\\\"9.5\\\"\\n          cy=\\\"9.5\\\"\\n          r=\\\"9.5\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(6.5 6.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(12.5 6.5)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M13.7,14.5a4.507,4.507,0,0,0-3.7-2,4.373,4.373,0,0,0-3.7,2\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nSadIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nSadIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic sad icon\",\"code\":\"import React from 'react';\\nimport SadIcon from 'alys/SadIcon';\\n\\n/** Basic sad icon */\\nexport default function ExampleBasic() {\\n  return <SadIcon />;\\n}\\n\"}]},{\"name\":\"SearchIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function SearchIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 18.907 18.507\\\" {...svgProps}>\\n      <g id=\\\"search-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          cx=\\\"8\\\"\\n          cy=\\\"8\\\"\\n          r=\\\"8\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          x2=\\\"3.5\\\"\\n          y2=\\\"3.5\\\"\\n          transform=\\\"translate(14.7 14.3)\\\"\\n        />\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M9,2.8a5.335,5.335,0,0,1,5.3,5.3\\\" />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nSearchIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nSearchIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic search icon\",\"code\":\"import React from 'react';\\nimport SearchIcon from 'alys/SearchIcon';\\n\\n/** Basic search icon */\\nexport default function ExampleBasic() {\\n  return <SearchIcon />;\\n}\\n\"}]},{\"name\":\"SettingsIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function Settings({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19.875 19.98\\\" {...svgProps}>\\n      <path\\n        id=\\\"path\\\"\\n        fill=\\\"none\\\"\\n        stroke={iconDark(\\n          dark,\\n          COLOR_WHITE,\\n          color ? colors[color] : 'currentColor',\\n        )}\\n        strokeLinecap=\\\"round\\\"\\n        strokeLinejoin=\\\"round\\\"\\n        strokeMiterlimit={10}\\n        d=\\\"M18.7,15.7,11.1,8.1A4.638,4.638,0,0,0,11.5,6,5.549,5.549,0,0,0,6,.5a4.618,4.618,0,0,0-2.6.7L7.3,5.1,5.1,7.3,1.2,3.4A4.618,4.618,0,0,0,.5,6,5.549,5.549,0,0,0,6,11.5a5.222,5.222,0,0,0,2.1-.4l7.6,7.6a2.175,2.175,0,0,0,3,0h0A2,2,0,0,0,18.7,15.7Z\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nSettings.defaultProps = {\\n  dark: false,\\n};\\n\\nSettings.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic settings icon\",\"code\":\"import React from 'react';\\nimport SettingsIcon from 'alys/SettingsIcon';\\n\\n/** Basic settings icon */\\nexport default function ExampleBasic() {\\n  return <SettingsIcon />;\\n}\\n\"}]},{\"name\":\"SignOutIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function SignOutIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21 20.9\\\" {...svgProps}>\\n      <g id=\\\"sign-out-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M15.5,5.3,10.7.5,5.8,5.3\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M2.8,4.1A9.4,9.4,0,0,0,.5,10.4a10,10,0,0,0,20,0,9.4,9.4,0,0,0-2.3-6.3\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          y2=\\\"11\\\"\\n          transform=\\\"translate(10.7 0.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nSignOutIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nSignOutIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic sign out icon\",\"code\":\"import React from 'react';\\nimport SignOutIcon from 'alys/SignOutIcon';\\n\\n/** Basic sign out icon */\\nexport default function ExampleBasic() {\\n  return <SignOutIcon />;\\n}\\n\"}]},{\"name\":\"Slider\",\"description\":\"Used for adjusting a value inside a range of numbers\",\"props\":{\"fullWidth\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true` the <Slider /> component's width will span it's container\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled, { css } from 'styled-components';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_WHITE_BLUE,\\n  COLOR_GRAY_BLUE,\\n  COLOR_WHITE,\\n  COLOR_SHADOW,\\n} from '@/constants';\\n\\nconst thumbStyle = css`\\n  appearance: none;\\n  background-color: ${COLOR_WHITE};\\n  border: 0.1em solid ${COLOR_GRAY_BLUE};\\n  box-shadow: 0px 0px 10px ${COLOR_SHADOW};\\n  border-radius: 50%;\\n  cursor: pointer;\\n  height: 1.3125em;\\n  margin-top: -0.45em;\\n  width: 1.3125em;\\n`;\\n\\nconst trackStyle = css`\\n  appearance: none;\\n  border: none;\\n  border-radius: 0.1em;\\n  cursor: default;\\n  height: 0.325em;\\n  width: 100%;\\n`;\\n\\nconst disabledStyle = css`\\n  background-color: ${COLOR_WHITE_BLUE};\\n  cursor: not-allowed;\\n`;\\n\\nconst Range = styled.input.attrs({\\n  type: 'range',\\n})`\\n  appearance: none;\\n  border: none;\\n  outline: none;\\n  vertical-align: middle;\\n\\n  // Chrome, Safari, Opera\\n  &::-webkit-slider-runnable-track {\\n    ${trackStyle}\\n    background-color: ${COLOR_WHITE_BLUE};\\n    color: ${COLOR_PRIMARY};\\n  }\\n\\n  &::-webkit-slider-thumb {\\n    ${thumbStyle};\\n  }\\n\\n  // Firefox\\n  &::-moz-range-thumb {\\n    ${thumbStyle}\\n  }\\n\\n  &::-moz-range-track {\\n    ${trackStyle}\\n    background-color: ${COLOR_WHITE_BLUE};\\n  }\\n\\n  &::-moz-range-progress {\\n    background-color: ${COLOR_PRIMARY};\\n  }\\n\\n  // Edge\\n  &::-ms-fill-lower {\\n    background-color: ${COLOR_PRIMARY};\\n  }\\n\\n  &::-ms-fill-upper {\\n    background-color: ${COLOR_WHITE_BLUE};\\n    border: none;\\n  }\\n\\n  &::-ms-thumb {\\n    ${thumbStyle}\\n  }\\n\\n  &::-ms-track {\\n    ${trackStyle}\\n    background-color: ${COLOR_WHITE_BLUE};\\n  }\\n\\n  &[disabled] {\\n    ${disabledStyle}\\n\\n    &::-webkit-slider-runnable-track,\\n    &::-webkit-slider-thumb,\\n    &::-moz-range-thumb,\\n    &::-moz-range-track,\\n    &::-ms-thumb,\\n    &::-ms-track, {\\n      ${disabledStyle}\\n    }\\n\\n    &::-ms-fill-lower {\\n      background-color: ${COLOR_WHITE_BLUE};\\n    }\\n  }\\n`;\\n\\n/** Used for adjusting a value inside a range of numbers */\\nexport default function Slider({ fullWidth, ...inputRangeProps }) {\\n  return <Range {...inputRangeProps} />;\\n}\\n\\nSlider.defaultProps = {\\n  fullWidth: false,\\n};\\n\\nSlider.propTypes = {\\n  /** If set to `true` the <Slider /> component's width will span it's container */\\n  fullWidth: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleDefault\",\"description\":\"Default\",\"code\":\"import React from 'react';\\nimport Slider from 'alys/Slider';\\n\\n/** Default */\\nexport default function ExampleDefault() {\\n  return <Slider />;\\n}\\n\"},{\"name\":\"ExampleDisabled\",\"description\":\"Disabled\",\"code\":\"import React from 'react';\\nimport Slider from 'alys/Slider';\\n\\n/** Disabled */\\nexport default function ExampleDefault() {\\n  return <Slider min={0} max={100} value={50} disabled />;\\n}\\n\"}]},{\"name\":\"SpeakerIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function SpeakerIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 18.5 16.179\\\" {...svgProps}>\\n      <g id=\\\"speaker-icon\\\" transform=\\\"translate(0 0.016)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M4.8,11.3H3.7A3.159,3.159,0,0,1,.5,8.1h0A3.159,3.159,0,0,1,3.7,4.9H4.8Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M10.6,15.4,4.8,11.2V4.9L10.6.7a1.081,1.081,0,0,1,1.7.9v13A1.045,1.045,0,0,1,10.6,15.4Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M14.4,11a4.373,4.373,0,0,0,0-5.8\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M16.2,12.9A7.492,7.492,0,0,0,18,8.1a7.492,7.492,0,0,0-1.8-4.8\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nSpeakerIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nSpeakerIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic speaker icon\",\"code\":\"import React from 'react';\\nimport SpeakerIcon from 'alys/SpeakerIcon';\\n\\n/** Basic speaker icon */\\nexport default function ExampleBasic() {\\n  return <SpeakerIcon />;\\n}\\n\"}]},{\"name\":\"StreamIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function StreamIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 23 16.575\\\" {...svgProps}>\\n      <g id=\\\"stream-icon\\\" transform=\\\"translate(0 -0.025)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(11 15.1)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M6.9,12.4a6.58,6.58,0,0,1,9.2,0\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M4.2,8.6a10.322,10.322,0,0,1,14.7,0\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M.5,5.1a15.512,15.512,0,0,1,22,0\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nStreamIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nStreamIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic stream icon\",\"code\":\"import React from 'react';\\nimport StreamIcon from 'alys/StreamIcon';\\n\\n/** Basic stream icon */\\nexport default function ExampleBasic() {\\n  return <StreamIcon />;\\n}\\n\"}]},{\"name\":\"SvgIcon\",\"description\":\"Renders SVG paths.\",\"props\":{\"children\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"SVG paths to render\"},\"fontSize\":{\"type\":{\"name\":\"union\",\"value\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"required\":false,\"description\":\"Size of the icon\",\"defaultValue\":{\"value\":\"24\",\"computed\":false}},\"viewBox\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Defines the position and dimension for the content of the <svg> element\",\"defaultValue\":{\"value\":\"'0 0 24 24'\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { styleLengths } from '@utils/string-utils';\\n\\n/** Renders SVG paths. */\\nexport default function SvgIcon({ fontSize, viewBox, children, ...svgProps }) {\\n  return (\\n    <svg\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      color=\\\"inherit\\\"\\n      viewBox={viewBox}\\n      focusable={false}\\n      width={styleLengths(fontSize)}\\n      height={styleLengths(fontSize)}\\n      {...svgProps}\\n    >\\n      {children}\\n    </svg>\\n  );\\n}\\n\\nSvgIcon.defaultProps = {\\n  fontSize: 24,\\n  viewBox: '0 0 24 24',\\n};\\n\\nSvgIcon.propTypes = {\\n  /** SVG paths to render */\\n  children: PropTypes.node.isRequired,\\n\\n  /** Size of the icon */\\n  fontSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\\n\\n  /** Defines the position and dimension for the content of the <svg> element */\\n  viewBox: PropTypes.string,\\n};\\n\",\"examples\":[{\"name\":\"ExampleEyeIcon\",\"description\":\"Basic EyeIcon component\",\"code\":\"import React from 'react';\\nimport SvgIcon from 'alys/SvgIcon';\\n\\n/** Basic EyeIcon component */\\nexport default function ExampleEyeIcon({ dark, ...svgProps }) {\\n  return (\\n    <SvgIcon {...svgProps}>\\n      <g\\n        transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\"\\n        fill={dark ? '#fff' : 'currentColor'}\\n      >\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\"},{\"name\":\"ExampleEyeIcon4em\",\"description\":\"EyeIcon component with font size of 4em\",\"code\":\"import React from 'react';\\nimport ExampleEyeIcon from './ExampleEyeIcon';\\n\\n/** EyeIcon component with font size of 4em */\\nexport default function ExampleEyeIcon4em() {\\n  return <ExampleEyeIcon fontSize=\\\"4em\\\" />;\\n}\\n\"},{\"name\":\"ExampleEyeIcon64px\",\"description\":\"EyeIcon component with font size of 64px\",\"code\":\"import React from 'react';\\nimport ExampleEyeIcon from './ExampleEyeIcon';\\n\\n/** EyeIcon component with font size of 64px */\\nexport default function ExampleEyeIcon64px() {\\n  return <ExampleEyeIcon fontSize={64} />;\\n}\\n\"}]},{\"name\":\"TabletIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function TabletIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17 22\\\" {...svgProps}>\\n      <g id=\\\"tablet-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M15.5,21.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h14a.945.945,0,0,1,1,1v19A.945.945,0,0,1,15.5,21.5Z\\\"\\n        />\\n        <line {...commonProps} id=\\\"line\\\" x2=\\\"16\\\" transform=\\\"translate(1 4.5)\\\" />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"2\\\"\\n          transform=\\\"translate(7.5 2.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(8 18.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nTabletIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nTabletIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic tablet icon\",\"code\":\"import React from 'react';\\nimport TabletIcon from 'alys/TabletIcon';\\n\\n/** Basic tablet icon */\\nexport default function ExampleBasic() {\\n  return <TabletIcon />;\\n}\\n\"}]},{\"name\":\"Timestamp\",\"description\":\"Formats a JavaScript object to a human-readable format\",\"props\":{\"value\":{\"type\":{\"name\":\"instanceOf\",\"value\":\"Date\"},\"required\":true,\"description\":\"A JavaScript Date object to be used to calculate timestamp\"}},\"code\":\"import React, { Fragment } from 'react';\\nimport PropTypes from 'prop-types';\\nimport dayjs from 'dayjs';\\n\\n/** Formats a JavaScript object to a human-readable format */\\nexport default function Timestamp({ value }) {\\n  const result = dayjs(value).format('MMM D, HH:mm');\\n\\n  return <Fragment>{result}</Fragment>;\\n}\\n\\nTimestamp.propTypes = {\\n  /** A JavaScript Date object to be used to calculate timestamp */\\n  value: PropTypes.instanceOf(Date).isRequired,\\n};\\n\",\"examples\":[{\"name\":\"ExampleDefault\",\"description\":\"Default\",\"code\":\"import React from 'react';\\nimport Timestamp from 'alys/Timestamp';\\n\\n/** Default */\\nexport default function ExampleDefault() {\\n  return <Timestamp value={new Date()} />;\\n}\\n\"}]},{\"name\":\"TrashIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function TrashIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 19\\\" {...svgProps}>\\n      <path\\n        {...commonProps}\\n        id=\\\"path\\\"\\n        d=\\\"M16.5,2.5l-1,15a.945.945,0,0,1-1,1H4.5a.945.945,0,0,1-1-1l-1-15\\\"\\n      />\\n      <line id=\\\"line\\\" {...commonProps} x2=\\\"18\\\" transform=\\\"translate(0.5 2.5)\\\" />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-2\\\"\\n        data-name=\\\"line\\\"\\n        x2=\\\"10\\\"\\n        transform=\\\"translate(4.5 0.5)\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-3\\\"\\n        data-name=\\\"line\\\"\\n        y2=\\\"10\\\"\\n        transform=\\\"translate(9.5 5.5)\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-4\\\"\\n        data-name=\\\"line\\\"\\n        y2=\\\"10\\\"\\n        transform=\\\"translate(6.5 5.5)\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-5\\\"\\n        data-name=\\\"line\\\"\\n        y2=\\\"10\\\"\\n        transform=\\\"translate(12.5 5.5)\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nTrashIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nTrashIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic trash icon\",\"code\":\"import React from 'react';\\nimport TrashIcon from 'alys/TrashIcon';\\n\\n/** Basic trash icon */\\nexport default function ExampleBasic() {\\n  return <TrashIcon />;\\n}\\n\"}]},{\"name\":\"Truncate\",\"description\":\"Utility component to limit long text to one-line\",\"props\":{\"children\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"The text to truncate\"},\"ellipsis\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"The text to append to the truncated text\",\"defaultValue\":{\"value\":\"'...'\",\"computed\":false}}},\"code\":\"import React, { Component, createRef } from 'react';\\nimport PropTypes from 'prop-types';\\nimport { debounce } from 'throttle-debounce';\\n\\n/** Utility component to limit long text to one-line */\\nexport default class Truncate extends Component {\\n  static defaultProps = {\\n    ellipsis: '...',\\n  };\\n\\n  static propTypes = {\\n    /** The text to truncate */\\n    children: PropTypes.string.isRequired,\\n\\n    /** The text to append to the truncated text */\\n    ellipsis: PropTypes.string,\\n  };\\n\\n  _componentRef = createRef();\\n  _textRef = createRef();\\n  _ellipsisRef = createRef();\\n\\n  state = {\\n    truncating: true,\\n    truncatedString: null,\\n  };\\n\\n  componentDidMount() {\\n    const truncatedString = this._getTruncatedString(this.props.children);\\n\\n    this.setState({ truncatedString, truncating: false });\\n    window.addEventListener('resize', this._resetTruncate);\\n  }\\n\\n  componentDidUpdate = (_, prevState) =>\\n    this.state.truncating === prevState.truncating && this._resetTruncate();\\n\\n  componentWillMount() {\\n    window.removeEventListener('resize', this._resetTruncate);\\n  }\\n\\n  render() {\\n    const { children } = this.props;\\n    const { truncating, truncatedString } = this.state;\\n    const componentStyles = {\\n      display: 'block',\\n      overflow: 'hidden',\\n      whiteSpace: 'nowrap',\\n    };\\n\\n    return (\\n      <div ref={this._setComponentRef} style={componentStyles}>\\n        {truncating && <span ref={this._setTextRef}>{children}</span>}\\n        {truncating && <span ref={this._setEllipsisRef}>...</span>}\\n        {!truncating && truncatedString}\\n      </div>\\n    );\\n  }\\n\\n  _setComponentRef = (element) => (this._componentRef = element);\\n  _setEllipsisRef = (element) => (this._ellipsisRef = element);\\n  _setTextRef = (element) => (this._textRef = element);\\n\\n  _getTruncatedString = () => {\\n    const { children: text, ellipsis } = this.props;\\n    const componentWidth = this._componentRef.offsetWidth;\\n    const textWidth = this._textRef.offsetWidth;\\n\\n    if (textWidth > componentWidth) {\\n      const position =\\n        Math.floor((text.length * componentWidth) / textWidth) -\\n        ellipsis.length;\\n      const truncatedString = text.slice(0, position);\\n\\n      return `${truncatedString.trimRight()}${ellipsis}`;\\n    }\\n\\n    return text;\\n  };\\n\\n  _resetTruncate = debounce(50, () => {\\n    this.setState({ truncating: true }, () => {\\n      const truncatedString = this._getTruncatedString(this.props.text);\\n\\n      this.setState({ truncatedString, truncating: false });\\n    });\\n  });\\n}\\n\",\"examples\":[{\"name\":\"ExampleDefault\",\"description\":\"Default\",\"code\":\"import React from 'react';\\nimport Truncate from 'alys/Truncate';\\n\\n/** Default */\\nexport default function ExampleDefault() {\\n  return (\\n    <Truncate>\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac\\n      pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\\n      pellentesque.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed\\n      ac pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\\n      pellentesque.\\n    </Truncate>\\n  );\\n}\\n\"}]},{\"name\":\"Typography\",\"description\":\"Styled text using pre-set type scales and sizes\",\"props\":{\"children\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Text to display\"},\"variant\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'h1'\",\"computed\":false},{\"value\":\"'h2'\",\"computed\":false},{\"value\":\"'h3'\",\"computed\":false},{\"value\":\"'h4'\",\"computed\":false},{\"value\":\"'h5'\",\"computed\":false},{\"value\":\"'h6'\",\"computed\":false},{\"value\":\"'p'\",\"computed\":false}]},\"required\":false,\"description\":\"Determines the styles of the text\",\"defaultValue\":{\"value\":\"'p'\",\"computed\":false}},\"gutterBottom\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Add a margin at the bottom\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled, { css } from 'styled-components';\\n\\nimport { fontSizes, lineHeights } from '@/constants';\\nimport { styleLengths } from '@utils/string-utils';\\n\\nconst pStyles = css`\\n  font-weight: 400;\\n`;\\nconst builder = (variant) => styled(variant)`\\n  color: inherit;\\n  margin: 0 0\\n    ${({ gutterBottom }) =>\\n      gutterBottom ? styleLengths(lineHeights[variant] * 12) : 0};\\n  font-weight: 500;\\n  font-size: ${styleLengths(fontSizes[variant])};\\n  line-height: ${lineHeights[variant]};\\n  ${variant === 'p' && pStyles}\\n`;\\n\\n/** Styled text using pre-set type scales and sizes */\\nexport default function Typography({ variant, children, ...props }) {\\n  const Component = builder(variant);\\n\\n  return <Component {...props}>{children}</Component>;\\n}\\n\\nTypography.defaultProps = {\\n  variant: 'p',\\n  gutterBottom: false,\\n};\\n\\nTypography.propTypes = {\\n  /** Text to display */\\n  children: PropTypes.string.isRequired,\\n\\n  /** Determines the styles of the text */\\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p']),\\n\\n  /** Add a margin at the bottom */\\n  gutterBottom: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleHeading1\",\"description\":\"Heading 1\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 1 */\\nexport default function ExampleHeading1() {\\n  return <Typography variant=\\\"h1\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading2\",\"description\":\"Heading 2\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 2 */\\nexport default function ExampleHeading2() {\\n  return <Typography variant=\\\"h2\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading3\",\"description\":\"Heading 3\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 3 */\\nexport default function ExampleHeading3() {\\n  return <Typography variant=\\\"h3\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading4\",\"description\":\"Heading 4\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 4 */\\nexport default function ExampleHeading4() {\\n  return <Typography variant=\\\"h4\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading5\",\"description\":\"Heading 5\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 5 */\\nexport default function ExampleHeading5() {\\n  return <Typography variant=\\\"h5\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading6\",\"description\":\"Heading 6\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 6 */\\nexport default function ExampleHeading6() {\\n  return <Typography variant=\\\"h6\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleParagraph\",\"description\":\"Paragraph\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Paragraph */\\nexport default function ExampleParagraph() {\\n  return (\\n    <Typography variant=\\\"p\\\">\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac\\n      pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\\n      pellentesque.\\n    </Typography>\\n  );\\n}\\n\"},{\"name\":\"ExampleParagraphs\",\"description\":\"Paragraphs\",\"code\":\"import React, { Fragment } from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Paragraphs */\\nexport default function ExampleParagraphs() {\\n  return (\\n    <Fragment>\\n      <Typography variant=\\\"h1\\\" gutterBottom>\\n        Wintermute\\n      </Typography>\\n\\n      <Typography gutterBottom>\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac\\n        pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\\n        pellentesque.Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n        Sed ac pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed\\n        ac pellentesque.\\n      </Typography>\\n\\n      <Typography>\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac\\n        pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\\n        pellentesque.Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n        Sed ac pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed\\n        ac pellentesque.\\n      </Typography>\\n    </Fragment>\\n  );\\n}\\n\"}]},{\"name\":\"VideographyIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_FILL,\\n  COLOR_BLUE_GRAY,\\n  COLOR_WHITE,\\n} from '@/constants';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function VideographyIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: COLOR_PRIMARY,\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 58 45\\\" {...svgProps}>\\n      <g id=\\\"videography-icon\\\">\\n        <path\\n          id=\\\"path\\\"\\n          {...commonProps}\\n          fill={COLOR_PRIMARY_FILL}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M47.2,40.5H45.5v-20h1.7a2.263,2.263,0,0,1,2.3,2.3V38.2A2.263,2.263,0,0,1,47.2,40.5Z\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          cx=\\\"1.5\\\"\\n          cy=\\\"1.5\\\"\\n          r=\\\"1.5\\\"\\n          transform=\\\"translate(36.5 22.5)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M41.8,44H8.2A4.225,4.225,0,0,1,4,39.8V20.2A4.225,4.225,0,0,1,8.2,16H41.9a4.225,4.225,0,0,1,4.2,4.2V39.9A4.366,4.366,0,0,1,41.8,44Z\\\"\\n        />\\n        <rect\\n          {...commonProps}\\n          id=\\\"rectangle\\\"\\n          fill={COLOR_PRIMARY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          width=\\\"2\\\"\\n          height=\\\"17\\\"\\n          transform=\\\"translate(49.5 22.5)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M57,42H54.4A2.433,2.433,0,0,1,52,39.6V21.4A2.433,2.433,0,0,1,54.4,19H57Z\\\"\\n        />\\n        <rect\\n          {...commonProps}\\n          id=\\\"rectangle-2\\\"\\n          data-name=\\\"rectangle\\\"\\n          fill={COLOR_WHITE}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          width=\\\"22\\\"\\n          height=\\\"16\\\"\\n          transform=\\\"translate(10.1 22)\\\"\\n        />\\n        <rect\\n          {...commonProps}\\n          id=\\\"rectangle-3\\\"\\n          data-name=\\\"rectangle\\\"\\n          fill=\\\"none\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          width=\\\"2\\\"\\n          height=\\\"3\\\"\\n          transform=\\\"translate(8.5 9.5) rotate(180)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_PRIMARY}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M.5,11.5H4.6A1.9,1.9,0,0,0,6.5,9.6V6.4A1.9,1.9,0,0,0,4.6,4.5H.5Z\\\"\\n        />\\n        <rect\\n          {...commonProps}\\n          id=\\\"rectangle-4\\\"\\n          data-name=\\\"rectangle\\\"\\n          fill={COLOR_PRIMARY}\\n          width=\\\"21\\\"\\n          height=\\\"3\\\"\\n          transform=\\\"translate(7.5 6.5)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M33.2,5.3,31.4,3.1A5.45,5.45,0,0,0,27.1,1H22a5.6,5.6,0,0,0-4.3,2.1L7.1,16\\\"\\n        />\\n        <path\\n          id=\\\"path-6\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_PRIMARY}\\n          d=\\\"M9.9,16.6,8.3,15.4l7.3-8.8h2.5Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-7\\\"\\n          data-name=\\\"path\\\"\\n          fill={COLOR_PRIMARY}\\n          strokeLinejoin=\\\"round\\\"\\n          strokeWidth=\\\"2px\\\"\\n          d=\\\"M31.2,11H48a2.946,2.946,0,0,0,3-3h0a2.946,2.946,0,0,0-3-3H31.2A2.22,2.22,0,0,0,29,7.2V8.8A2.22,2.22,0,0,0,31.2,11Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          fill={COLOR_BLUE_GRAY}\\n          strokeLinejoin=\\\"round\\\"\\n          y2=\\\"7\\\"\\n          transform=\\\"translate(4.5 5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          cx=\\\"1.5\\\"\\n          cy=\\\"1.5\\\"\\n          r=\\\"1.5\\\"\\n          transform=\\\"translate(37.6 21.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          cx=\\\"1.5\\\"\\n          cy=\\\"1.5\\\"\\n          r=\\\"1.5\\\"\\n          transform=\\\"translate(37.6 28.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-4\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={COLOR_PRIMARY_FILL}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          cx=\\\"1.5\\\"\\n          cy=\\\"1.5\\\"\\n          r=\\\"1.5\\\"\\n          transform=\\\"translate(37.6 35.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nVideographyIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nVideographyIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default videography icon\",\"code\":\"import React from 'react';\\nimport VideographyIcon from 'alys/VideographyIcon';\\n\\n/** Default videography icon */\\nexport default function ExampleBasic() {\\n  return <VideographyIcon fontSize={52} />;\\n}\\n\"}]}];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}