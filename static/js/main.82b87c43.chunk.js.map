{"version":3,"sources":["docs/AppLogo/index.js","index.js","App.jsx","docs/Header.jsx","docs/AppLogo/app-logo.js","docs/assets/app.svg","docs/assets/github.svg","docs/LoadingPage.jsx","docs/component-data.js"],"names":["_appLogo","__webpack_require__","_react","_interopRequireDefault","_reactDom","_App","ReactDOM","render","default","createElement","document","getElementById","_interopRequireWildcard","_styledComponents","_Header","_LoadingPage","_componentData","Landing","React","lazy","e","then","t","bind","Navigation","ComponentPage","MainContent","styled","div","withConfig","displayName","componentId","App","state","route","_this","_getRoute","_setRouteState","setState","Component","window","addEventListener","this","removeEventListener","component","componentData","filter","_ref","name","Fragment","title","repoLink","Suspense","fallback","components","map","_ref2","active","location","hash","substr","Wrapper","Brand","as","href","_AppLogo","Link","Spacer","external","GithubLogo","github","attrs","height","width","a","target","rel","logo","r","__webpack_exports__","d","SvgComponent","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_extends","Object","assign","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","transform","fill","stroke","props","version","viewBox","preserveAspectRatio","p","fillRule","clipRule","Spinner","spin","keyframes","module","exports","description","type","required","defaultValue","value","computed","color","code","examples","dark","src","alt","outlined","size","round","children","onChange","icon","text","onClick","disabled","basic","block","iconOnly","locale","whole","htmlFor","detail","add","percent","static","fontSize","variant","gutterBottom"],"mappings":"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","file":"static/js/main.82b87c43.chunk.js","sourcesContent":["export { default } from './app-logo';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { Component, Suspense } from 'react';\nimport styled from 'styled-components';\n\nimport Header from './docs/Header';\nimport LoadingPage from './docs/LoadingPage';\nimport componentData from './docs/component-data';\n\nconst Landing = React.lazy(() => import('./docs/LandingPage'));\nconst Navigation = React.lazy(() => import('./docs/Navigation'));\nconst ComponentPage = React.lazy(() => import('./docs/ComponentPage'));\n\nconst MainContent = styled.div`\n  position: fixed;\n  width: 100%;\n  overflow-y: auto;\n  height: calc(100% - 69px);\n`;\n\nexport default class App extends Component {\n  state = {\n    route: this._getRoute(),\n  };\n\n  componentDidMount() {\n    window.addEventListener('hashchange', this._setRouteState);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('hashchange', this._setRouteState);\n  }\n\n  render() {\n    const { route } = this.state;\n    const component = route\n      ? componentData.filter(({ name }) => name === route)[0]\n      : componentData[0];\n\n    return (\n      <React.Fragment>\n        <Header\n          title={route ? 'Alys / Components' : 'Alys'}\n          repoLink=\"https://github.com/rmjordas/alys\"\n        />\n\n        {route ? (\n          <Suspense fallback={<LoadingPage />}>\n            <MainContent>\n              <Navigation\n                components={componentData.map(({ name }) => name)}\n                active={route}\n              />\n\n              <ComponentPage component={component} />\n            </MainContent>\n          </Suspense>\n        ) : (\n          <Suspense fallback={<LoadingPage />}>\n            <Landing component={component.name} />\n          </Suspense>\n        )}\n      </React.Fragment>\n    );\n  }\n\n  _getRoute() {\n    return window.location.hash.substr(1);\n  }\n\n  _setRouteState = () => this.setState({ route: this._getRoute() });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport AppLogo from './AppLogo';\nimport { ReactComponent as github } from './assets/github.svg';\n\nconst GithubLogo = styled(github).attrs(() => ({\n  height: '20px',\n  width: '20px',\n}))`\n  margin: 0 0.5em;\n\n  && path {\n    fill: #fff;\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0;\n  padding: 1em;\n  color: #fff;\n  background-color: #333;\n  border-bottom: 1px solid #d4dadf;\n  box-shadow: 0 1px 1px 0 rgba(116, 129, 141, 0.1);\n`;\n\nconst Brand = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  text-decoration: none;\n\n  &:visited {\n    color: #fff;\n  }\n`;\n\nconst Link = styled.a.attrs(\n  ({ external }) =>\n    external && {\n      target: '_blank',\n      rel: 'noopener noreferrer',\n    },\n)`\n  color: #fff;\n  font-size: 1.5em;\n  line-height: 1.5;\n  text-decoration: none;\n\n  &:visited {\n    color: #fff;\n  }\n`;\n\nconst Spacer = styled.div`\n  flex: 1;\n`;\n\n/** Header containing links to home page and the GitHub repository */\nexport default function Header({ title, repoLink }) {\n  return (\n    <Wrapper>\n      <Brand as=\"a\" href=\"#\">\n        <AppLogo />\n\n        <Link as=\"span\">{title}</Link>\n      </Brand>\n\n      <Spacer />\n\n      <Link href={repoLink} external>\n        <GithubLogo />\n      </Link>\n    </Wrapper>\n  );\n}\n\nHeader.propTypes = {\n  /** Text to be shown for the link to the homepage */\n  title: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nimport { ReactComponent as logo } from '../assets/app.svg';\n\n/** Logo for documentation app */\nconst AppLogo = styled(logo).attrs(() => ({\n  height: '20px',\n  width: '20px',\n}))`\n  margin: 0 0.5em;\n`;\n\nexport default AppLogo;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"metadata\", null, \"Created by potrace 1.11, written by Peter Selinger 2001-2013\");\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"g\", {\n  transform: \"translate(0.000000,760.000000) scale(0.100000,-0.100000)\",\n  fill: \"#fff\",\n  stroke: \"none\"\n}, React.createElement(\"path\", {\n  d: \"M3785 7518 c-24 -82 -148 -458 -172 -523 -10 -27 -21 -51 -25 -53 -5\\n-2 -8 -11 -8 -21 0 -9 -7 -27 -16 -39 -8 -12 -13 -22 -11 -22 3 0 -17 -41 -44\\n-92 -27 -51 -49 -96 -49 -100 0 -4 -4 -8 -10 -8 -5 0 -10 -5 -10 -12 0 -9\\n-131 -213 -162 -253 -4 -5 -38 -48 -75 -95 -79 -100 -148 -181 -262 -309 -128\\n-144 -538 -559 -772 -783 -73 -69 -297 -281 -428 -404 -46 -44 -115 -109 -154\\n-146 -39 -38 -75 -68 -79 -68 -4 0 -8 -3 -8 -7 0 -5 -67 -76 -148 -158 -81\\n-83 -158 -166 -172 -185 -14 -19 -33 -42 -43 -53 -34 -35 -144 -212 -195 -312\\n-96 -192 -126 -266 -154 -380 -19 -79 -22 -118 -22 -315 0 -124 3 -250 7 -280\\n4 -30 9 -67 11 -82 3 -15 11 -56 20 -90 63 -252 183 -447 387 -631 90 -81 90\\n-81 129 -108 19 -13 42 -31 52 -40 10 -9 31 -22 46 -30 15 -8 29 -17 32 -20\\n21 -25 253 -114 326 -125 22 -3 50 -7 64 -10 123 -23 441 -22 580 1 451 77\\n806 318 1097 746 32 46 81 118 108 158 28 40 70 94 94 120 l44 46 12 -28 c13\\n-33 10 -157 -10 -362 -3 -22 -6 -60 -9 -85 -7 -81 -17 -155 -21 -170 -2 -8 -7\\n-35 -10 -60 -3 -25 -8 -52 -11 -61 -3 -10 -7 -30 -9 -45 -2 -16 -9 -49 -16\\n-74 -6 -25 -12 -52 -14 -60 -3 -13 -31 -118 -39 -145 -2 -5 -6 -17 -9 -25 -3\\n-8 -15 -44 -28 -80 -67 -200 -185 -415 -321 -587 -67 -86 -222 -243 -308 -313\\n-30 -25 -60 -49 -67 -55 -7 -5 -18 -15 -25 -20 -42 -34 -199 -131 -256 -158\\n-37 -18 -74 -37 -82 -42 -8 -6 -28 -15 -45 -21 -16 -6 -67 -25 -113 -42 -45\\n-18 -93 -34 -105 -37 -12 -3 -65 -17 -117 -31 -52 -14 -106 -28 -120 -30 -14\\n-3 -45 -10 -70 -15 -47 -11 -80 -17 -140 -24 -19 -2 -35 -4 -35 -5 0 -2 -35\\n-8 -85 -15 -231 -30 -315 -51 -344 -86 -13 -15 -22 -38 -21 -51 1 -13 3 -29 4\\n-35 0 -7 16 -19 35 -27 88 -37 335 -41 2441 -41 1722 0 2223 4 2315 20 14 2\\n41 6 61 9 52 8 65 14 77 40 21 47 3 100 -42 120 -41 19 -153 45 -256 60 -19 3\\n-46 8 -60 11 -14 3 -41 7 -60 10 -36 5 -121 18 -130 20 -3 1 -23 5 -45 9 -22\\n5 -65 14 -95 21 -30 8 -66 16 -80 18 -14 3 -80 23 -147 46 -453 152 -871 444\\n-1083 756 -19 28 -42 59 -52 70 -9 11 -18 25 -19 30 -1 6 -19 44 -39 87 -21\\n42 -40 84 -43 95 -3 10 -20 56 -37 103 -52 146 -122 410 -151 570 -35 204 -40\\n259 -46 540 l-5 235 21 -22 c12 -12 21 -26 21 -31 0 -4 8 -17 18 -28 24 -27\\n62 -82 62 -89 0 -3 5 -11 10 -18 6 -7 45 -62 88 -122 81 -116 82 -118 178\\n-229 203 -235 487 -447 699 -523 56 -20 80 -26 160 -39 133 -22 182 -25 355\\n-28 194 -3 321 11 415 46 73 26 239 108 243 120 2 4 9 8 16 8 23 0 212 146\\n287 222 124 124 187 208 256 338 42 80 95 215 87 223 -2 2 0 15 5 28 17 45 26\\n193 25 399 -1 187 -11 297 -39 425 -4 17 -8 35 -9 40 -1 6 -4 15 -7 20 -4 6\\n-9 22 -13 37 -3 15 -11 40 -18 55 -6 15 -12 30 -13 33 -11 36 -96 192 -140\\n256 -34 50 -128 179 -134 184 -4 3 -17 18 -29 34 -25 32 -103 123 -172 200\\n-163 180 -312 335 -800 826 -432 434 -607 615 -745 765 -49 54 -97 105 -105\\n114 -8 9 -53 61 -98 116 -46 55 -91 109 -101 120 -9 11 -32 43 -51 70 -19 28\\n-38 52 -41 55 -10 9 -86 125 -85 130 0 3 -14 26 -32 52 -45 66 -131 241 -187\\n383 -26 66 -51 129 -56 140 -4 11 -36 99 -70 195 -76 216 -70 200 -78 200 -4\\n0 -16 -28 -26 -62z\"\n}));\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    version: 1.0,\n    width: \"20px\",\n    height: \"20px\",\n    viewBox: \"0 0 760.000000 760.000000\",\n    preserveAspectRatio: \"xMidYMid meet\"\n  }, props), _ref, _ref2);\n};\n\nexport default __webpack_public_path__ + \"static/media/app.3fa9413b.svg\";\nexport { SvgComponent as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\n\nvar _ref =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  fillRule: \"evenodd\",\n  clipRule: \"evenodd\",\n  d: \"M8 0C3.58 0 0 3.58 0 8C0 11.54 2.29 14.53 5.47 15.59C5.87 15.66 6.02 15.42 6.02 15.21C6.02 15.02 6.01 14.39 6.01 13.72C4 14.09 3.48 13.23 3.32 12.78C3.23 12.55 2.84 11.84 2.5 11.65C2.22 11.5 1.82 11.13 2.49 11.12C3.12 11.11 3.57 11.7 3.72 11.94C4.44 13.15 5.59 12.81 6.05 12.6C6.12 12.08 6.33 11.73 6.56 11.53C4.78 11.33 2.92 10.64 2.92 7.58C2.92 6.71 3.23 5.99 3.74 5.43C3.66 5.23 3.38 4.41 3.82 3.31C3.82 3.31 4.49 3.1 6.02 4.13C6.66 3.95 7.34 3.86 8.02 3.86C8.7 3.86 9.38 3.95 10.02 4.13C11.55 3.09 12.22 3.31 12.22 3.31C12.66 4.41 12.38 5.23 12.3 5.43C12.81 5.99 13.12 6.7 13.12 7.58C13.12 10.65 11.25 11.33 9.47 11.53C9.76 11.78 10.01 12.26 10.01 13.01C10.01 14.08 10 14.94 10 15.21C10 15.42 10.15 15.67 10.55 15.59C13.71 14.53 16 11.53 16 8C16 3.58 12.42 0 8 0Z\",\n  transform: \"scale(64)\",\n  fill: \"#1B1F23\"\n});\n\nvar SvgComponent = function SvgComponent(props) {\n  return React.createElement(\"svg\", _extends({\n    width: 1024,\n    height: 1024,\n    viewBox: \"0 0 1024 1024\",\n    fill: \"none\"\n  }, props), _ref);\n};\n\nexport default __webpack_public_path__ + \"static/media/github.07883e93.svg\";\nexport { SvgComponent as ReactComponent };","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\n\nconst spin = keyframes`\n  0% {transform: rotate(0deg)}\n  100% {transform: rotate(360deg)}\n`;\n\nconst Wrapper = styled.div`\n  background: rgba(255, 255, 255, 0.8);\n  height: 100%;\n  left: 0;\n  padding-top: 200px;\n  position: fixed;\n  text-align: center;\n  top: 0;\n  width: 100%;\n  z-index: 998;\n`;\n\nconst Spinner = styled.div`\n  animation: ${spin} 0.8s linear infinite;\n  border-radius: 50%;\n  border: 4px solid #eee;\n  border-top: 4px solid #555;\n  bottom: 0;\n  height: 4em;\n  left: 0;\n  margin: auto;\n  overflow: show;\n  position: fixed;\n  right: 0;\n  top: 0;\n  transition: all 0.3s linear;\n  width: 4em;\n  z-index: 999;\n`;\n\n/** Shows an page overlay that has a spinner in the middle */\nexport default function LoadingPage() {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  );\n}\n","module.exports = [{\"name\":\"ActiveIndicator\",\"description\":\"Provides a visual representation of the status or state of an interface item.\",\"props\":{\"active\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, indicator will be filled with the color of represented by\\nthe value of the `color` prop\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'error'\",\"computed\":false}]},\"required\":false,\"description\":\"Indicator fill color when value of `active` prop is `true`\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { colors } from '@/constants';\\n\\nconst Indicator = styled.div`\\n  min-height: 0.75em;\\n  max-height: 0.75em;\\n  min-width: 0.75em;\\n  max-width: 0.75em;\\n  border-radius: 50%;\\n  background-color: ${({ active, color }) =>\\n    active\\n      ? colors[color === 'default' ? 'primaryLight' : color]\\n      : colors.whiteBlue};\\n`;\\n\\n/**\\n * Provides a visual representation of the status or state of an interface item.\\n */\\nexport default function ActiveIndicator(props) {\\n  return <Indicator {...props} />;\\n}\\n\\nActiveIndicator.defaultProps = {\\n  active: false,\\n  color: 'default',\\n};\\n\\nActiveIndicator.propTypes = {\\n  /**\\n   * If set to `true`, indicator will be filled with the color of represented by\\n   * the value of the `color` prop\\n   */\\n  active: PropTypes.bool,\\n\\n  /** Indicator fill color when value of `active` prop is `true` */\\n  color: PropTypes.oneOf(['default', 'error']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default\",\"code\":\"import React from 'react';\\nimport ActiveIndicator from 'alys/ActiveIndicator';\\n\\n/** Default */\\nexport default function ExampleBasic() {\\n  return <ActiveIndicator />;\\n}\\n\"},{\"name\":\"ExampleBasicActive\",\"description\":\"Active\",\"code\":\"import React from 'react';\\nimport ActiveIndicator from 'alys/ActiveIndicator';\\n\\n/** Active */\\nexport default function ExampleBasicActive() {\\n  return <ActiveIndicator active />;\\n}\\n\"},{\"name\":\"ExampleBasicError\",\"description\":\"Error\",\"code\":\"import React from 'react';\\nimport ActiveIndicator from 'alys/ActiveIndicator';\\n\\n/** Error */\\nexport default function ExampleBasicActive() {\\n  return <ActiveIndicator active color=\\\"error\\\" />;\\n}\\n\"}]},{\"name\":\"AddMentorIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function AddMentorIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 23.7 23.5\\\" {...svgProps}>\\n      <g id=\\\"add-mentor-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M5.5,13.6v3l-5,2.3\\\" />\\n        <path {...commonProps} id=\\\"path-2\\\" data-name=\\\"path\\\" d=\\\"M13.4,17.5\\\" />\\n        <path {...commonProps} id=\\\"path-3\\\" data-name=\\\"path\\\" d=\\\"M13.1,17.4\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M11.3,13.6v3l1.8.8\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M10.2,14.1a5.2,5.2,0,0,0,3.5-4.9V4.6A4.055,4.055,0,0,0,9.6.5H7.3A4.055,4.055,0,0,0,3.2,4.6V9.2a5.2,5.2,0,0,0,3.5,4.9\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"5\\\"\\n          cy=\\\"5\\\"\\n          r=\\\"5\\\"\\n          transform=\\\"translate(13.2 13)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          y2=\\\"4\\\"\\n          transform=\\\"translate(18.2 16)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          x1=\\\"4\\\"\\n          transform=\\\"translate(16.2 18)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nAddMentorIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nAddMentorIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic add mentor icon\",\"code\":\"import React from 'react';\\nimport AddMentorIcon from 'alys/AddMentorIcon';\\n\\n/** Basic add mentor icon */\\nexport default function ExampleBasic() {\\n  return <AddMentorIcon />;\\n}\\n\"}]},{\"name\":\"ArrowLeftIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ArrowLeftIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 17.2\\\" {...svgProps}>\\n      <g id=\\\"arrow-left-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x1=\\\"17\\\"\\n          transform=\\\"translate(1.5 8.6)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M8.6.5.5,8.6l8.1,8.1\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nArrowLeftIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nArrowLeftIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic arrow left icon\",\"code\":\"import React from 'react';\\nimport ArrowLeftIcon from 'alys/ArrowLeftIcon';\\n\\n/** Basic arrow left icon */\\nexport default function ExampleBasic() {\\n  return <ArrowLeftIcon />;\\n}\\n\"}]},{\"name\":\"ArrowRightIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ArrowLeftIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 18.8 17.2\\\" {...svgProps}>\\n      <g id=\\\"arrow-right-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <line\\n          {...commonProps}\\n          id=\\\"Line_375\\\"\\n          data-name=\\\"Line 375\\\"\\n          x2=\\\"17\\\"\\n          transform=\\\"translate(0.5 8.6)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"Path_1156\\\"\\n          data-name=\\\"Path 1156\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M10.2.5l8.1,8.1-8.1,8.1\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nArrowLeftIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nArrowLeftIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic arrow right icon\",\"code\":\"import React from 'react';\\nimport ArrowRightIcon from 'alys/ArrowRightIcon';\\n\\n/** Basic arrow right icon */\\nexport default function ExampleBasic() {\\n  return <ArrowRightIcon />;\\n}\\n\"}]},{\"name\":\"AttachmentIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function AttachmentIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17.9 19.3\\\" {...svgProps}>\\n      <g id=\\\"attachment-icon\\\" transform=\\\"translate(0.05 -0.05)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M9.6,3.3,1.8,11.1a4.468,4.468,0,0,0,0,6.4h0a4.468,4.468,0,0,0,6.4,0L16,9.7\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M7.5,15.3l8.8-8.8a3.383,3.383,0,0,0,0-4.9h0a3.383,3.383,0,0,0-4.9,0L3.2,9.7\\\"\\n        />\\n        <path {...commonProps} id=\\\"path-3\\\" data-name=\\\"path\\\" d=\\\"M2.9,15\\\" />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x1=\\\"7.1\\\"\\n          y2=\\\"7.1\\\"\\n          transform=\\\"translate(3.9 4.7)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M3.9,11.8a2.416,2.416,0,0,0,0,3.5,2.5,2.5,0,0,0,3.5,0\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nAttachmentIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nAttachmentIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic attachment icon\",\"code\":\"import React from 'react';\\nimport AttachmentIcon from 'alys/AttachmentIcon';\\n\\n/** Basic attachment icon */\\nexport default function ExampleBasic() {\\n  return <AttachmentIcon />;\\n}\\n\"}]},{\"name\":\"Avatar\",\"description\":\"Image avatars.\",\"props\":{\"src\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Path to the image file\"},\"alt\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Alternate text for the image\",\"defaultValue\":{\"value\":\"''\",\"computed\":false}},\"outlined\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Show or hide image outline\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"size\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'smaller'\",\"computed\":false},{\"value\":\"'small'\",\"computed\":false},{\"value\":\"'default'\",\"computed\":false}]},\"required\":false,\"description\":\"Pre-set avatar size\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}},\"round\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set `true`, image shape will be clipped to a circle\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled, { ThemeProvider } from 'styled-components';\\n\\nimport {\\n  COLOR_GRAY_BLUE,\\n  COLOR_WHITE,\\n  COLOR_WHITE_BLUE,\\n  avatarSizes,\\n} from '@/constants';\\nimport MentorIcon from '@/MentorIcon';\\n\\n/** Returns the size of the avatar */\\nexport function getSize({ theme: { size } }) {\\n  return size;\\n}\\n\\n/** Calculates size of the avatar with an outline */\\nexport function calcSize(percent) {\\n  return ({ theme: { size } }) => size + size * percent;\\n}\\n\\nconst Wrapper = styled.div`\\n  background-color: ${COLOR_WHITE};\\n  width: ${calcSize(0.2)}em;\\n  height: ${calcSize(0.2)}em;\\n  border-radius: ${({ theme: { size } }) => size * 0.1}em;\\n`;\\n\\nconst Img = styled.img`\\n  height: ${getSize}em;\\n  width: ${getSize}em;\\n  border-radius: ${({ theme: { size, round } }) =>\\n    round ? '50%' : `${size * 0.1}em`};\\n  margin: ${({ theme: { size, outlined, round } }) =>\\n    outlined && !round ? size * 0.1 : 0}em;\\n`;\\n\\nconst DefaultWrapper = styled(Wrapper)`\\n  background-color: ${COLOR_WHITE_BLUE};\\n`;\\n\\nconst StyledMentorIcon = styled(MentorIcon)`\\n  position: relative;\\n  left: 50%;\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n\\n  && path {\\n    stroke: ${COLOR_GRAY_BLUE};\\n  }\\n`;\\n\\n/** Image avatars. */\\nexport default function Avatar({ src, alt, outlined, size, round }) {\\n  const theme = {\\n    size: avatarSizes[size],\\n    outlined,\\n    round,\\n  };\\n\\n  return (\\n    <ThemeProvider theme={theme}>\\n      {src ? (\\n        outlined && !round ? (\\n          <Wrapper>\\n            <Img src={src} alt={alt} />\\n          </Wrapper>\\n        ) : (\\n          <Img src={src} alt={alt} />\\n        )\\n      ) : (\\n        <DefaultWrapper>\\n          <StyledMentorIcon />\\n        </DefaultWrapper>\\n      )}\\n    </ThemeProvider>\\n  );\\n}\\n\\nAvatar.defaultProps = {\\n  alt: '',\\n  outlined: false,\\n  size: 'default',\\n  round: false,\\n};\\n\\nAvatar.propTypes = {\\n  /** Path to the image file */\\n  src: PropTypes.string,\\n\\n  /** Alternate text for the image */\\n  alt: PropTypes.string,\\n\\n  /** Show or hide image outline */\\n  outlined: PropTypes.bool,\\n\\n  /** Pre-set avatar size */\\n  size: PropTypes.oneOf(['smaller', 'small', 'default']),\\n\\n  /** If set `true`, image shape will be clipped to a circle */\\n  round: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleDefaultSmaller\",\"description\":\"Smaller size avatar with default image\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\n/** Smaller size avatar with default image */\\nexport default function ExampleDefaultSmaller() {\\n  return <Avatar size=\\\"smaller\\\" />;\\n}\\n\"},{\"name\":\"ExampleNormal\",\"description\":\"Normal size avatar\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../docs/assets/alys.jpg';\\n\\n/** Normal size avatar */\\nexport default function ExampleNormal() {\\n  return <Avatar src={img} />;\\n}\\n\"},{\"name\":\"ExampleOutlined\",\"description\":\"Small size with outline\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../docs/assets/alys.jpg';\\n\\n/** Small size with outline */\\nexport default function ExampleOutlined() {\\n  return <Avatar src={img} size=\\\"small\\\" outlined />;\\n}\\n\"},{\"name\":\"ExampleSmallRound\",\"description\":\"Small and rounded avatar\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../docs/assets/alys.jpg';\\n\\n/** Small and rounded avatar */\\nexport default function ExampleSmallRound() {\\n  return <Avatar src={img} size=\\\"small\\\" round />;\\n}\\n\"},{\"name\":\"ExampleSmallSize\",\"description\":\"Small avatar\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../docs/assets/alys.jpg';\\n\\n/** Small avatar */\\nexport default function ExampleSmallSize() {\\n  return <Avatar src={img} size=\\\"small\\\" />;\\n}\\n\"},{\"name\":\"ExampleSmaller\",\"description\":\"Smaller size avatar\",\"code\":\"import React from 'react';\\nimport Avatar from 'alys/Avatar';\\n\\nimport img from '../../docs/assets/alys.jpg';\\n\\n/** Smaller size avatar */\\nexport default function ExampleSmaller() {\\n  return <Avatar src={img} size=\\\"smaller\\\" />;\\n}\\n\"}]},{\"name\":\"BottomBar\",\"description\":\"Provides a list of action items that a user can click to navigate to another\\npart of the app or to do a task on the current page.\",\"props\":{\"children\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"List of <BottomBarAction /> items\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"The <BottomBarAction /> children use this value to determine if it is\\nselected.\"},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Callback when `value` changes. Must have two params for the `event` object\\nand the `value`\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { COLOR_WHITE } from '@/constants';\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  justify-content: space-around;\\n  align-items: center;\\n  width: 100%;\\n  overflow-x: auto;\\n  max-height: 5.3125em;\\n  background: ${COLOR_WHITE};\\n\\n  @media (min-width: 34em) {\\n    justify-content: center;\\n  }\\n`;\\n\\n/**\\n * Provides a list of action items that a user can click to navigate to another\\n * part of the app or to do a task on the current page.\\n */\\nexport default function BottomBar({ children: childrenProp, value, onChange }) {\\n  const children = React.Children.map(childrenProp, (child, i) => {\\n    if (!React.isValidElement(child)) {\\n      return null;\\n    }\\n\\n    const childValue = child.props.value === undefined ? i : child.props.value;\\n\\n    return React.cloneElement(child, {\\n      selected: childValue === value,\\n      value: childValue,\\n      onChange,\\n    });\\n  });\\n\\n  return <Wrapper>{children}</Wrapper>;\\n}\\n\\nBottomBar.propTypes = {\\n  /** List of <BottomBarAction /> items */\\n  children: PropTypes.node.isRequired,\\n\\n  /**\\n   * The <BottomBarAction /> children use this value to determine if it is\\n   * selected.\\n   */\\n  value: PropTypes.any,\\n\\n  /**\\n   * Callback when `value` changes. Must have two params for the `event` object\\n   * and the `value`\\n   */\\n  onChange: PropTypes.func,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic bottom bar\",\"code\":\"import React, { PureComponent } from 'react';\\nimport BottomBar from 'alys/BottomBar';\\nimport BottomBarAction from 'alys/BottomBarAction';\\nimport HomeIcon from 'alys/HomeIcon';\\nimport MentorIcon from 'alys/MentorIcon';\\nimport CommentIcon from 'alys/CommentIcon';\\nimport SettingsIcon from 'alys/SettingsIcon';\\n\\n/** Basic bottom bar */\\nexport default class ExampleBasic extends PureComponent {\\n  state = {\\n    value: 'Mentor',\\n  };\\n\\n  render() {\\n    return (\\n      <React.Fragment>\\n        <p>\\n          Selected: <strong>{this.state.value}</strong>\\n        </p>\\n\\n        <BottomBar value={this.state.value} onChange={this._handleOnChange}>\\n          <BottomBarAction value=\\\"Home\\\" icon={<HomeIcon />} />\\n          <BottomBarAction value=\\\"Mentor\\\" icon={<MentorIcon />} />\\n          <BottomBarAction value=\\\"Comment\\\" icon={<CommentIcon />} />\\n          <BottomBarAction value=\\\"Settings\\\" icon={<SettingsIcon />} />\\n        </BottomBar>\\n      </React.Fragment>\\n    );\\n  }\\n\\n  _handleOnChange = (_event, value) => this.setState({ value });\\n}\\n\"}]},{\"name\":\"BottomBarAction\",\"description\":\"An action item inside <BottomBar />\",\"props\":{\"value\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Value to be passed to a `BottomBar` parent's `onChange` prop\"},\"icon\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"Icon to display\"}},\"code\":\"import React, { PureComponent } from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport {\\n  COLOR_GRAY_BLUE,\\n  COLOR_PRIMARY,\\n  COLOR_PRIMARY_LIGHT,\\n} from '@/constants';\\n\\nconst Action = styled.div`\\n  padding: 0.875em 0.875em;\\n  cursor: pointer;\\n  color: ${COLOR_GRAY_BLUE};\\n\\n  svg {\\n    width: 1.15em;\\n    transition: color 0.2s ease-in-out;\\n    color: ${({ selected }) => (selected ? COLOR_PRIMARY : 'inherit')};\\n  }\\n\\n  &:hover svg {\\n    color: ${COLOR_PRIMARY_LIGHT};\\n  }\\n\\n  @media (min-width: 34em) {\\n    padding: 1.3125em 3em;\\n\\n    svg {\\n      width: initial;\\n    }\\n  }\\n\\n  @media (min-width: 60em) {\\n    padding: 1.75em 3.5em;\\n  }\\n`;\\n\\n/** An action item inside <BottomBar /> */\\nexport default class BottomBarAction extends PureComponent {\\n  static propTypes = {\\n    /** Value to be passed to a `BottomBar` parent's `onChange` prop */\\n    value: PropTypes.string,\\n\\n    /** Icon to display */\\n    icon: PropTypes.node.isRequired,\\n  };\\n\\n  render() {\\n    const { icon, selected } = this.props;\\n\\n    return (\\n      <Action selected={selected} onClick={this._handleOnClick}>\\n        {icon}\\n      </Action>\\n    );\\n  }\\n\\n  _handleOnClick = (event) => {\\n    const { value, onChange } = this.props;\\n\\n    if (onChange) {\\n      onChange(event, value);\\n    }\\n  };\\n}\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default bottom bar action\",\"code\":\"import React from 'react';\\nimport BottomBarAction from 'alys/BottomBarAction';\\nimport MentorIcon from 'alys/MentorIcon';\\n\\n/** Default bottom bar action */\\nexport default function ExampleBasic() {\\n  return <BottomBarAction value=\\\"Mentor\\\" icon={<MentorIcon />} />;\\n}\\n\"}]},{\"name\":\"Button\",\"description\":\"Button signals to the user that an action can be performed by clicking or\\ntaping this element.\",\"props\":{\"text\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Text to display on the button\"},\"onClick\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Handler to call when button is clicked\"},\"disabled\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, the button cannot be interacted with\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"basic\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Button width is determined by the content. If set to `true`, the value of\\n`icon` will be ignored.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"block\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, the button's width will span it's container's width\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'secondary'\",\"computed\":false}]},\"required\":false,\"description\":\"Button color preset\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'link'\",\"computed\":false}]},\"required\":false,\"description\":\"Button type\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}},\"icon\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"The icon to be displayed before the button text\",\"defaultValue\":{\"value\":\"null\",\"computed\":false}},\"iconOnly\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"A button that contains only an icon. If this is set to `true` the value of\\n`text` is ignored.\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled, { css } from 'styled-components';\\n\\nimport {\\n  COLOR_PRIMARY,\\n  COLOR_WHITE,\\n  COLOR_GRAY_BLUE,\\n  GRADIENT_PRIMARY,\\n  TYPE_FONT_SIZE_HEADING_6,\\n} from '@/constants';\\nimport { styleLengths } from '@utils/string-utils';\\n\\nconst disabledStyles = css`\\n  background-color: ${COLOR_GRAY_BLUE};\\n\\n  && {\\n    cursor: default;\\n  }\\n`;\\n\\n/**\\n * Returns `null` if an icon node is not provided. Otherwise, it returns a\\n * styled <Icon /> component.\\n */\\nfunction buttonIcon({ icon, type = 'default', iconOnly = false }) {\\n  if (!icon) {\\n    return null;\\n  }\\n\\n  const Icon = styled(icon).attrs(() => ({\\n    dark: type !== 'link',\\n  }))`\\n    margin-right: ${iconOnly ? 0 : '1.125em'};\\n    vertical-align: middle;\\n\\n    && svg {\\n      font-size: 1.125em;\\n    }\\n  `;\\n\\n  return <Icon />;\\n}\\n\\n/** Linear gradient value builder for the `background` property. */\\nfunction linearGradient(colors) {\\n  return `linear-gradient(to right, ${colors})`;\\n}\\n\\nconst BasicButton = styled.div.attrs(({ text }) => ({\\n  children: text,\\n  role: 'button',\\n}))`\\n  box-sizing: border-box;\\n  border: 0;\\n  outline: none;\\n  user-select: none;\\n  display: inline-block;\\n  text-align: center;\\n  vertical-align: middle;\\n  background: ${({ type }) =>\\n    type === 'link' ? 'transparent' : COLOR_PRIMARY};\\n  color: ${({ type }) => (type === 'link' ? COLOR_PRIMARY : COLOR_WHITE)};\\n  text-transform: uppercase;\\n  border-radius: 0.375em;\\n  padding: 1em;\\n  font-size: ${styleLengths(TYPE_FONT_SIZE_HEADING_6)};\\n  font-weight: 500;\\n  overflow: hidden;\\n  position: relative;\\n\\n  &:hover {\\n    cursor: pointer;\\n  }\\n\\n  ${({ disabled }) => disabled && disabledStyles}\\n`;\\n\\nconst IconOnlyButton = styled(BasicButton).attrs(({ icon }) => ({\\n  children: buttonIcon({ icon, iconOnly: true }),\\n}))`\\n  border-radius: 50%;\\n`;\\n\\nconst WideButton = styled(BasicButton)`\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  justify-content: center;\\n  background: ${({ type, disabled }) => {\\n    if (disabled) {\\n      return type === 'link' ? 'transparent' : COLOR_GRAY_BLUE;\\n    }\\n\\n    return type === 'link' ? 'transparent' : linearGradient(GRADIENT_PRIMARY);\\n  }};\\n  color: ${({ type, disabled, theme: { darkMode } }) => {\\n    if (type === 'link') {\\n      if (disabled) {\\n        return 'inherit';\\n      }\\n\\n      return darkMode ? 'inherit' : COLOR_PRIMARY;\\n    }\\n\\n    return COLOR_WHITE;\\n  }};\\n  border-radius: ${({ block }) => (block ? 0 : '0.375em')};\\n  min-height: 4em;\\n  margin: ${({ block }) => (block ? 0 : '1.25em 1.875em')};\\n`;\\n\\n/**\\n * Button signals to the user that an action can be performed by clicking or\\n * taping this element.\\n */\\nexport default function Button({\\n  basic,\\n  text,\\n  block,\\n  type,\\n  icon,\\n  iconOnly,\\n  ...props\\n}) {\\n  if (props.disabled) {\\n    props.onClick = undefined;\\n  }\\n\\n  if (iconOnly) {\\n    return <IconOnlyButton icon={icon} {...props} />;\\n  }\\n\\n  if (basic) {\\n    return <BasicButton text={text} type={type} {...props} />;\\n  }\\n\\n  return (\\n    <WideButton block={block} type={type} {...props}>\\n      {buttonIcon({ icon, type })} {text}\\n    </WideButton>\\n  );\\n}\\n\\nButton.defaultProps = {\\n  basic: false,\\n  block: false,\\n  color: 'default',\\n  icon: null,\\n  iconOnly: false,\\n  type: 'default',\\n  disabled: false,\\n};\\n\\nButton.propTypes = {\\n  /** Text to display on the button */\\n  text: PropTypes.string,\\n\\n  /** Handler to call when button is clicked */\\n  onClick: PropTypes.func,\\n\\n  /** If set to `true`, the button cannot be interacted with */\\n  disabled: PropTypes.bool,\\n\\n  /**\\n   * Button width is determined by the content. If set to `true`, the value of\\n   * `icon` will be ignored.\\n   */\\n  basic: PropTypes.bool,\\n\\n  /** If set to `true`, the button's width will span it's container's width */\\n  block: PropTypes.bool,\\n\\n  /** Button color preset */\\n  color: PropTypes.oneOf(['default', 'secondary']),\\n\\n  /** Button type */\\n  type: PropTypes.oneOf(['default', 'link']),\\n\\n  /** The icon to be displayed before the button text */\\n  icon: PropTypes.func,\\n\\n  /**\\n   * A button that contains only an icon. If this is set to `true` the value of\\n   * `text` is ignored.\\n   */\\n  iconOnly: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\n\\n/** Basic button */\\nexport default function ExampleBasic() {\\n  return <Button basic text=\\\"Example basic\\\" />;\\n}\\n\"},{\"name\":\"ExampleBlock\",\"description\":\"Block button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\n\\n/** Block button */\\nexport default function ExampleBlock() {\\n  return <Button block text=\\\"Example block\\\" />;\\n}\\n\"},{\"name\":\"ExampleBlockIcon\",\"description\":\"Block with icon button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\nimport RegisterIcon from 'alys/RegisterIcon';\\n\\n/** Block with icon button */\\nexport default function ExampleBlockIcon() {\\n  return <Button block icon={RegisterIcon} text=\\\"Example block with Icon\\\" />;\\n}\\n\"},{\"name\":\"ExampleDefault\",\"description\":\"Default button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\n\\n/** Default button */\\nexport default function ExampleDefault() {\\n  return <Button text=\\\"Example default\\\" />;\\n}\\n\"},{\"name\":\"ExampleDefaultIcon\",\"description\":\"Default button with icon\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\nimport MentorIcon from 'alys/MentorIcon';\\n\\n/** Default button with icon */\\nexport default function ExampleDefaultIcon() {\\n  return <Button text=\\\"Example default with icon\\\" icon={MentorIcon} />;\\n}\\n\"},{\"name\":\"ExampleIconOnly\",\"description\":\"Icon only button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\nimport ArrowLeftIcon from 'alys/ArrowLeftIcon';\\n\\n/** Icon only button */\\nexport default function ExampleIconOnly() {\\n  return <Button iconOnly icon={ArrowLeftIcon} />;\\n}\\n\"},{\"name\":\"ExamplePlayground\",\"description\":\"Button playgound\",\"code\":\"import React, { Component } from 'react';\\nimport Button from 'alys/Button';\\nimport ArrowLeftIcon from 'alys/ArrowLeftIcon';\\n\\nimport ToggleButton from '../../docs/ToggleButton';\\n\\n/** Button playgound */\\nexport default class ExamplePlayground extends Component {\\n  state = {\\n    disabled: false,\\n    count: 0,\\n  };\\n\\n  render() {\\n    const common = {\\n      disabled: this.state.disabled,\\n      onClick: this._updateCount,\\n    };\\n\\n    return (\\n      <React.Fragment>\\n        <ToggleButton\\n          on={this.state.disabled}\\n          onClick={this._toggleButtonDisabledState}\\n          onText=\\\"enable\\\"\\n          offText=\\\"disable\\\"\\n        />\\n\\n        <p>\\n          Count: <strong>{this.state.count}</strong>\\n        </p>\\n\\n        <div style={{ textAlign: 'center' }}>\\n          <p>\\n            <Button basic text=\\\"basic\\\" {...common} />\\n          </p>\\n\\n          <p>\\n            <Button block text=\\\"block\\\" {...common} />\\n          </p>\\n\\n          <p>\\n            <Button text=\\\"default\\\" {...common} />\\n          </p>\\n\\n          <p>\\n            <Button iconOnly icon={ArrowLeftIcon} {...common} />\\n          </p>\\n\\n          <p>\\n            <Button type=\\\"link\\\" text=\\\"Link\\\" {...common} />\\n          </p>\\n        </div>\\n      </React.Fragment>\\n    );\\n  }\\n\\n  _toggleButtonDisabledState = () =>\\n    this.setState(({ disabled: prevDisabled }) => ({\\n      disabled: !prevDisabled,\\n    }));\\n\\n  _updateCount = () =>\\n    this.setState(({ count: prevCount }) => ({ count: prevCount + 1 }));\\n}\\n\"},{\"name\":\"ExampleTextOnly\",\"description\":\"Text-only type button\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\n\\n/** Text-only type button */\\nexport default function ExampleTextOnly() {\\n  return <Button type=\\\"link\\\" text=\\\"Example text only\\\" />;\\n}\\n\"},{\"name\":\"ExampleTextOnlyIcon\",\"description\":\"Text-only type button with icon\",\"code\":\"import React from 'react';\\nimport Button from 'alys/Button';\\nimport RegisterIcon from 'alys/RegisterIcon';\\n\\n/** Text-only type button with icon */\\nexport default function ExampleTextOnlyIcon() {\\n  return (\\n    <Button\\n      type=\\\"link\\\"\\n      text=\\\"Example text only with icon\\\"\\n      icon={RegisterIcon}\\n    />\\n  );\\n}\\n\"}]},{\"name\":\"CameraFlipIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CameraFlipIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20.752 16.104\\\" {...svgProps}>\\n      <g id=\\\"camera-flip-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M18.974,2.824H15.14l-.465-1.51A1.116,1.116,0,0,0,13.629.5H7.123a1.116,1.116,0,0,0-1.046.813L5.5,2.824H1.778A1.289,1.289,0,0,0,.5,4.1V14.326A1.289,1.289,0,0,0,1.778,15.6h17.2a1.289,1.289,0,0,0,1.278-1.278V4.1A1.289,1.289,0,0,0,18.974,2.824Z\\\"\\n          transform=\\\"translate(0 0)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M14.464,7.3l-1.743,3.021L9.7,8.694\\\"\\n          transform=\\\"translate(1.489 1.101)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M5.1,9.667A4.041,4.041,0,0,1,9.167,5.6a3.944,3.944,0,0,1,3.95,4.067\\\"\\n          transform=\\\"translate(0.745 0.826)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nCameraFlipIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCameraFlipIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic camera flip icon\",\"code\":\"import React from 'react';\\nimport CameraFlipIcon from 'alys/CameraFlipIcon';\\n\\n/** Basic camera flip icon */\\nexport default function ExampleBasic() {\\n  return <CameraFlipIcon />;\\n}\\n\"}]},{\"name\":\"CameraIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CameraIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 18 14\\\" {...svgProps}>\\n      <circle\\n        {...commonProps}\\n        id=\\\"ellipse\\\"\\n        cx=\\\"3.5\\\"\\n        cy=\\\"3.5\\\"\\n        r=\\\"3.5\\\"\\n        transform=\\\"translate(5.5 4.5)\\\"\\n      />\\n      <circle\\n        {...commonProps}\\n        id=\\\"ellipse-2\\\"\\n        data-name=\\\"ellipse\\\"\\n        cx=\\\"0.5\\\"\\n        cy=\\\"0.5\\\"\\n        r=\\\"0.5\\\"\\n        transform=\\\"translate(14.5 4.5)\\\"\\n      />\\n      <path\\n        {...commonProps}\\n        id=\\\"path\\\"\\n        d=\\\"M16.4,2.5H13.1l-.4-1.3a.961.961,0,0,0-.9-.7H6.2a.961.961,0,0,0-.9.7L4.8,2.5H1.6A1.11,1.11,0,0,0,.5,3.6v8.8a1.11,1.11,0,0,0,1.1,1.1H16.4a1.11,1.11,0,0,0,1.1-1.1V3.6A1.11,1.11,0,0,0,16.4,2.5Z\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nCameraIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCameraIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic camera icon\",\"code\":\"import React from 'react';\\nimport CameraIcon from 'alys/CameraIcon';\\n\\n/** Basic camera icon */\\nexport default function ExampleBasic() {\\n  return <CameraIcon />;\\n}\\n\"}]},{\"name\":\"CardIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CardIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 14\\\" {...svgProps}>\\n      <g id=\\\"card-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M17.5,13.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h16a.945.945,0,0,1,1,1v11A.945.945,0,0,1,17.5,13.5Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          strokeWidth=\\\"3px\\\"\\n          x2=\\\"18\\\"\\n          transform=\\\"translate(1 5.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"4\\\"\\n          transform=\\\"translate(3.5 10.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nCardIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCardIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic card icon\",\"code\":\"import React from 'react';\\nimport CardIcon from 'alys/CardIcon';\\n\\n/** Basic card icon */\\nexport default function ExampleBasic() {\\n  return <CardIcon />;\\n}\\n\"}]},{\"name\":\"ChevronLeftIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ChevronLeftIcon({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 5.8 10.7\\\" {...svgProps}>\\n      <g id=\\\"arrow-left\\\" transform=\\\"translate(-512.002 -387)\\\">\\n        <path\\n          id=\\\"arrow-left-2\\\"\\n          data-name=\\\"arrow-left\\\"\\n          fill=\\\"none\\\"\\n          stroke={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeMiterlimit={10}\\n          d=\\\"M5.3,10.2.5,5.3,5.3.5\\\"\\n          transform=\\\"translate(512.002 387)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nChevronLeftIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nChevronLeftIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic chevron left icon\",\"code\":\"import React from 'react';\\nimport ChevronLeftIcon from 'alys/ChevronLeftIcon';\\n\\n/** Basic chevron left icon */\\nexport default function ExampleBasic() {\\n  return <ChevronLeftIcon />;\\n}\\n\"}]},{\"name\":\"ChevronRightIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ChevronRightIcon({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 5.8 10.7\\\" {...svgProps}>\\n      <g id=\\\"arrow-right\\\" transform=\\\"translate(-652.002 -385)\\\">\\n        <path\\n          id=\\\"arrow-right-2\\\"\\n          data-name=\\\"arrow-right\\\"\\n          fill=\\\"none\\\"\\n          stroke={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeMiterlimit={10}\\n          d=\\\"M.5,10.2,5.3,5.3.5.5\\\"\\n          transform=\\\"translate(652.002 385)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nChevronRightIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nChevronRightIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic chevron right icon\",\"code\":\"import React from 'react';\\nimport ChevronRightIcon from 'alys/ChevronRightIcon';\\n\\n/** Basic chevron right icon */\\nexport default function ExampleBasic() {\\n  return <ChevronRightIcon />;\\n}\\n\"}]},{\"name\":\"ClockIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ClockIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20 20\\\" {...svgProps}>\\n      <g id=\\\"clock-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"9.5\\\"\\n          cy=\\\"9.5\\\"\\n          r=\\\"9.5\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          y2=\\\"8\\\"\\n          transform=\\\"translate(9.5 3.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          x1=\\\"5\\\"\\n          transform=\\\"translate(9.5 11.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nClockIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nClockIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic clock icon\",\"code\":\"import React from 'react';\\nimport ClockIcon from 'alys/ClockIcon';\\n\\n/** Basic clock icon */\\nexport default function ExampleBasic() {\\n  return <ClockIcon />;\\n}\\n\"}]},{\"name\":\"CloseIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CloseIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17.414 17.414\\\" {...svgProps}>\\n      <g id=\\\"close-icon\\\" transform=\\\"translate(0.207 0.207)\\\">\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x1=\\\"16\\\"\\n          y1=\\\"16\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          y1=\\\"16\\\"\\n          x2=\\\"16\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nCloseIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCloseIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic close icon\",\"code\":\"import React from 'react';\\nimport CloseIcon from 'alys/CloseIcon';\\n\\n/** Basic close icon */\\nexport default function ExampleBasic() {\\n  return <CloseIcon />;\\n}\\n\"}]},{\"name\":\"CommentIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function CommentIcon({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21.4 18.3\\\" {...svgProps}>\\n      <g id=\\\"comment-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          id=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          stroke={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeMiterlimit={10}\\n          d=\\\"M10.7.5C5.1.5.5,4.3.5,9a7.82,7.82,0,0,0,2.6,5.7l-.8,3.1,4-1.1a12.307,12.307,0,0,0,4.4.8c5.6,0,10.2-3.8,10.2-8.5S16.4.5,10.7.5Z\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nCommentIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nCommentIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic comment icon\",\"code\":\"import React from 'react';\\nimport CommentIcon from 'alys/CommentIcon';\\n\\n/** Basic comment icon */\\nexport default function ExampleBasic() {\\n  return <CommentIcon />;\\n}\\n\"}]},{\"name\":\"ComputerIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ComputerIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 22.917 19\\\" {...svgProps}>\\n      <g id=\\\"computer-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M21.6,14.5H1.4a.9.9,0,0,1-.9-.9V1.4A.9.9,0,0,1,1.4.5H21.5a.9.9,0,0,1,.9.9V13.5A.805.805,0,0,1,21.6,14.5Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x2=\\\"3\\\"\\n          strokeLinecap=\\\"round\\\"\\n          transform=\\\"translate(10 16.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"7\\\"\\n          transform=\\\"translate(8 18.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nComputerIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nComputerIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic computer icon\",\"code\":\"import React from 'react';\\nimport ComputerIcon from 'alys/ComputerIcon';\\n\\n/** Basic computer icon */\\nexport default function ExampleBasic() {\\n  return <ComputerIcon />;\\n}\\n\"}]},{\"name\":\"ConfirmIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function ConfirmIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21 21\\\" {...svgProps}>\\n      <g id=\\\"confirm-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M5.6,10.9,8.7,14l7.2-7.1\\\" />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"10\\\"\\n          cy=\\\"10\\\"\\n          r=\\\"10\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nConfirmIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nConfirmIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic confirm icon\",\"code\":\"import React from 'react';\\nimport ConfirmIcon from 'alys/ConfirmIcon';\\n\\n/** Basic confirm icon */\\nexport default function ExampleBasic() {\\n  return <ConfirmIcon />;\\n}\\n\"}]},{\"name\":\"Currency\",\"description\":\"Produces the currency format of a value\",\"props\":{\"value\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"The amount to be formatted\"},\"code\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Currency code. List of valid currency codes:\\nhttps://www.currency-iso.org/en/home/tables/table-a1.html\",\"defaultValue\":{\"value\":\"'USD'\",\"computed\":false}},\"locale\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Language tag. More info: https://tools.ietf.org/html/rfc5646\",\"defaultValue\":{\"value\":\"'en-US'\",\"computed\":false}},\"whole\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, the value will only be rounded-off whole value\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Produces the currency format of a value */\\nexport default function Currency({ value, locale, code, whole }) {\\n  const fmt = new Intl.NumberFormat(locale, {\\n    style: 'currency',\\n    currency: code,\\n    currencyDisplay: 'symbol',\\n    minimumFractionDigits: whole ? 0 : undefined,\\n    maximumFractionDigits: whole ? 0 : undefined,\\n  });\\n\\n  return <React.Fragment>{fmt.format(value)}</React.Fragment>;\\n}\\n\\nCurrency.defaultProps = {\\n  code: 'USD',\\n  locale: 'en-US',\\n  whole: false,\\n};\\n\\nCurrency.propTypes = {\\n  /** The amount to be formatted */\\n  value: PropTypes.number.isRequired,\\n\\n  /**\\n   * Currency code. List of valid currency codes:\\n   * https://www.currency-iso.org/en/home/tables/table-a1.html\\n   */\\n  code: PropTypes.string,\\n\\n  /** Language tag. More info: https://tools.ietf.org/html/rfc5646 */\\n  locale: PropTypes.string,\\n\\n  /** If set to `true`, the value will only be rounded-off whole value */\\n  whole: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBhd\",\"description\":\"Bahraini Dinar\",\"code\":\"import React from 'react';\\nimport Currency from 'alys/Currency';\\n\\n/** Bahraini Dinar */\\nexport default function ExampleBhd() {\\n  return <Currency value={3.5} locale=\\\"ar-bh\\\" code=\\\"BHD\\\" />;\\n}\\n\"},{\"name\":\"ExampleRub\",\"description\":\"Russian ruble\",\"code\":\"import React from 'react';\\nimport Currency from 'alys/Currency';\\n\\n/** Russian ruble */\\nexport default function ExampleUsdRub() {\\n  return <Currency value={3.5} locale=\\\"ru\\\" code=\\\"RUB\\\" />;\\n}\\n\"},{\"name\":\"ExampleUsd\",\"description\":\"US Dollar\",\"code\":\"import React from 'react';\\nimport Currency from 'alys/Currency';\\n\\n/** US Dollar */\\nexport default function ExampleUsd() {\\n  return <Currency value={3.5} />;\\n}\\n\"},{\"name\":\"ExampleUsdWhole\",\"description\":\"US Dollar but whole value only\",\"code\":\"import React from 'react';\\nimport Currency from 'alys/Currency';\\n\\n/** US Dollar but whole value only */\\nexport default function ExampleUsdWhole() {\\n  return <Currency value={3.5} whole />;\\n}\\n\"}]},{\"name\":\"EmailIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function EmailIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20 15\\\" {...svgProps}>\\n      <g id=\\\"email-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M18.5,14.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h17a.945.945,0,0,1,1,1v12A.945.945,0,0,1,18.5,14.5Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          stroke-strokeLinecap=\\\"round\\\"\\n          stroke-strokeLinejoin=\\\"round\\\"\\n          d=\\\"M.7,1.8,9.4,7.9a1.36,1.36,0,0,0,1.5,0l8.3-6.1\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nEmailIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nEmailIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic email icon\",\"code\":\"import React from 'react';\\nimport EmailIcon from 'alys/EmailIcon';\\n\\n/** Basic email icon */\\nexport default function ExampleBasic() {\\n  return <EmailIcon />;\\n}\\n\"}]},{\"name\":\"EnlargeIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function MentorIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 18 18\\\" {...svgProps}>\\n      <path\\n        {...commonProps}\\n        id=\\\"path\\\"\\n        d=\\\"M16.5,17.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h15a.945.945,0,0,1,1,1v15A.945.945,0,0,1,16.5,17.5Z\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line\\\"\\n        y1=\\\"3.7\\\"\\n        x2=\\\"3.7\\\"\\n        transform=\\\"translate(10.5 3.9)\\\"\\n      />\\n      <path {...commonProps} id=\\\"path-2\\\" data-name=\\\"path\\\" d=\\\"M11.5,3.5h3v3\\\" />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-2\\\"\\n        data-name=\\\"line\\\"\\n        x1=\\\"3.7\\\"\\n        y2=\\\"3.8\\\"\\n        transform=\\\"translate(3.8 10.6)\\\"\\n      />\\n      <path {...commonProps} id=\\\"path-3\\\" data-name=\\\"path\\\" d=\\\"M6.5,14.5h-3v-3\\\" />\\n    </SvgIcon>\\n  );\\n}\\n\\nMentorIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nMentorIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic enlarge icon\",\"code\":\"import React from 'react';\\nimport EnlargeIcon from 'alys/EnlargeIcon';\\n\\n/** Basic enlarge icon */\\nexport default function ExampleBasic() {\\n  return <EnlargeIcon />;\\n}\\n\"}]},{\"name\":\"FiltersIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function FiltersIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17.175 18\\\" {...svgProps}>\\n      <g id=\\\"filters-icon\\\" transform=\\\"translate(-30 -58)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M-2,0H8.148\\\"\\n          transform=\\\"translate(32 60)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M0,0H4.026\\\"\\n          transform=\\\"translate(43.148 60)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M0,0H7.026\\\"\\n          transform=\\\"translate(40.148 67)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M-2,0H5.026\\\"\\n          transform=\\\"translate(32.148 67)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M-2,0H2\\\"\\n          transform=\\\"translate(32.148 74)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-6\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M0,0H10.026\\\"\\n          transform=\\\"translate(37.148 74)\\\"\\n        />\\n        <g {...commonProps} id=\\\"ellipse\\\" transform=\\\"translate(39.648 58)\\\">\\n          <circle stroke=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"1.5\\\" />\\n        </g>\\n        <g\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          transform=\\\"translate(36.648 65)\\\"\\n        >\\n          <circle stroke=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"1.5\\\" />\\n        </g>\\n        <g\\n          {...commonProps}\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          transform=\\\"translate(33.648 72)\\\"\\n        >\\n          <circle stroke=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"1.5\\\" />\\n        </g>\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nFiltersIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nFiltersIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic filters icon\",\"code\":\"import React from 'react';\\nimport FiltersIcon from 'alys/FiltersIcon';\\n\\n/** Basic filters icon */\\nexport default function ExampleBasic() {\\n  return <FiltersIcon />;\\n}\\n\"}]},{\"name\":\"HappyIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function HappyIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20 20\\\" {...svgProps}>\\n      <g id=\\\"happy-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          fill=\\\"none\\\"\\n          cx=\\\"9.5\\\"\\n          cy=\\\"9.5\\\"\\n          r=\\\"9.5\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(6.5 6.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(12.5 6.5)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M6.3,13.5a4.507,4.507,0,0,0,3.7,2,4.373,4.373,0,0,0,3.7-2\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nHappyIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nHappyIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic happy icon\",\"code\":\"import React from 'react';\\nimport HappyIcon from 'alys/HappyIcon';\\n\\n/** Basic happy icon */\\nexport default function ExampleBasic() {\\n  return <HappyIcon />;\\n}\\n\"}]},{\"name\":\"HomeIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function HomeIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20.4 19.6\\\" {...svgProps}>\\n      <g id=\\\"home-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M17.5,8.1h2.4L10.2.5.5,8.1h2\\\" />\\n        <path {...commonProps} id=\\\"path-2\\\" data-name=\\\"path\\\" d=\\\"M17.5,7.1\\\" />\\n        <path {...commonProps} id=\\\"path-3\\\" data-name=\\\"path\\\" d=\\\"M2.5,8.1\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M2.5,8.1v11h6v-6h3v6h6V8.1\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nHomeIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nHomeIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic home icon\",\"code\":\"import React from 'react';\\nimport HomeIcon from 'alys/HomeIcon';\\n\\n/** Basic home icon */\\nexport default function ExampleBasic() {\\n  return <HomeIcon />;\\n}\\n\"}]},{\"name\":\"Label\",\"description\":\"Caption for an interface item.\",\"props\":{\"text\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Text to display\"},\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Element ID the label is associated with\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { TYPE_FONT_SIZE_HEADING_6 } from '@/constants';\\n\\nconst StyledLabel = styled.label`\\n  font-weight: 500;\\n  text-transform: uppercase;\\n  font-size: ${TYPE_FONT_SIZE_HEADING_6};\\n`;\\n\\n/** Caption for an interface item. */\\nexport default function Label({ text, ...props }) {\\n  return <StyledLabel {...props}>{text}</StyledLabel>;\\n}\\n\\nLabel.propTypes = {\\n  /** Text to display */\\n  text: PropTypes.string.isRequired,\\n\\n  /** Element ID the label is associated with */\\n  htmlFor: PropTypes.string.isRequired,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Default label\",\"code\":\"import React from 'react';\\nimport Label from 'alys/Label';\\n\\n/** Default label */\\nexport default function ExampleBasic() {\\n  return <Label text=\\\"Example Basic\\\" htmlFor=\\\"\\\" />;\\n}\\n\"}]},{\"name\":\"LaptopIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function LaptopIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 23.217 18\\\" {...svgProps}>\\n      <g id=\\\"laptop-icon\\\" transform=\\\"translate(-0.041 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M21.1,12.5H2.1V1.4A.9.9,0,0,1,3,.5H20.2a.9.9,0,0,1,.9.9Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M21.1,12.5H2.1L.6,16.3a.881.881,0,0,0,.8,1.2H21.9a.881.881,0,0,0,.8-1.2Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"3\\\"\\n          transform=\\\"translate(10.1 15.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nLaptopIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nLaptopIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic laptop icon\",\"code\":\"import React from 'react';\\nimport LaptopIcon from 'alys/LaptopIcon';\\n\\n/** Basic laptop icon */\\nexport default function ExampleBasic() {\\n  return <LaptopIcon />;\\n}\\n\"}]},{\"name\":\"LikeIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function LikeIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21.552 18.875\\\" {...svgProps}>\\n      <g id=\\\"like-icon\\\" transform=\\\"translate(0.022 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M10.8,18.3h0C25.5,11.4,20,3.1,20,3.1A5.381,5.381,0,0,0,15.4.5a5.553,5.553,0,0,0-4.7,2.6A5.255,5.255,0,0,0,6.1.5,5.172,5.172,0,0,0,1.5,3.1S-4,11.4,10.8,18.3C10.7,18.4,10.8,18.4,10.8,18.3Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M15.4,2.6a3.159,3.159,0,0,1,3.2,3.2\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nLikeIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nLikeIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic like icon\",\"code\":\"import React from 'react';\\nimport LikeIcon from 'alys/LikeIcon';\\n\\n/** Basic like icon */\\nexport default function ExampleBasic() {\\n  return <LikeIcon />;\\n}\\n\"}]},{\"name\":\"List\",\"description\":\"Container for a set of list sub-items\",\"props\":{\"children\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"A set of List sub-item components\"},\"component\":{\"type\":{\"name\":\"union\",\"value\":[{\"name\":\"string\"},{\"name\":\"func\"},{\"name\":\"node\"}]},\"required\":false,\"description\":\"Component to use as a wrapper\",\"defaultValue\":{\"value\":\"'ul'\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nconst Ul = styled.ul`\\n  padding: 0;\\n  margin: 0;\\n`;\\n\\n/** Container for a set of list sub-items */\\nexport default function List({ component, children, ...props }) {\\n  let Component = component;\\n\\n  if (component === 'ul') {\\n    Component = Ul;\\n  }\\n\\n  return <Component {...props}>{children}</Component>;\\n}\\n\\nList.defaultProps = {\\n  component: 'ul',\\n};\\n\\nList.propTypes = {\\n  /** A set of List sub-item components */\\n  children: PropTypes.node.isRequired,\\n\\n  /** Component to use as a wrapper */\\n  component: PropTypes.oneOfType([\\n    PropTypes.string,\\n    PropTypes.func,\\n    PropTypes.node,\\n  ]),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"A list of basic <ListItem /> items\",\"code\":\"import React from 'react';\\nimport List from 'alys/List';\\nimport ListItem from 'alys/ListItem';\\n\\n/** A list of basic <ListItem /> items */\\nexport default function ExampleBasic() {\\n  return (\\n    <List>\\n      <ListItem>\\n        You will learn how to develop your career and make money as a\\n        professional photographer.\\n      </ListItem>\\n      <ListItem>\\n        You will learn how to take awesome photos that impress your family,\\n        friends and colleagues.\\n      </ListItem>\\n      <ListItem>\\n        You will learn how to compose images by following the essential rules of\\n        photography.\\n      </ListItem>\\n    </List>\\n  );\\n}\\n\"}]},{\"name\":\"ListItem\",\"description\":\"A sub-item of <List />\",\"props\":{\"children\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"Contents of the list item\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { COLOR_PRIMARY } from '@/constants';\\nimport Typography from '@/Typography';\\n\\nconst Disc = styled.div`\\n  min-width: 6px;\\n  max-width: 6px;\\n  height: 6px;\\n  background-color: ${COLOR_PRIMARY};\\n  border-radius: 50%;\\n  margin-right: 1.1875em;\\n`;\\n\\nconst Li = styled.li`\\n  display: flex;\\n  flex-direction: row;\\n  list-style: none;\\n  padding: 0 0 1.25em;\\n\\n  &:last-child {\\n    padding: 0;\\n  }\\n`;\\n\\n/** A sub-item of <List /> */\\nexport default function ListItem({ children, ...props }) {\\n  return (\\n    <Li {...props}>\\n      <Disc />\\n      <Typography variant=\\\"p\\\">{children}</Typography>\\n    </Li>\\n  );\\n}\\n\\nListItem.propTypes = {\\n  /** Contents of the list item */\\n  children: PropTypes.node.isRequired,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic list item\",\"code\":\"import React from 'react';\\nimport ListItem from 'alys/ListItem';\\n\\n/** Basic list item */\\nexport default function BasicExample() {\\n  return (\\n    <ListItem>\\n      You will learn how to develop your career and make money as a professional\\n      photographer.\\n    </ListItem>\\n  );\\n}\\n\"}]},{\"name\":\"ListItemPerson\",\"description\":\"\",\"props\":{\"active\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Sets the status of the person item\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"The name to display\"},\"detail\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"A detail about this item\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { COLOR_WHITE, COLOR_DARK } from '@/constants';\\nimport ActiveIndicator from '@/ActiveIndicator';\\nimport Avatar from '@/Avatar';\\nimport Typepography from '@/Typography';\\nimport OptionsIcon from '@/OptionsIcon';\\n\\nconst Wrapper = styled.div`\\n  box-sizing: border-box;\\n  background-color: ${COLOR_WHITE};\\n  color: ${COLOR_DARK};\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-around;\\n  align-items: center;\\n  min-height: 6.28125em;\\n  width: 100%;\\n  padding: 0.9375em;\\n\\n  @media (min-width: 34em) {\\n    padding: 0 1.875em;\\n  }\\n`;\\n\\nconst Text = styled.div`\\n  display: flex;\\n  flex: 0.86;\\n  flex-direction: column;\\n`;\\n\\nconst PrimaryText = styled.p`\\n  font-weight: 500;\\n  margin: 0 0 0.5em 0;\\n`;\\n\\nexport default function ListItemPerson({ active, name, detail }) {\\n  return (\\n    <Wrapper>\\n      <ActiveIndicator active={active} />\\n      <Avatar size=\\\"smaller\\\" />\\n      <Text>\\n        <PrimaryText>{name}</PrimaryText>\\n        <Typepography>{detail}</Typepography>\\n      </Text>\\n      <OptionsIcon />\\n    </Wrapper>\\n  );\\n}\\n\\nListItemPerson.defaultProps = {\\n  active: false,\\n};\\n\\nListItemPerson.propTypes = {\\n  /** Sets the status of the person item */\\n  active: PropTypes.bool,\\n\\n  /** The name to display */\\n  name: PropTypes.string.isRequired,\\n\\n  /** A detail about this item */\\n  detail: PropTypes.string.isRequired,\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic list item person\",\"code\":\"import React from 'react';\\nimport ListItemPerson from 'alys/ListItemPerson';\\n\\n/** Basic list item person */\\nexport default function BasicExample() {\\n  return <ListItemPerson name=\\\"Alys Zhu\\\" detail=\\\"Astronomer\\\" />;\\n}\\n\"}]},{\"name\":\"LiveIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function LiveIcon({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21 21\\\" {...svgProps}>\\n      <g id=\\\"live-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          id=\\\"ellipse\\\"\\n          fill=\\\"none\\\"\\n          stroke={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          strokeMiterlimit={10}\\n          cx=\\\"10\\\"\\n          cy=\\\"10\\\"\\n          r=\\\"10\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <circle\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"4.5\\\"\\n          cy=\\\"4.5\\\"\\n          r=\\\"4.5\\\"\\n          transform=\\\"translate(6 6)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nLiveIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nLiveIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic live icon\",\"code\":\"import React from 'react';\\nimport LiveIcon from 'alys/LiveIcon';\\n\\n/** Basic live icon */\\nexport default function ExampleBasic() {\\n  return <LiveIcon />;\\n}\\n\"}]},{\"name\":\"LocationIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function LocationIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17.015 20.071\\\" {...svgProps}>\\n      <g id=\\\"location-icon\\\" transform=\\\"translate(0.015 -0.029)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M13.8,14.5,9.2,19.3a.965.965,0,0,1-1.4,0L3.1,14.4l-.8-.9A7.78,7.78,0,0,1,.6,7.3,8,8,0,0,1,16.5,8.5a7.907,7.907,0,0,1-2.1,5.4Z\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"3\\\"\\n          cy=\\\"3\\\"\\n          r=\\\"3\\\"\\n          transform=\\\"translate(5.5 5.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nLocationIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nLocationIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic location icon\",\"code\":\"import React from 'react';\\nimport LocationIcon from 'alys/LocationIcon';\\n\\n/** Basic location icon */\\nexport default function ExampleBasic() {\\n  return <LocationIcon />;\\n}\\n\"}]},{\"name\":\"MentorIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function MentorIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21.7 19.4\\\" {...svgProps}>\\n      <g id=\\\"mentor-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M10.3,13.6v3l-5,2.3\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M16.1,13.6v3l5.1,2.3\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M15,14.1a5.2,5.2,0,0,0,3.5-4.9V4.6A4.055,4.055,0,0,0,14.4.5H12.2A4.14,4.14,0,0,0,8,4.6V9.2a5.2,5.2,0,0,0,3.5,4.9\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M4.6,11.3v2.4L.5,15.6\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M6.9.5H6.1A3.372,3.372,0,0,0,2.7,3.9V7.6a4.249,4.249,0,0,0,2.8,4\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nMentorIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nMentorIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic mentor icon\",\"code\":\"import React from 'react';\\nimport MentorIcon from 'alys/MentorIcon';\\n\\n/** Basic mentor icon */\\nexport default function ExampleBasic() {\\n  return <MentorIcon />;\\n}\\n\"}]},{\"name\":\"MicrophoneIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function MicrophoneIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 11.8 19.9\\\" {...svgProps}>\\n      <g id=\\\"microphone-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M5.9,13.3h0A3.543,3.543,0,0,1,2.4,9.8V4A3.543,3.543,0,0,1,5.9.5h0A3.543,3.543,0,0,1,9.4,4V9.8A3.418,3.418,0,0,1,5.9,13.3Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M.5,7.8v2a5.378,5.378,0,0,0,5.4,5.4h0a5.378,5.378,0,0,0,5.4-5.4v-2\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          y2=\\\"4\\\"\\n          transform=\\\"translate(5.9 15.4)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          x1=\\\"6\\\"\\n          transform=\\\"translate(2.9 19.4)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nMicrophoneIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nMicrophoneIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic microphone icon\",\"code\":\"import React from 'react';\\nimport MicrophoneIcon from 'alys/MicrophoneIcon';\\n\\n/** Basic microphone icon */\\nexport default function ExampleBasic() {\\n  return <MicrophoneIcon />;\\n}\\n\"}]},{\"name\":\"NewIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function NewIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 19\\\" {...svgProps}>\\n      <g id=\\\"new-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x1=\\\"18\\\"\\n          transform=\\\"translate(0.5 9.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          y1=\\\"18\\\"\\n          transform=\\\"translate(9.5 0.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nNewIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nNewIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic new icon\",\"code\":\"import React from 'react';\\nimport NewIcon from 'alys/NewIcon';\\n\\n/** Basic new icon */\\nexport default function ExampleBasic() {\\n  return <NewIcon />;\\n}\\n\"}]},{\"name\":\"OptionsIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function OptionsIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n  };\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 5\\\" {...svgProps}>\\n      <g id=\\\"options-icon\\\" transform=\\\"translate(-326 -201)\\\">\\n        <g {...commonProps} id=\\\"ellipse\\\" transform=\\\"translate(326 201)\\\">\\n          <circle stroke=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2.5\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2\\\" />\\n        </g>\\n        <g\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          transform=\\\"translate(333 201)\\\"\\n        >\\n          <circle stroke=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2.5\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2\\\" />\\n        </g>\\n        <g\\n          {...commonProps}\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          transform=\\\"translate(340 201)\\\"\\n        >\\n          <circle stroke=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2.5\\\" />\\n          <circle fill=\\\"none\\\" cx=\\\"2.5\\\" cy=\\\"2.5\\\" r=\\\"2\\\" />\\n        </g>\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nOptionsIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nOptionsIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic options icon\",\"code\":\"import React from 'react';\\nimport OptionsIcon from 'alys/OptionsIcon';\\n\\n/** Basic options icon */\\nexport default function ExampleBasic() {\\n  return <OptionsIcon />;\\n}\\n\"}]},{\"name\":\"PasswordIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PasswordIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17 19.988\\\" {...svgProps}>\\n      <g id=\\\"password-icon\\\" transform=\\\"translate(0 -0.011)\\\">\\n        <path\\n          {...commonProps}\\n          strokeLinecap=\\\"round\\\"\\n          id=\\\"path\\\"\\n          d=\\\"M15.5,19.5H1.5a.945.945,0,0,1-1-1V7.5a.945.945,0,0,1,1-1h14a.945.945,0,0,1,1,1v11A.945.945,0,0,1,15.5,19.5Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M4.5,7V4.7A4.179,4.179,0,0,1,7.7.6a3.957,3.957,0,0,1,4.8,3.9V7\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M10.2,11.9a1.685,1.685,0,0,0-1.7-1.7,1.628,1.628,0,0,0-1.7,1.7,1.709,1.709,0,0,0,.7,1.3v1.6a.945.945,0,0,0,1,1,.945.945,0,0,0,1-1V13.2A1.709,1.709,0,0,0,10.2,11.9Z\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPasswordIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPasswordIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic password icon\",\"code\":\"import React from 'react';\\nimport PasswordIcon from 'alys/PasswordIcon';\\n\\n/** Basic password icon */\\nexport default function ExampleBasic() {\\n  return <PasswordIcon />;\\n}\\n\"}]},{\"name\":\"PencilIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PencilIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19.25 19.306\\\" {...svgProps}>\\n      <g id=\\\"pencil-icon\\\" transform=\\\"translate(0 0.105)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M4.3,17.7l-3.8,1,1-3.9L15.8.6a.483.483,0,0,1,.7,0l2.1,2.1a.483.483,0,0,1,0,.7Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x2=\\\"2.8\\\"\\n          y2=\\\"2.8\\\"\\n          transform=\\\"translate(14.7 1.7)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPencilIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPencilIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic pencil icon\",\"code\":\"import React from 'react';\\nimport PencilIcon from 'alys/PencilIcon';\\n\\n/** Basic pencil icon */\\nexport default function ExampleBasic() {\\n  return <PencilIcon />;\\n}\\n\"}]},{\"name\":\"PhoneIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PhoneIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 13 22\\\" {...svgProps}>\\n      <g id=\\\"phone-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M11.5,21.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h10a.945.945,0,0,1,1,1v19A.945.945,0,0,1,11.5,21.5Z\\\"\\n        />\\n        <line {...commonProps} id=\\\"line\\\" x2=\\\"12\\\" transform=\\\"translate(1 4.5)\\\" />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"2\\\"\\n          transform=\\\"translate(5.5 2.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(6 18.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPhoneIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPhoneIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic phone icon\",\"code\":\"import React from 'react';\\nimport PhoneIcon from 'alys/PhoneIcon';\\n\\n/** Basic phone icon */\\nexport default function ExampleBasic() {\\n  return <PhoneIcon />;\\n}\\n\"}]},{\"name\":\"PhoneXIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PhoneXIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 13 22\\\" {...svgProps}>\\n      <g id=\\\"phone-x-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M6.5,1.5H8a.908.908,0,0,0,.7-.3L9.4.5H3.6l.7.7a.908.908,0,0,0,.7.3Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M11.5,21.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h10a.945.945,0,0,1,1,1v19A.945.945,0,0,1,11.5,21.5Z\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPhoneXIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPhoneXIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic phone X icon\",\"code\":\"import React from 'react';\\nimport PhoneXIcon from 'alys/PhoneXIcon';\\n\\n/** Basic phone X icon */\\nexport default function ExampleBasic() {\\n  return <PhoneXIcon />;\\n}\\n\"}]},{\"name\":\"Pill\",\"description\":\"Text inside a small container\",\"props\":{\"text\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Text to display\"},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'secondary'\",\"computed\":false}]},\"required\":false,\"description\":\"Background color of text wrapper\",\"defaultValue\":{\"value\":\"'primary'\",\"computed\":false}},\"add\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true`, a `NewIcon` will be shown and `text` is ignored\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { TYPE_FONT_SIZE_HEADING_6, COLOR_WHITE, colors } from '@/constants';\\nimport NewIcon from '@/NewIcon';\\n\\nconst Wrapper = styled.div`\\n  display: inline-block;\\n  font-size: ${TYPE_FONT_SIZE_HEADING_6}px;\\n  font-weight: 500;\\n  padding: ${({ add }) => (add ? '0.5em' : '0.5em 0.75em')};\\n  border-radius: 0.375em;\\n  background-color: ${({ color }) => colors[color]};\\n  color: ${COLOR_WHITE};\\n  text-transform: uppercase;\\n`;\\n\\nconst AddIcon = styled(NewIcon).attrs(() => ({\\n  fontSize: `${TYPE_FONT_SIZE_HEADING_6}px`,\\n}))`\\n  display: block;\\n\\n  && line {\\n    stroke: ${COLOR_WHITE};\\n  }\\n`;\\n\\n/** Text inside a small container */\\nexport default function Pill({ text, color, add }) {\\n  return (\\n    <Wrapper color={color} add={add}>\\n      {add ? <AddIcon /> : text}\\n    </Wrapper>\\n  );\\n}\\n\\nPill.defaultProps = {\\n  color: 'primary',\\n  add: false,\\n};\\n\\nPill.propTypes = {\\n  /** Text to display */\\n  text: PropTypes.string,\\n\\n  /** Background color of text wrapper */\\n  color: PropTypes.oneOf(['primary', 'secondary']),\\n\\n  /** If set to `true`, a `NewIcon` will be shown and `text` is ignored */\\n  add: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleAdd\",\"description\":\"Add pill\",\"code\":\"import React from 'react';\\nimport Pill from 'alys/Pill';\\n\\n/** Add pill */\\nexport default function ExampleAdd() {\\n  return <Pill add />;\\n}\\n\"},{\"name\":\"ExampleAddSecondary\",\"description\":\"Secondary add pill\",\"code\":\"import React from 'react';\\nimport Pill from 'alys/Pill';\\n\\n/** Secondary add pill */\\nexport default function ExampleAdd() {\\n  return <Pill add color=\\\"secondary\\\" />;\\n}\\n\"},{\"name\":\"ExampleBasic\",\"description\":\"Basic pill\",\"code\":\"import React from 'react';\\nimport Pill from 'alys/Pill';\\n\\n/** Basic pill */\\nexport default function ExampleBasic() {\\n  return <Pill text=\\\"basic\\\" />;\\n}\\n\"},{\"name\":\"ExampleSecondary\",\"description\":\"Secondary pill\",\"code\":\"import React from 'react';\\nimport Pill from 'alys/Pill';\\n\\n/** Secondary pill */\\nexport default function ExampleSecondary() {\\n  return <Pill text=\\\"Secondary\\\" color=\\\"secondary\\\" />;\\n}\\n\"}]},{\"name\":\"PreviewIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function PreviewIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 19\\\" {...svgProps}>\\n      <g id=\\\"preview-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M.5,4.5v-3a.945.945,0,0,1,1-1h3\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M14.5.5h3a.945.945,0,0,1,1,1v3\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M18.5,14.5v3a.945.945,0,0,1-1,1h-3\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M4.5,18.5h-3a.945.945,0,0,1-1-1v-3\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x2=\\\"6\\\"\\n          transform=\\\"translate(6.5 9.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          y2=\\\"6\\\"\\n          transform=\\\"translate(9.5 6.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nPreviewIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nPreviewIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic preview icon\",\"code\":\"import React from 'react';\\nimport PreviewIcon from 'alys/PreviewIcon';\\n\\n/** Basic preview icon */\\nexport default function ExampleBasic() {\\n  return <PreviewIcon />;\\n}\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"A custom progress bar.\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Bar width\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Bar height\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport { getWidthAsPercentOfTotalWidth } from '@utils/percent-utils';\\nimport { styleLengths } from '@utils/string-utils';\\n\\nconst ProgressBarWrapper = styled.div`\\n  border: solid 1px lightgray;\\n  width: ${({ width }) => styleLengths(width)};\\n`;\\n\\nconst ProgressBarValue = styled.div`\\n  width: ${({ percent, width }) =>\\n    styleLengths(getWidthAsPercentOfTotalWidth(percent, width))};\\n  height: ${({ height }) => styleLengths(height)};\\n  background-color: ${({ percent }) => {\\n    if (percent === 100) return 'green';\\n\\n    return percent > 50 ? 'lightgreen' : 'red';\\n  }};\\n`;\\n\\n/** A custom progress bar. */\\nexport default function ProgressBar({ width, height, percent }) {\\n  return (\\n    <ProgressBarWrapper width={width}>\\n      <ProgressBarValue width={width} height={height} percent={percent} />\\n    </ProgressBarWrapper>\\n  );\\n}\\n\\nProgressBar.defaultProps = {\\n  height: 5,\\n};\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number,\\n};\\n\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'alys/ProgressBar';\\n\\n/** 100% progress */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} />;\\n}\\n\"},{\"name\":\"Example10Percent\",\"description\":\"10% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'alys/ProgressBar';\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />;\\n}\\n\"},{\"name\":\"Example20pxHeight\",\"description\":\"20px height and 100% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'alys/ProgressBar';\\n\\n/** 20px height and 100% progress */\\nexport default function Example20pxHeight() {\\n  return <ProgressBar percent={100} width={150} height={20} />;\\n}\\n\"},{\"name\":\"Example70Percent\",\"description\":\"70% progress\",\"code\":\"import React from 'react';\\nimport ProgressBar from 'alys/ProgressBar';\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />;\\n}\\n\"}]},{\"name\":\"Rating\",\"description\":\"Show a rating from 0 to 5\",\"props\":{\"value\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"0\",\"computed\":false},{\"value\":\"1\",\"computed\":false},{\"value\":\"2\",\"computed\":false},{\"value\":\"3\",\"computed\":false},{\"value\":\"4\",\"computed\":false},{\"value\":\"5\",\"computed\":false}]},\"required\":true,\"description\":\"Amount of filled stars\"},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":false,\"description\":\"Callback when rating value changes. Must have two params for the `event`\\nobject and the `value`\"},\"static\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"If set to `true` the <Rating /> component value cannot be changed\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'default'\",\"computed\":false},{\"value\":\"'secondary'\",\"computed\":false}]},\"required\":false,\"description\":\"Fill color of <StarIcon /> items\",\"defaultValue\":{\"value\":\"'default'\",\"computed\":false}}},\"code\":\"import React, { Component } from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled from 'styled-components';\\n\\nimport StarIcon from '@common/StarIcon';\\n\\nconst Wrapper = styled.div`\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  max-width: 5em;\\n`;\\n\\nconst ClickBox = styled.div`\\n  width: 100%;\\n  cursor: ${(props) => (props.static ? 'default' : 'pointer')};\\n`;\\n\\n/** Show a rating from 0 to 5 */\\nexport default class Rating extends Component {\\n  static defaultProps = {\\n    static: false,\\n    color: 'default',\\n  };\\n\\n  static propTypes = {\\n    /** Amount of filled stars */\\n    value: PropTypes.oneOf([0, 1, 2, 3, 4, 5]).isRequired,\\n\\n    /**\\n     * Callback when rating value changes. Must have two params for the `event`\\n     * object and the `value`\\n     */\\n    onChange: PropTypes.func,\\n\\n    /** If set to `true` the <Rating /> component value cannot be changed */\\n    static: PropTypes.bool,\\n\\n    /** Fill color of <StarIcon /> items */\\n    color: PropTypes.oneOf(['default', 'secondary']),\\n  };\\n\\n  state = {\\n    value: 0,\\n    tempValue: NaN,\\n  };\\n\\n  _maxvalue = 5;\\n\\n  componentDidMount() {\\n    this.setState({ value: this.props.value });\\n  }\\n\\n  render() {\\n    return <Wrapper>{this._generateStars()}</Wrapper>;\\n  }\\n\\n  _onStarClick = (value) => (event) => {\\n    const { onChange } = this.props;\\n\\n    if (this.props.static) {\\n      return;\\n    }\\n\\n    if (onChange) {\\n      onChange(event, value);\\n    }\\n\\n    this.setState({\\n      tempValue: value,\\n      value,\\n    });\\n  };\\n\\n  _onStarMouseOver = (value) => () => {\\n    if (this.props.static) {\\n      return;\\n    }\\n\\n    this.setState(({ value: prevValue }) => ({\\n      tempValue: prevValue,\\n      value,\\n    }));\\n  };\\n\\n  _onStarMouseOut = () => {\\n    if (this.props.static) {\\n      return;\\n    }\\n\\n    this.setState(({ tempValue: prevTempValue }) => ({\\n      value: prevTempValue,\\n      tempValue: NaN,\\n    }));\\n  };\\n\\n  _generateStars = () => {\\n    const stars = [];\\n\\n    for (let i = 1; i <= this._maxvalue; i += 1) {\\n      stars.push(\\n        <ClickBox\\n          key={`ratingstar${i}`}\\n          static={this.props.static}\\n          onClick={this._onStarClick(i)}\\n          onMouseOver={this._onStarMouseOver(i)}\\n          onMouseOut={this._onStarMouseOut}\\n        >\\n          <StarIcon\\n            fontSize=\\\"0.77875em\\\"\\n            filled={i <= this.state.value}\\n            color={this.props.color}\\n          />\\n        </ClickBox>,\\n      );\\n    }\\n\\n    return stars;\\n  };\\n}\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic rating with intial value of 3\",\"code\":\"import React, { PureComponent } from 'react';\\nimport Rating from 'alys/Rating';\\n\\n/** Basic rating with intial value of 3 */\\nexport default class ExampleBasic extends PureComponent {\\n  state = {\\n    value: 3,\\n  };\\n\\n  render() {\\n    return (\\n      <React.Fragment>\\n        <p>\\n          Rating value: <strong>{this.state.value}</strong>\\n        </p>\\n\\n        <Rating value={this.state.value} onChange={this._handleOnChange} />\\n      </React.Fragment>\\n    );\\n  }\\n\\n  _handleOnChange = (_event, value) => this.setState({ value });\\n}\\n\"},{\"name\":\"ExampleSecondary\",\"description\":\"Rating with secondary color and intial value of 3\",\"code\":\"import React, { PureComponent } from 'react';\\nimport Rating from 'alys/Rating';\\n\\n/** Rating with secondary color and intial value of 3 */\\nexport default class ExampleSecondary extends PureComponent {\\n  state = {\\n    value: 3,\\n  };\\n\\n  render() {\\n    return (\\n      <React.Fragment>\\n        <p>\\n          Rating value: <strong>{this.state.value}</strong>\\n        </p>\\n\\n        <Rating\\n          value={this.state.value}\\n          onChange={this._handleOnChange}\\n          color=\\\"secondary\\\"\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n\\n  _handleOnChange = (_event, value) => this.setState({ value });\\n}\\n\"},{\"name\":\"ExampleStatic\",\"description\":\"Static rating with value of 3\",\"code\":\"import React from 'react';\\nimport Rating from 'alys/Rating';\\n\\n/** Static rating with value of 3 */\\nexport default function ExampleStatic() {\\n  return <Rating value={3} static />;\\n}\\n\"}]},{\"name\":\"RegisterIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function RegisterIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19.25 19.306\\\" {...svgProps}>\\n      <g id=\\\"register-icon\\\" transform=\\\"translate(0 0.105)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          d=\\\"M4.3,17.7l-3.8,1,1-3.9L15.8.6a.483.483,0,0,1,.7,0l2.1,2.1a.483.483,0,0,1,0,.7Z\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x2=\\\"2.8\\\"\\n          y2=\\\"2.8\\\"\\n          transform=\\\"translate(14.7 1.7)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M1.8,9.4V1.9H9.3\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M16.8,10.4v7.5H9.3\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nRegisterIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nRegisterIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic register icon\",\"code\":\"import React from 'react';\\nimport RegisterIcon from 'alys/RegisterIcon';\\n\\n/** Basic register icon */\\nexport default function ExampleBasic() {\\n  return <RegisterIcon />;\\n}\\n\"}]},{\"name\":\"RemoveMentorIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function RemoveMentorIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 23.7 23.5\\\" {...svgProps}>\\n      <g id=\\\"remove-mentor-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path id=\\\"path\\\" {...commonProps} d=\\\"M5.5,13.6v3l-5,2.3\\\" />\\n        <path id=\\\"path-2\\\" data-name=\\\"path\\\" {...commonProps} d=\\\"M13.4,17.5\\\" />\\n        <path id=\\\"path-3\\\" data-name=\\\"path\\\" {...commonProps} d=\\\"M13.1,17.4\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M11.3,13.6v3l1.8.8\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-5\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M10.2,14.1a5.2,5.2,0,0,0,3.5-4.9V4.6A4.055,4.055,0,0,0,9.6.5H7.3A4.055,4.055,0,0,0,3.2,4.6V9.2a5.2,5.2,0,0,0,3.5,4.9\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"5\\\"\\n          cy=\\\"5\\\"\\n          r=\\\"5\\\"\\n          transform=\\\"translate(13.2 13)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          x1=\\\"3.4\\\"\\n          y2=\\\"3.4\\\"\\n          transform=\\\"translate(16.5 16.3)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          x1=\\\"3.4\\\"\\n          y1=\\\"3.4\\\"\\n          transform=\\\"translate(16.5 16.3)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nRemoveMentorIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nRemoveMentorIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic remove mentor icon\",\"code\":\"import React from 'react';\\nimport RemoveMentorIcon from 'alys/RemoveMentorIcon';\\n\\n/** Basic remove mentor icon */\\nexport default function ExampleBasic() {\\n  return <RemoveMentorIcon />;\\n}\\n\"}]},{\"name\":\"SadIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function SadIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 20 20\\\" {...svgProps}>\\n      <g id=\\\"sad-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          fill=\\\"none\\\"\\n          cx=\\\"9.5\\\"\\n          cy=\\\"9.5\\\"\\n          r=\\\"9.5\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-2\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(6.5 6.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse-3\\\"\\n          data-name=\\\"ellipse\\\"\\n          fill={iconDark(\\n            dark,\\n            COLOR_WHITE,\\n            color ? colors[color] : 'currentColor',\\n          )}\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(12.5 6.5)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          fill=\\\"none\\\"\\n          d=\\\"M13.7,14.5a4.507,4.507,0,0,0-3.7-2,4.373,4.373,0,0,0-3.7,2\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nSadIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nSadIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic sad icon\",\"code\":\"import React from 'react';\\nimport SadIcon from 'alys/SadIcon';\\n\\n/** Basic sad icon */\\nexport default function ExampleBasic() {\\n  return <SadIcon />;\\n}\\n\"}]},{\"name\":\"SearchIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function SearchIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 18.907 18.507\\\" {...svgProps}>\\n      <g id=\\\"search-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          cx=\\\"8\\\"\\n          cy=\\\"8\\\"\\n          r=\\\"8\\\"\\n          transform=\\\"translate(0.5 0.5)\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          strokeLinejoin=\\\"round\\\"\\n          x2=\\\"3.5\\\"\\n          y2=\\\"3.5\\\"\\n          transform=\\\"translate(14.7 14.3)\\\"\\n        />\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M9,2.8a5.335,5.335,0,0,1,5.3,5.3\\\" />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nSearchIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nSearchIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic search icon\",\"code\":\"import React from 'react';\\nimport SearchIcon from 'alys/SearchIcon';\\n\\n/** Basic search icon */\\nexport default function ExampleBasic() {\\n  return <SearchIcon />;\\n}\\n\"}]},{\"name\":\"SettingsIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function Settings({ dark, color, ...svgProps }) {\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19.875 19.98\\\" {...svgProps}>\\n      <path\\n        id=\\\"path\\\"\\n        fill=\\\"none\\\"\\n        stroke={iconDark(\\n          dark,\\n          COLOR_WHITE,\\n          color ? colors[color] : 'currentColor',\\n        )}\\n        strokeLinecap=\\\"round\\\"\\n        strokeLinejoin=\\\"round\\\"\\n        strokeMiterlimit={10}\\n        d=\\\"M18.7,15.7,11.1,8.1A4.638,4.638,0,0,0,11.5,6,5.549,5.549,0,0,0,6,.5a4.618,4.618,0,0,0-2.6.7L7.3,5.1,5.1,7.3,1.2,3.4A4.618,4.618,0,0,0,.5,6,5.549,5.549,0,0,0,6,11.5a5.222,5.222,0,0,0,2.1-.4l7.6,7.6a2.175,2.175,0,0,0,3,0h0A2,2,0,0,0,18.7,15.7Z\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nSettings.defaultProps = {\\n  dark: false,\\n};\\n\\nSettings.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic settings icon\",\"code\":\"import React from 'react';\\nimport SettingsIcon from 'alys/SettingsIcon';\\n\\n/** Basic settings icon */\\nexport default function ExampleBasic() {\\n  return <SettingsIcon />;\\n}\\n\"}]},{\"name\":\"SignOutIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function SignOutIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 21 20.9\\\" {...svgProps}>\\n      <g id=\\\"sign-out-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path {...commonProps} id=\\\"path\\\" d=\\\"M15.5,5.3,10.7.5,5.8,5.3\\\" />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M2.8,4.1A9.4,9.4,0,0,0,.5,10.4a10,10,0,0,0,20,0,9.4,9.4,0,0,0-2.3-6.3\\\"\\n        />\\n        <line\\n          {...commonProps}\\n          id=\\\"line\\\"\\n          y2=\\\"11\\\"\\n          transform=\\\"translate(10.7 0.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nSignOutIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nSignOutIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic sign out icon\",\"code\":\"import React from 'react';\\nimport SignOutIcon from 'alys/SignOutIcon';\\n\\n/** Basic sign out icon */\\nexport default function ExampleBasic() {\\n  return <SignOutIcon />;\\n}\\n\"}]},{\"name\":\"SpeakerIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function SpeakerIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeLinejoin: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 18.5 16.179\\\" {...svgProps}>\\n      <g id=\\\"speaker-icon\\\" transform=\\\"translate(0 0.016)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M4.8,11.3H3.7A3.159,3.159,0,0,1,.5,8.1h0A3.159,3.159,0,0,1,3.7,4.9H4.8Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M10.6,15.4,4.8,11.2V4.9L10.6.7a1.081,1.081,0,0,1,1.7.9v13A1.045,1.045,0,0,1,10.6,15.4Z\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M14.4,11a4.373,4.373,0,0,0,0-5.8\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-4\\\"\\n          data-name=\\\"path\\\"\\n          d=\\\"M16.2,12.9A7.492,7.492,0,0,0,18,8.1a7.492,7.492,0,0,0-1.8-4.8\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nSpeakerIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nSpeakerIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic speaker icon\",\"code\":\"import React from 'react';\\nimport SpeakerIcon from 'alys/SpeakerIcon';\\n\\n/** Basic speaker icon */\\nexport default function ExampleBasic() {\\n  return <SpeakerIcon />;\\n}\\n\"}]},{\"name\":\"StreamIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function StreamIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 23 16.575\\\" {...svgProps}>\\n      <g id=\\\"stream-icon\\\" transform=\\\"translate(0 -0.025)\\\">\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(11 15.1)\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M6.9,12.4a6.58,6.58,0,0,1,9.2,0\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-2\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M4.2,8.6a10.322,10.322,0,0,1,14.7,0\\\"\\n        />\\n        <path\\n          {...commonProps}\\n          id=\\\"path-3\\\"\\n          data-name=\\\"path\\\"\\n          strokeLinecap=\\\"round\\\"\\n          d=\\\"M.5,5.1a15.512,15.512,0,0,1,22,0\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nStreamIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nStreamIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic stream icon\",\"code\":\"import React from 'react';\\nimport StreamIcon from 'alys/StreamIcon';\\n\\n/** Basic stream icon */\\nexport default function ExampleBasic() {\\n  return <StreamIcon />;\\n}\\n\"}]},{\"name\":\"SvgIcon\",\"description\":\"Renders SVG paths.\",\"props\":{\"children\":{\"type\":{\"name\":\"node\"},\"required\":true,\"description\":\"SVG paths to render\"},\"fontSize\":{\"type\":{\"name\":\"union\",\"value\":[{\"name\":\"string\"},{\"name\":\"number\"}]},\"required\":false,\"description\":\"Size of the icon\",\"defaultValue\":{\"value\":\"24\",\"computed\":false}},\"viewBox\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Defines the position and dimension for the content of the <svg> element\",\"defaultValue\":{\"value\":\"'0 0 24 24'\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { styleLengths } from '@utils/string-utils';\\n\\n/** Renders SVG paths. */\\nexport default function SvgIcon({ fontSize, viewBox, children, ...svgProps }) {\\n  return (\\n    <svg\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      color=\\\"inherit\\\"\\n      viewBox={viewBox}\\n      focusable={false}\\n      width={styleLengths(fontSize)}\\n      height={styleLengths(fontSize)}\\n      {...svgProps}\\n    >\\n      {children}\\n    </svg>\\n  );\\n}\\n\\nSvgIcon.defaultProps = {\\n  fontSize: 24,\\n  viewBox: '0 0 24 24',\\n};\\n\\nSvgIcon.propTypes = {\\n  /** SVG paths to render */\\n  children: PropTypes.node.isRequired,\\n\\n  /** Size of the icon */\\n  fontSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\\n\\n  /** Defines the position and dimension for the content of the <svg> element */\\n  viewBox: PropTypes.string,\\n};\\n\",\"examples\":[{\"name\":\"ExampleEyeIcon\",\"description\":\"Basic EyeIcon component\",\"code\":\"import React from 'react';\\nimport SvgIcon from 'alys/SvgIcon';\\n\\n/** Basic EyeIcon component */\\nexport default function ExampleEyeIcon({ dark, ...svgProps }) {\\n  return (\\n    <SvgIcon {...svgProps}>\\n      <g\\n        transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\"\\n        fill={dark ? '#fff' : 'currentColor'}\\n      >\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\"},{\"name\":\"ExampleEyeIcon4em\",\"description\":\"EyeIcon component with font size of 4em\",\"code\":\"import React from 'react';\\nimport ExampleEyeIcon from './ExampleEyeIcon';\\n\\n/** EyeIcon component with font size of 4em */\\nexport default function ExampleEyeIcon4em() {\\n  return <ExampleEyeIcon fontSize=\\\"4em\\\" />;\\n}\\n\"},{\"name\":\"ExampleEyeIcon64px\",\"description\":\"EyeIcon component with font size of 64px\",\"code\":\"import React from 'react';\\nimport ExampleEyeIcon from './ExampleEyeIcon';\\n\\n/** EyeIcon component with font size of 64px */\\nexport default function ExampleEyeIcon64px() {\\n  return <ExampleEyeIcon fontSize={64} />;\\n}\\n\"}]},{\"name\":\"TabletIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function TabletIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 17 22\\\" {...svgProps}>\\n      <g id=\\\"tablet-icon\\\" transform=\\\"translate(0 0)\\\">\\n        <path\\n          {...commonProps}\\n          id=\\\"path\\\"\\n          d=\\\"M15.5,21.5H1.5a.945.945,0,0,1-1-1V1.5a.945.945,0,0,1,1-1h14a.945.945,0,0,1,1,1v19A.945.945,0,0,1,15.5,21.5Z\\\"\\n        />\\n        <line {...commonProps} id=\\\"line\\\" x2=\\\"16\\\" transform=\\\"translate(1 4.5)\\\" />\\n        <line\\n          {...commonProps}\\n          id=\\\"line-2\\\"\\n          data-name=\\\"line\\\"\\n          strokeLinecap=\\\"round\\\"\\n          x2=\\\"2\\\"\\n          transform=\\\"translate(7.5 2.5)\\\"\\n        />\\n        <circle\\n          {...commonProps}\\n          id=\\\"ellipse\\\"\\n          cx=\\\"0.5\\\"\\n          cy=\\\"0.5\\\"\\n          r=\\\"0.5\\\"\\n          transform=\\\"translate(8 18.5)\\\"\\n        />\\n      </g>\\n    </SvgIcon>\\n  );\\n}\\n\\nTabletIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nTabletIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic tablet icon\",\"code\":\"import React from 'react';\\nimport TabletIcon from 'alys/TabletIcon';\\n\\n/** Basic tablet icon */\\nexport default function ExampleBasic() {\\n  return <TabletIcon />;\\n}\\n\"}]},{\"name\":\"TrashIcon\",\"description\":\"See <SvgIcon /> for more prop descriptions.\",\"props\":{\"dark\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to `true` to make icon viewable in dark backgrounds\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"color\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'primary'\",\"computed\":false},{\"value\":\"'dark'\",\"computed\":false}]},\"required\":false,\"description\":\"Main color of icon when background is light.\"}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nimport { colors, COLOR_WHITE } from '@/constants';\\nimport { iconDark } from '@utils/icon-utils';\\nimport SvgIcon from '@/SvgIcon';\\n\\n/** See <SvgIcon /> for more prop descriptions. */\\nexport default function TrashIcon({ dark, color, ...svgProps }) {\\n  const commonProps = {\\n    fill: 'none',\\n    stroke: iconDark(dark, COLOR_WHITE, color ? colors[color] : 'currentColor'),\\n    strokeLinecap: 'round',\\n    strokeMiterlimit: 10,\\n  };\\n\\n  return (\\n    <SvgIcon viewBox=\\\"0 0 19 19\\\" {...svgProps}>\\n      <path\\n        {...commonProps}\\n        id=\\\"path\\\"\\n        d=\\\"M16.5,2.5l-1,15a.945.945,0,0,1-1,1H4.5a.945.945,0,0,1-1-1l-1-15\\\"\\n      />\\n      <line id=\\\"line\\\" {...commonProps} x2=\\\"18\\\" transform=\\\"translate(0.5 2.5)\\\" />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-2\\\"\\n        data-name=\\\"line\\\"\\n        x2=\\\"10\\\"\\n        transform=\\\"translate(4.5 0.5)\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-3\\\"\\n        data-name=\\\"line\\\"\\n        y2=\\\"10\\\"\\n        transform=\\\"translate(9.5 5.5)\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-4\\\"\\n        data-name=\\\"line\\\"\\n        y2=\\\"10\\\"\\n        transform=\\\"translate(6.5 5.5)\\\"\\n      />\\n      <line\\n        {...commonProps}\\n        id=\\\"line-5\\\"\\n        data-name=\\\"line\\\"\\n        y2=\\\"10\\\"\\n        transform=\\\"translate(12.5 5.5)\\\"\\n      />\\n    </SvgIcon>\\n  );\\n}\\n\\nTrashIcon.defaultProps = {\\n  dark: false,\\n};\\n\\nTrashIcon.propTypes = {\\n  /** Set to `true` to make icon viewable in dark backgrounds */\\n  dark: PropTypes.bool,\\n\\n  /** Main color of icon when background is light. */\\n  color: PropTypes.oneOf(['primary', 'dark']),\\n};\\n\",\"examples\":[{\"name\":\"ExampleBasic\",\"description\":\"Basic trash icon\",\"code\":\"import React from 'react';\\nimport TrashIcon from 'alys/TrashIcon';\\n\\n/** Basic trash icon */\\nexport default function ExampleBasic() {\\n  return <TrashIcon />;\\n}\\n\"}]},{\"name\":\"Typography\",\"description\":\"Styled text using pre-set type scales and sizes\",\"props\":{\"children\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Text to display\"},\"variant\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"'h1'\",\"computed\":false},{\"value\":\"'h2'\",\"computed\":false},{\"value\":\"'h3'\",\"computed\":false},{\"value\":\"'h4'\",\"computed\":false},{\"value\":\"'h5'\",\"computed\":false},{\"value\":\"'h6'\",\"computed\":false},{\"value\":\"'p'\",\"computed\":false}]},\"required\":false,\"description\":\"Determines the styles of the text\",\"defaultValue\":{\"value\":\"'p'\",\"computed\":false}},\"gutterBottom\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Add a margin at the bottom\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport styled, { css } from 'styled-components';\\n\\nimport { fontSizes, lineHeights } from '@/constants';\\nimport { styleLengths } from '@utils/string-utils';\\n\\nconst pStyles = css`\\n  font-weight: 400;\\n`;\\nconst builder = (variant) => styled(variant)`\\n  color: inherit;\\n  margin: 0 0\\n    ${({ gutterBottom }) =>\\n      gutterBottom ? styleLengths(lineHeights[variant] * 12) : 0};\\n  font-weight: 500;\\n  font-size: ${styleLengths(fontSizes[variant])};\\n  line-height: ${lineHeights[variant]};\\n  ${variant === 'p' && pStyles}\\n`;\\n\\n/** Styled text using pre-set type scales and sizes */\\nexport default function Typography({ variant, children, ...props }) {\\n  const Component = builder(variant);\\n\\n  return <Component {...props}>{children}</Component>;\\n}\\n\\nTypography.defaultProps = {\\n  variant: 'p',\\n  gutterBottom: false,\\n};\\n\\nTypography.propTypes = {\\n  /** Text to display */\\n  children: PropTypes.string.isRequired,\\n\\n  /** Determines the styles of the text */\\n  variant: PropTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p']),\\n\\n  /** Add a margin at the bottom */\\n  gutterBottom: PropTypes.bool,\\n};\\n\",\"examples\":[{\"name\":\"ExampleHeading1\",\"description\":\"Heading 1\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 1 */\\nexport default function ExampleHeading1() {\\n  return <Typography variant=\\\"h1\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading2\",\"description\":\"Heading 2\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 2 */\\nexport default function ExampleHeading2() {\\n  return <Typography variant=\\\"h2\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading3\",\"description\":\"Heading 3\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 3 */\\nexport default function ExampleHeading3() {\\n  return <Typography variant=\\\"h3\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading4\",\"description\":\"Heading 4\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 4 */\\nexport default function ExampleHeading4() {\\n  return <Typography variant=\\\"h4\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading5\",\"description\":\"Heading 5\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 5 */\\nexport default function ExampleHeading5() {\\n  return <Typography variant=\\\"h5\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleHeading6\",\"description\":\"Heading 6\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Heading 6 */\\nexport default function ExampleHeading6() {\\n  return <Typography variant=\\\"h6\\\">Wintermute</Typography>;\\n}\\n\"},{\"name\":\"ExampleParagraph\",\"description\":\"Paragraph\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Paragraph */\\nexport default function ExampleParagraph() {\\n  return (\\n    <Typography variant=\\\"p\\\">\\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac\\n      pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\\n      pellentesque.\\n    </Typography>\\n  );\\n}\\n\"},{\"name\":\"ExampleParagraphs\",\"description\":\"Paragraphs\",\"code\":\"import React from 'react';\\nimport Typography from 'alys/Typography';\\n\\n/** Paragraphs */\\nexport default function ExampleParagraphs() {\\n  return (\\n    <React.Fragment>\\n      <Typography variant=\\\"h1\\\" gutterBottom>\\n        Wintermute\\n      </Typography>\\n\\n      <Typography gutterBottom>\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac\\n        pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\\n        pellentesque.Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n        Sed ac pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed\\n        ac pellentesque.\\n      </Typography>\\n\\n      <Typography>\\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac\\n        pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\\n        pellentesque.Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\n        Sed ac pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed\\n        ac pellentesque.\\n      </Typography>\\n    </React.Fragment>\\n  );\\n}\\n\"}]}];\n"],"sourceRoot":""}