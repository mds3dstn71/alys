{"version":3,"sources":["examples/Button/ExampleDefault.jsx","components/constants.js","components/Button/index.js","components/Button/Button.jsx"],"names":["_react","default","createElement","_Button","text","_interopRequireDefault","__webpack_require__","colors","primary","primaryLight","primaryFill","error","secondary","dark","grayBlue","whiteBlue","white","gray","fontSizes","h1","h2","h3","h4","h5","h6","p","lineHeights","avatarSizes","smaller","small","type","_styledComponents","_interopRequireWildcard","_constants","_stringUtils","disabledStyles","css","COLOR_GRAY_BLUE","buttonIcon","_ref","icon","_ref$type","_ref$iconOnly","iconOnly","Icon","attrs","withConfig","displayName","componentId","BasicButton","styled","div","_ref2","children","role","_ref3","COLOR_PRIMARY","_ref4","COLOR_WHITE","styleLengths","TYPE_FONT_SIZE_HEADING_6","_ref5","disabled","IconOnlyButton","_ref6","WideButton","_ref7","GRADIENT_PRIMARY","concat","_ref8","darkMode","theme","_ref9","block","_ref10","Button","_ref11","basic","props","_objectWithoutProperties","onClick","undefined","Object","assign","defaultProps","color"],"mappings":"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","file":"static/js/22.65e74ff5.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'alys/Button';\n\n/** Default button */\nexport default function ExampleDefault() {\n  return <Button text=\"Example default\" />;\n}\n","export const COLOR_PRIMARY = '#5887F9';\nexport const COLOR_PRIMARY_LIGHT = '#60C3FF';\nexport const COLOR_PRIMARY_FILL = '#dce9ff';\nexport const COLOR_ERROR = '#FC5F6B';\nexport const COLOR_WHITE_ALPHA30 = 'rgba(255, 255, 255, 0.3)';\nexport const COLOR_SECONDARY = COLOR_WHITE_ALPHA30;\nexport const COLOR_DARK = '#4C5264';\nexport const COLOR_GRAY_BLUE = '#BCC5D3';\nexport const COLOR_BLUE_GRAY = '#b0caff';\nexport const COLOR_WHITE_BLUE = '#E2E8ED';\nexport const COLOR_WHITE = '#ffffff';\nexport const COLOR_WHITE_ALPHA60 = 'rgba(255, 255, 255, 0.6)';\nexport const COLOR_GRAY = COLOR_WHITE_ALPHA60;\nexport const GRADIENT_PRIMARY = ['#5574f7', '#60C3FF'];\n\nexport const TYPE_FONT_SIZE_HEADING_1 = 36;\nexport const TYPE_FONT_SIZE_HEADING_2 = 24;\nexport const TYPE_FONT_SIZE_HEADING_3 = 20;\nexport const TYPE_FONT_SIZE_HEADING_4 = 16;\nexport const TYPE_FONT_SIZE_HEADING_5 = 14;\nexport const TYPE_FONT_SIZE_HEADING_6 = 12;\nexport const TYPE_FONT_SIZE_PARAGRAPH = 14;\n\nexport const TYPE_LINE_HEIGHT_HEADING_1 = 1.5;\nexport const TYPE_LINE_HEIGHT_HEADING_2 = 1.75;\nexport const TYPE_LINE_HEIGHT_HEADING_3 = 1.625;\nexport const TYPE_LINE_HEIGHT_HEADING_4 = 1.25;\nexport const TYPE_LINE_HEIGHT_HEADING_5 = 1.125;\nexport const TYPE_LINE_HEIGHT_HEADING_6 = 1;\nexport const TYPE_LINE_HEIGHT_PARAGRAPH = 1.25;\n\nexport const AVATAR_SIZE_SMALLER = 2.5;\nexport const AVATAR_SIZE_SMALL = 3.75;\nexport const AVATAR_SIZE_DEFAULT = 6.25;\n\nexport const colors = {\n  primary: COLOR_PRIMARY,\n  primaryLight: COLOR_PRIMARY_LIGHT,\n  primaryFill: COLOR_PRIMARY_FILL,\n  error: COLOR_ERROR,\n  secondary: COLOR_SECONDARY,\n  dark: COLOR_DARK,\n  grayBlue: COLOR_GRAY_BLUE,\n  whiteBlue: COLOR_WHITE_BLUE,\n  white: COLOR_WHITE,\n  gray: COLOR_GRAY,\n};\n\nexport const fontSizes = {\n  h1: TYPE_FONT_SIZE_HEADING_1,\n  h2: TYPE_FONT_SIZE_HEADING_2,\n  h3: TYPE_FONT_SIZE_HEADING_3,\n  h4: TYPE_FONT_SIZE_HEADING_4,\n  h5: TYPE_FONT_SIZE_HEADING_5,\n  h6: TYPE_FONT_SIZE_HEADING_6,\n  p: TYPE_FONT_SIZE_PARAGRAPH,\n};\n\nexport const lineHeights = {\n  h1: TYPE_LINE_HEIGHT_HEADING_1,\n  h2: TYPE_LINE_HEIGHT_HEADING_2,\n  h3: TYPE_LINE_HEIGHT_HEADING_3,\n  h4: TYPE_LINE_HEIGHT_HEADING_4,\n  h5: TYPE_LINE_HEIGHT_HEADING_5,\n  h6: TYPE_LINE_HEIGHT_HEADING_6,\n  p: TYPE_LINE_HEIGHT_PARAGRAPH,\n};\n\nexport const avatarSizes = {\n  smaller: AVATAR_SIZE_SMALLER,\n  small: AVATAR_SIZE_SMALL,\n  default: AVATAR_SIZE_DEFAULT,\n};\n\nexport const type = {\n  fontSizes,\n  lineHeights,\n};\n\nexport default {\n  colors,\n  type,\n  avatarSizes,\n};\n","export { default } from './Button';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nimport {\n  COLOR_PRIMARY,\n  COLOR_WHITE,\n  COLOR_GRAY_BLUE,\n  GRADIENT_PRIMARY,\n  TYPE_FONT_SIZE_HEADING_6,\n} from '@/constants';\nimport { styleLengths } from '@utils/string-utils';\n\nconst disabledStyles = css`\n  background-color: ${COLOR_GRAY_BLUE};\n\n  && {\n    cursor: default;\n  }\n`;\n\n/**\n * Returns `null` if an icon node is not provided. Otherwise, it returns a\n * styled <Icon /> component.\n */\nfunction buttonIcon({ icon, type = 'default', iconOnly = false }) {\n  if (!icon) {\n    return null;\n  }\n\n  const Icon = styled(icon).attrs(() => ({\n    dark: type !== 'link',\n  }))`\n    margin-right: ${iconOnly ? 0 : '1.125em'};\n    vertical-align: middle;\n\n    && svg {\n      font-size: 1.125em;\n    }\n  `;\n\n  return <Icon />;\n}\n\n/** Linear gradient value builder for the `background` property. */\nfunction linearGradient(colors) {\n  return `linear-gradient(to right, ${colors})`;\n}\n\nconst BasicButton = styled.div.attrs(({ text }) => ({\n  children: text,\n  role: 'button',\n}))`\n  border: 0;\n  outline: none;\n  user-select: none;\n  display: inline-block;\n  text-align: center;\n  vertical-align: middle;\n  background: ${({ type }) =>\n    type === 'link' ? 'transparent' : COLOR_PRIMARY};\n  color: ${({ type }) => (type === 'link' ? COLOR_PRIMARY : COLOR_WHITE)};\n  text-transform: uppercase;\n  border-radius: 0.375em;\n  padding: 1em;\n  font-size: ${styleLengths(TYPE_FONT_SIZE_HEADING_6)};\n  font-weight: 500;\n  overflow: hidden;\n  position: relative;\n\n  &:hover {\n    cursor: pointer;\n  }\n\n  ${({ disabled }) => disabled && disabledStyles}\n`;\n\nconst IconOnlyButton = styled(BasicButton).attrs(({ icon }) => ({\n  children: buttonIcon({ icon, iconOnly: true }),\n}))`\n  border-radius: 50%;\n`;\n\nconst WideButton = styled(BasicButton)`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  background: ${({ type, disabled }) => {\n    if (disabled) {\n      return type === 'link' ? 'transparent' : COLOR_GRAY_BLUE;\n    }\n\n    return type === 'link' ? 'transparent' : linearGradient(GRADIENT_PRIMARY);\n  }};\n  color: ${({ type, disabled, theme: { darkMode } }) => {\n    if (type === 'link') {\n      if (disabled) {\n        return 'inherit';\n      }\n\n      return darkMode ? 'inherit' : COLOR_PRIMARY;\n    }\n\n    return COLOR_WHITE;\n  }};\n  border-radius: ${({ block }) => (block ? 0 : '0.375em')};\n  min-height: 4em;\n  margin: ${({ block }) => (block ? 0 : '1.25em 1.875em')};\n`;\n\n/**\n * Button signals to the user that an action can be performed by clicking or\n * taping this element.\n */\nexport default function Button({\n  basic,\n  text,\n  block,\n  type,\n  icon,\n  iconOnly,\n  ...props\n}) {\n  if (props.disabled) {\n    props.onClick = undefined;\n  }\n\n  if (iconOnly) {\n    return <IconOnlyButton icon={icon} {...props} />;\n  }\n\n  if (basic) {\n    return <BasicButton text={text} type={type} {...props} />;\n  }\n\n  return (\n    <WideButton block={block} type={type} {...props}>\n      {buttonIcon({ icon, type })} {text}\n    </WideButton>\n  );\n}\n\nButton.defaultProps = {\n  basic: false,\n  block: false,\n  color: 'default',\n  icon: null,\n  iconOnly: false,\n  type: 'default',\n  disabled: false,\n};\n\nButton.propTypes = {\n  /** Text to display on the button */\n  text: PropTypes.string,\n\n  /** Handler to call when button is clicked */\n  onClick: PropTypes.func,\n\n  /** If set to `true`, the button cannot be interacted with */\n  disabled: PropTypes.bool,\n\n  /**\n   * Button width is determined by the content. If set to `true`, the value of\n   * `icon` will be ignored.\n   */\n  basic: PropTypes.bool,\n\n  /** If set to `true`, the button's width will span it's container's width */\n  block: PropTypes.bool,\n\n  /** Button color preset */\n  color: PropTypes.oneOf(['default', 'secondary']),\n\n  /** Button type */\n  type: PropTypes.oneOf(['default', 'link']),\n\n  /** The icon to be displayed before the button text */\n  icon: PropTypes.func,\n\n  /**\n   * A button that contains only an icon. If this is set to `true` the value of\n   * `text` is ignored.\n   */\n  iconOnly: PropTypes.bool,\n};\n"],"sourceRoot":""}