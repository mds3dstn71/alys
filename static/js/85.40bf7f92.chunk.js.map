{"version":3,"sources":["examples/ProgressBar/Example20pxHeight.jsx","components/ProgressBar/index.js","components/ProgressBar/ProgressBar.jsx","components/utils/percent-utils.js"],"names":["_react","default","createElement","_ProgressBar","percent","width","height","_interopRequireDefault","__webpack_require__","_styledComponents","_percentUtils","_stringUtils","ProgressBarWrapper","styled","div","withConfig","displayName","componentId","_ref","styleLengths","ProgressBarValue","_ref2","getWidthAsPercentOfTotalWidth","_ref3","_ref4","ProgressBar","_ref5","defaultProps","totalWidth","parseInt"],"mappings":"sJAIe,WACb,OAAOA,EAAAC,QAAAC,cAACC,EAAAF,QAAD,CAAaG,QAAS,IAAKC,MAAO,IAAKC,OAAQ,MALxD,IAAAN,EAAAO,EAAAC,EAAA,IACAL,EAAAI,EAAAC,EAAA,+NCDA,MAAAL,KAAAK,EAAA,+HCAA,IAAAR,EAAAO,EAAAC,EAAA,IAEAC,EAAAF,EAAAC,EAAA,IAEAE,EAAAF,EAAA,IACAG,EAAAH,EAAA,uDAEA,IAAMI,EAAqBC,UAAOC,IAAVC,WAAA,CAAAC,YAAA,kCAAAC,YAAA,gBAAGJ,CAAH,0CAEb,SAAAK,GAAA,IAAGb,EAAHa,EAAGb,MAAH,OAAe,EAAAM,EAAAQ,cAAad,KAGjCe,EAAmBP,UAAOC,IAAVC,WAAA,CAAAC,YAAA,gCAAAC,YAAA,gBAAGJ,CAAH,+CACX,SAAAQ,GAAA,IAAGjB,EAAHiB,EAAGjB,QAASC,EAAZgB,EAAYhB,MAAZ,OACP,EAAAM,EAAAQ,eAAa,EAAAT,EAAAY,+BAA8BlB,EAASC,KAC5C,SAAAkB,GAAA,IAAGjB,EAAHiB,EAAGjB,OAAH,OAAgB,EAAAK,EAAAQ,cAAab,IACnB,SAAAkB,GAAiB,IAAdpB,EAAcoB,EAAdpB,QACrB,OAAgB,MAAZA,EAAwB,QAErBA,EAAU,GAAK,aAAe,QAK1B,SAASqB,EAATC,GAAiD,IAA1BrB,EAA0BqB,EAA1BrB,MAAOC,EAAmBoB,EAAnBpB,OAAQF,EAAWsB,EAAXtB,QACnD,OACEJ,EAAAC,QAAAC,cAACU,EAAD,CAAoBP,MAAOA,GACzBL,EAAAC,QAAAC,cAACkB,EAAD,CAAkBf,MAAOA,EAAOC,OAAQA,EAAQF,QAASA,KAK/DqB,EAAYE,aAAe,CACzBrB,OAAQ,qHChCH,SAAuCF,EAASwB,GACrD,OAAOC,SAASD,GAAcxB,EAAU,KAAM","file":"static/js/85.40bf7f92.chunk.js","sourcesContent":["import React from 'react';\nimport ProgressBar from 'alys/ProgressBar';\n\n/** 20px height and 100% progress */\nexport default function Example20pxHeight() {\n  return <ProgressBar percent={100} width={150} height={20} />;\n}\n","export { default } from './ProgressBar';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { getWidthAsPercentOfTotalWidth } from '@utils/percent-utils';\nimport { styleLengths } from '@utils/string-utils';\n\nconst ProgressBarWrapper = styled.div`\n  border: solid 1px lightgray;\n  width: ${({ width }) => styleLengths(width)};\n`;\n\nconst ProgressBarValue = styled.div`\n  width: ${({ percent, width }) =>\n    styleLengths(getWidthAsPercentOfTotalWidth(percent, width))};\n  height: ${({ height }) => styleLengths(height)};\n  background-color: ${({ percent }) => {\n    if (percent === 100) return 'green';\n\n    return percent > 50 ? 'lightgreen' : 'red';\n  }};\n`;\n\n/** A custom progress bar. */\nexport default function ProgressBar({ width, height, percent }) {\n  return (\n    <ProgressBarWrapper width={width}>\n      <ProgressBarValue width={width} height={height} percent={percent} />\n    </ProgressBarWrapper>\n  );\n}\n\nProgressBar.defaultProps = {\n  height: 5,\n};\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number,\n};\n","/** Returns the width of a percent of total widths, as an integer */\nexport function getWidthAsPercentOfTotalWidth(percent, totalWidth) {\n  return parseInt(totalWidth * (percent / 100), 10);\n}\n"],"sourceRoot":""}