{"version":3,"sources":["examples/Truncate/ExampleDefault.jsx","components/Truncate/index.js","components/Truncate/Truncate.jsx","../node_modules/throttle-debounce/dist/index.esm.js"],"names":["_react","default","createElement","_Truncate","_interopRequireDefault","__webpack_require__","_interopRequireWildcard","_throttleDebounce","Truncate","_componentRef","createRef","_textRef","_ellipsisRef","state","truncating","truncatedString","componentDidUpdate","_","prevState","_this","_resetTruncate","_setComponentRef","element","_setEllipsisRef","_setTextRef","_getTruncatedString","_this$props","props","text","children","ellipsis","componentWidth","offsetWidth","textWidth","position","Math","floor","length","slice","concat","trimRight","debounce","setState","Component","this","window","addEventListener","removeEventListener","_this$state","ref","style","display","overflow","whiteSpace","defaultProps","throttle","delay","noTrailing","callback","debounceMode","timeoutID","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","self","elapsed","Date","now","args","arguments","exec","apply","undefined","setTimeout","cancel","atBegin","r","__webpack_exports__","d"],"mappings":"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","file":"static/js/102.e1290baa.chunk.js","sourcesContent":["import React from 'react';\nimport Truncate from 'alys/Truncate';\n\n/** Default */\nexport default function ExampleDefault() {\n  return (\n    <Truncate>\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed ac\n      pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\n      pellentesque.Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed\n      ac pellentesque justo. Lorem ipsum consectetur adipiscing elit. Sed ac\n      pellentesque.\n    </Truncate>\n  );\n}\n","export { default } from './Truncate';\n","import React, { Component, createRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'throttle-debounce';\n\n/** Utility component to limit long text to one-line */\nexport default class Truncate extends Component {\n  static defaultProps = {\n    ellipsis: '...',\n  };\n\n  static propTypes = {\n    /** The text to truncate */\n    children: PropTypes.string.isRequired,\n\n    /** The text to append to the truncated text */\n    ellipsis: PropTypes.string,\n  };\n\n  _componentRef = createRef();\n  _textRef = createRef();\n  _ellipsisRef = createRef();\n\n  state = {\n    truncating: true,\n    truncatedString: null,\n  };\n\n  componentDidMount() {\n    const truncatedString = this._getTruncatedString(this.props.children);\n\n    this.setState({ truncatedString, truncating: false });\n    window.addEventListener('resize', this._resetTruncate);\n  }\n\n  componentDidUpdate = (_, prevState) =>\n    this.state.truncating === prevState.truncating && this._resetTruncate();\n\n  componentWillMount() {\n    window.removeEventListener('resize', this._resetTruncate);\n  }\n\n  render() {\n    const { children } = this.props;\n    const { truncating, truncatedString } = this.state;\n    const componentStyles = {\n      display: 'block',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap',\n    };\n\n    return (\n      <div ref={this._setComponentRef} style={componentStyles}>\n        {truncating && <span ref={this._setTextRef}>{children}</span>}\n        {truncating && <span ref={this._setEllipsisRef}>...</span>}\n        {!truncating && truncatedString}\n      </div>\n    );\n  }\n\n  _setComponentRef = (element) => (this._componentRef = element);\n  _setEllipsisRef = (element) => (this._ellipsisRef = element);\n  _setTextRef = (element) => (this._textRef = element);\n\n  _getTruncatedString = () => {\n    const { children: text, ellipsis } = this.props;\n    const componentWidth = this._componentRef.offsetWidth;\n    const textWidth = this._textRef.offsetWidth;\n\n    if (textWidth > componentWidth) {\n      const position =\n        Math.floor((text.length * componentWidth) / textWidth) -\n        ellipsis.length;\n      const truncatedString = text.slice(0, position);\n\n      return `${truncatedString.trimRight()}${ellipsis}`;\n    }\n\n    return text;\n  };\n\n  _resetTruncate = debounce(50, () => {\n    this.setState({ truncating: true }, () => {\n      const truncatedString = this._getTruncatedString(this.props.text);\n\n      this.setState({ truncatedString, truncating: false });\n    });\n  });\n}\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */\nfunction throttle(delay, noTrailing, callback, debounceMode) {\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel() {\n    clearExistingTimeout();\n    cancelled = true;\n  } // `noTrailing` defaults to falsy.\n\n\n  if (typeof noTrailing !== 'boolean') {\n    debounceMode = callback;\n    callback = noTrailing;\n    noTrailing = undefined;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n    var args = arguments;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, args);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      /*\n       * In throttle mode, if `delay` time has been exceeded, execute\n       * `callback`.\n       */\n      exec();\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n/* eslint-disable no-undefined */\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}  [atBegin]     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @return {Function} A new, debounced function.\n */\n\n\nfunction debounce(delay, atBegin, callback) {\n  return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n}\n\nexport { throttle, debounce };"],"sourceRoot":""}